// Code generated by cmd/codegen from https://github.com/AllenDang/cimgui-go.
// DO NOT EDIT.

package imspinner

// #include <stdlib.h>
// #include <memory.h>
// #include "wrapper.h"
// #include "typedefs.h"
// #include "../imgui/extra_types.h"
import "C"
import "github.com/AllenDang/cimgui-go/internal"

type AltColor struct {
	CData *C.AltColor
}

// Handle returns C version of AltColor and its finalizer func.
func (self *AltColor) Handle() (result *C.AltColor, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self AltColor) C() (C.AltColor, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewEmptyAltColor creates AltColor with its 0 value.
func NewEmptyAltColor() *AltColor {
	return &AltColor{CData: new(C.AltColor)}
}

// NewAltColorFromC creates AltColor from its C pointer.
// SRC ~= *C.AltColor
func NewAltColorFromC[SRC any](cvalue SRC) *AltColor {
	return &AltColor{CData: internal.ReinterpretCast[*C.AltColor](cvalue)}
}

type Angle struct {
	CData *C.Angle
}

// Handle returns C version of Angle and its finalizer func.
func (self *Angle) Handle() (result *C.Angle, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self Angle) C() (C.Angle, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewEmptyAngle creates Angle with its 0 value.
func NewEmptyAngle() *Angle {
	return &Angle{CData: new(C.Angle)}
}

// NewAngleFromC creates Angle from its C pointer.
// SRC ~= *C.Angle
func NewAngleFromC[SRC any](cvalue SRC) *Angle {
	return &Angle{CData: internal.ReinterpretCast[*C.Angle](cvalue)}
}

type AngleMax struct {
	CData *C.AngleMax
}

// Handle returns C version of AngleMax and its finalizer func.
func (self *AngleMax) Handle() (result *C.AngleMax, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self AngleMax) C() (C.AngleMax, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewEmptyAngleMax creates AngleMax with its 0 value.
func NewEmptyAngleMax() *AngleMax {
	return &AngleMax{CData: new(C.AngleMax)}
}

// NewAngleMaxFromC creates AngleMax from its C pointer.
// SRC ~= *C.AngleMax
func NewAngleMaxFromC[SRC any](cvalue SRC) *AngleMax {
	return &AngleMax{CData: internal.ReinterpretCast[*C.AngleMax](cvalue)}
}

type AngleMin struct {
	CData *C.AngleMin
}

// Handle returns C version of AngleMin and its finalizer func.
func (self *AngleMin) Handle() (result *C.AngleMin, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self AngleMin) C() (C.AngleMin, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewEmptyAngleMin creates AngleMin with its 0 value.
func NewEmptyAngleMin() *AngleMin {
	return &AngleMin{CData: new(C.AngleMin)}
}

// NewAngleMinFromC creates AngleMin from its C pointer.
// SRC ~= *C.AngleMin
func NewAngleMinFromC[SRC any](cvalue SRC) *AngleMin {
	return &AngleMin{CData: internal.ReinterpretCast[*C.AngleMin](cvalue)}
}

type BgColor struct {
	CData *C.BgColor
}

// Handle returns C version of BgColor and its finalizer func.
func (self *BgColor) Handle() (result *C.BgColor, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self BgColor) C() (C.BgColor, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewEmptyBgColor creates BgColor with its 0 value.
func NewEmptyBgColor() *BgColor {
	return &BgColor{CData: new(C.BgColor)}
}

// NewBgColorFromC creates BgColor from its C pointer.
// SRC ~= *C.BgColor
func NewBgColorFromC[SRC any](cvalue SRC) *BgColor {
	return &BgColor{CData: internal.ReinterpretCast[*C.BgColor](cvalue)}
}

type Color struct {
	CData *C.Color
}

// Handle returns C version of Color and its finalizer func.
func (self *Color) Handle() (result *C.Color, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self Color) C() (C.Color, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewEmptyColor creates Color with its 0 value.
func NewEmptyColor() *Color {
	return &Color{CData: new(C.Color)}
}

// NewColorFromC creates Color from its C pointer.
// SRC ~= *C.Color
func NewColorFromC[SRC any](cvalue SRC) *Color {
	return &Color{CData: internal.ReinterpretCast[*C.Color](cvalue)}
}

type Delta struct {
	CData *C.Delta
}

// Handle returns C version of Delta and its finalizer func.
func (self *Delta) Handle() (result *C.Delta, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self Delta) C() (C.Delta, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewEmptyDelta creates Delta with its 0 value.
func NewEmptyDelta() *Delta {
	return &Delta{CData: new(C.Delta)}
}

// NewDeltaFromC creates Delta from its C pointer.
// SRC ~= *C.Delta
func NewDeltaFromC[SRC any](cvalue SRC) *Delta {
	return &Delta{CData: internal.ReinterpretCast[*C.Delta](cvalue)}
}

type Dots struct {
	CData *C.Dots
}

// Handle returns C version of Dots and its finalizer func.
func (self *Dots) Handle() (result *C.Dots, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self Dots) C() (C.Dots, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewEmptyDots creates Dots with its 0 value.
func NewEmptyDots() *Dots {
	return &Dots{CData: new(C.Dots)}
}

// NewDotsFromC creates Dots from its C pointer.
// SRC ~= *C.Dots
func NewDotsFromC[SRC any](cvalue SRC) *Dots {
	return &Dots{CData: internal.ReinterpretCast[*C.Dots](cvalue)}
}

type FloatPtr struct {
	CData *C.FloatPtr
}

// Handle returns C version of FloatPtr and its finalizer func.
func (self *FloatPtr) Handle() (result *C.FloatPtr, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self FloatPtr) C() (C.FloatPtr, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewEmptyFloatPtr creates FloatPtr with its 0 value.
func NewEmptyFloatPtr() *FloatPtr {
	return &FloatPtr{CData: new(C.FloatPtr)}
}

// NewFloatPtrFromC creates FloatPtr from its C pointer.
// SRC ~= *C.FloatPtr
func NewFloatPtrFromC[SRC any](cvalue SRC) *FloatPtr {
	return &FloatPtr{CData: internal.ReinterpretCast[*C.FloatPtr](cvalue)}
}

type MiddleDots struct {
	CData *C.MiddleDots
}

// Handle returns C version of MiddleDots and its finalizer func.
func (self *MiddleDots) Handle() (result *C.MiddleDots, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self MiddleDots) C() (C.MiddleDots, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewEmptyMiddleDots creates MiddleDots with its 0 value.
func NewEmptyMiddleDots() *MiddleDots {
	return &MiddleDots{CData: new(C.MiddleDots)}
}

// NewMiddleDotsFromC creates MiddleDots from its C pointer.
// SRC ~= *C.MiddleDots
func NewMiddleDotsFromC[SRC any](cvalue SRC) *MiddleDots {
	return &MiddleDots{CData: internal.ReinterpretCast[*C.MiddleDots](cvalue)}
}

type MinThickness struct {
	CData *C.MinThickness
}

// Handle returns C version of MinThickness and its finalizer func.
func (self *MinThickness) Handle() (result *C.MinThickness, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self MinThickness) C() (C.MinThickness, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewEmptyMinThickness creates MinThickness with its 0 value.
func NewEmptyMinThickness() *MinThickness {
	return &MinThickness{CData: new(C.MinThickness)}
}

// NewMinThicknessFromC creates MinThickness from its C pointer.
// SRC ~= *C.MinThickness
func NewMinThicknessFromC[SRC any](cvalue SRC) *MinThickness {
	return &MinThickness{CData: internal.ReinterpretCast[*C.MinThickness](cvalue)}
}

type Mode struct {
	CData *C.Mode
}

// Handle returns C version of Mode and its finalizer func.
func (self *Mode) Handle() (result *C.Mode, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self Mode) C() (C.Mode, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewEmptyMode creates Mode with its 0 value.
func NewEmptyMode() *Mode {
	return &Mode{CData: new(C.Mode)}
}

// NewModeFromC creates Mode from its C pointer.
// SRC ~= *C.Mode
func NewModeFromC[SRC any](cvalue SRC) *Mode {
	return &Mode{CData: internal.ReinterpretCast[*C.Mode](cvalue)}
}

type Radius struct {
	CData *C.Radius
}

// Handle returns C version of Radius and its finalizer func.
func (self *Radius) Handle() (result *C.Radius, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self Radius) C() (C.Radius, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewEmptyRadius creates Radius with its 0 value.
func NewEmptyRadius() *Radius {
	return &Radius{CData: new(C.Radius)}
}

// NewRadiusFromC creates Radius from its C pointer.
// SRC ~= *C.Radius
func NewRadiusFromC[SRC any](cvalue SRC) *Radius {
	return &Radius{CData: internal.ReinterpretCast[*C.Radius](cvalue)}
}

type Reverse struct {
	CData *C.Reverse
}

// Handle returns C version of Reverse and its finalizer func.
func (self *Reverse) Handle() (result *C.Reverse, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self Reverse) C() (C.Reverse, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewEmptyReverse creates Reverse with its 0 value.
func NewEmptyReverse() *Reverse {
	return &Reverse{CData: new(C.Reverse)}
}

// NewReverseFromC creates Reverse from its C pointer.
// SRC ~= *C.Reverse
func NewReverseFromC[SRC any](cvalue SRC) *Reverse {
	return &Reverse{CData: internal.ReinterpretCast[*C.Reverse](cvalue)}
}

type Speed struct {
	CData *C.Speed
}

// Handle returns C version of Speed and its finalizer func.
func (self *Speed) Handle() (result *C.Speed, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self Speed) C() (C.Speed, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewEmptySpeed creates Speed with its 0 value.
func NewEmptySpeed() *Speed {
	return &Speed{CData: new(C.Speed)}
}

// NewSpeedFromC creates Speed from its C pointer.
// SRC ~= *C.Speed
func NewSpeedFromC[SRC any](cvalue SRC) *Speed {
	return &Speed{CData: internal.ReinterpretCast[*C.Speed](cvalue)}
}

type SpinnerConfig struct {
	CData *C.SpinnerConfig
}

// Handle returns C version of SpinnerConfig and its finalizer func.
func (self *SpinnerConfig) Handle() (result *C.SpinnerConfig, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self SpinnerConfig) C() (C.SpinnerConfig, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewEmptySpinnerConfig creates SpinnerConfig with its 0 value.
func NewEmptySpinnerConfig() *SpinnerConfig {
	return &SpinnerConfig{CData: new(C.SpinnerConfig)}
}

// NewSpinnerConfigFromC creates SpinnerConfig from its C pointer.
// SRC ~= *C.SpinnerConfig
func NewSpinnerConfigFromC[SRC any](cvalue SRC) *SpinnerConfig {
	return &SpinnerConfig{CData: internal.ReinterpretCast[*C.SpinnerConfig](cvalue)}
}

type SpinnerType struct {
	CData *C.SpinnerType
}

// Handle returns C version of SpinnerType and its finalizer func.
func (self *SpinnerType) Handle() (result *C.SpinnerType, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self SpinnerType) C() (C.SpinnerType, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewEmptySpinnerType creates SpinnerType with its 0 value.
func NewEmptySpinnerType() *SpinnerType {
	return &SpinnerType{CData: new(C.SpinnerType)}
}

// NewSpinnerTypeFromC creates SpinnerType from its C pointer.
// SRC ~= *C.SpinnerType
func NewSpinnerTypeFromC[SRC any](cvalue SRC) *SpinnerType {
	return &SpinnerType{CData: internal.ReinterpretCast[*C.SpinnerType](cvalue)}
}

type Thickness struct {
	CData *C.Thickness
}

// Handle returns C version of Thickness and its finalizer func.
func (self *Thickness) Handle() (result *C.Thickness, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self Thickness) C() (C.Thickness, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewEmptyThickness creates Thickness with its 0 value.
func NewEmptyThickness() *Thickness {
	return &Thickness{CData: new(C.Thickness)}
}

// NewThicknessFromC creates Thickness from its C pointer.
// SRC ~= *C.Thickness
func NewThicknessFromC[SRC any](cvalue SRC) *Thickness {
	return &Thickness{CData: internal.ReinterpretCast[*C.Thickness](cvalue)}
}
