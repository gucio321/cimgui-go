// Code generated by cmd/codegen from https://github.com/AllenDang/cimgui-go.
// DO NOT EDIT.

package imspinner

import (
	"unsafe"

	"github.com/AllenDang/cimgui-go/imgui"
	"github.com/AllenDang/cimgui-go/internal"
)

// #include "structs_accessor.h"
// #include "wrapper.h"
// #include "../imgui/extra_types.h"
import "C"

func NewAltColor(v imgui.Color) *AltColor {
	return NewAltColorFromC(C.AltColor_AltColor(internal.ReinterpretCast[C.ImColor](v.ToC())))
}

func (self *AltColor) Destroy() {
	selfArg, selfFin := self.Handle()
	C.AltColor_destroy(internal.ReinterpretCast[*C.AltColor](selfArg))

	selfFin()
}

func NewAngleMax(v float32) *AngleMax {
	return NewAngleMaxFromC(C.AngleMax_AngleMax(C.float(v)))
}

func (self *AngleMax) Destroy() {
	selfArg, selfFin := self.Handle()
	C.AngleMax_destroy(internal.ReinterpretCast[*C.AngleMax](selfArg))

	selfFin()
}

func NewAngleMin(v float32) *AngleMin {
	return NewAngleMinFromC(C.AngleMin_AngleMin(C.float(v)))
}

func (self *AngleMin) Destroy() {
	selfArg, selfFin := self.Handle()
	C.AngleMin_destroy(internal.ReinterpretCast[*C.AngleMin](selfArg))

	selfFin()
}

func NewAngle(v float32) *Angle {
	return NewAngleFromC(C.Angle_Angle(C.float(v)))
}

func (self *Angle) Destroy() {
	selfArg, selfFin := self.Handle()
	C.Angle_destroy(internal.ReinterpretCast[*C.Angle](selfArg))

	selfFin()
}

func NewBgColor(v imgui.Color) *BgColor {
	return NewBgColorFromC(C.BgColor_BgColor(internal.ReinterpretCast[C.ImColor](v.ToC())))
}

func (self *BgColor) Destroy() {
	selfArg, selfFin := self.Handle()
	C.BgColor_destroy(internal.ReinterpretCast[*C.BgColor](selfArg))

	selfFin()
}

func NewColor(v imgui.Color) *Color {
	return NewColorFromC(C.Color_Color(internal.ReinterpretCast[C.ImColor](v.ToC())))
}

func (self *Color) Destroy() {
	selfArg, selfFin := self.Handle()
	C.Color_destroy(internal.ReinterpretCast[*C.Color](selfArg))

	selfFin()
}

func NewDelta(v float32) *Delta {
	return NewDeltaFromC(C.Delta_Delta(C.float(v)))
}

func (self *Delta) Destroy() {
	selfArg, selfFin := self.Handle()
	C.Delta_destroy(internal.ReinterpretCast[*C.Delta](selfArg))

	selfFin()
}

func NewDots(v int32) *Dots {
	return NewDotsFromC(C.Dots_Dots(C.int(v)))
}

func (self *Dots) Destroy() {
	selfArg, selfFin := self.Handle()
	C.Dots_destroy(internal.ReinterpretCast[*C.Dots](selfArg))

	selfFin()
}

func (self *FloatPtr) Destroy() {
	selfArg, selfFin := self.Handle()
	C.FloatPtr_destroy(internal.ReinterpretCast[*C.FloatPtr](selfArg))

	selfFin()
}

// SpinnerSpinner3SmuggleDotsV parameter default value hint:
// color: white
// speed: 4.8f
// lt: 8
// delta: 0.5f
// mode: 0
func SpinnerSpinner3SmuggleDotsV(label string, radius, thickness float32, color imgui.Color, speed float32, lt int32, delta float32, mode bool) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_Spinner3SmuggleDots(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.int(lt), C.float(delta), C.bool(mode))

	labelFin()
}

// SpinnerSpinner4CaleidospcopeV parameter default value hint:
// color: 0xffffffff
// speed: 2.8f
// lt: 8
func SpinnerSpinner4CaleidospcopeV(label string, radius, thickness float32, color imgui.Color, speed float32, lt int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_Spinner4Caleidospcope(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.int(lt))

	labelFin()
}

// SpinnerSpinnerAngV parameter default value hint:
// color: white
// bg: white
// speed: 2.8f
// angle: 3.14159265358979323846f
// mode: 0
func SpinnerSpinnerAngV(label string, radius, thickness float32, color, bg imgui.Color, speed, angle float32, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerAng(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), internal.ReinterpretCast[C.ImColor](bg.ToC()), C.float(speed), C.float(angle), C.int(mode))

	labelFin()
}

// SpinnerSpinnerAng8V parameter default value hint:
// color: white
// bg: white
// speed: 2.8f
// angle: 3.14159265358979323846f
// mode: 0
// rkoef: 0.5f
func SpinnerSpinnerAng8V(label string, radius, thickness float32, color, bg imgui.Color, speed, angle float32, mode int32, rkoef float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerAng8(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), internal.ReinterpretCast[C.ImColor](bg.ToC()), C.float(speed), C.float(angle), C.int(mode), C.float(rkoef))

	labelFin()
}

// SpinnerSpinnerAngEclipseV parameter default value hint:
// color: white
// speed: 2.8f
// angle: 3.14159265358979323846f
func SpinnerSpinnerAngEclipseV(label string, radius, thickness float32, color imgui.Color, speed, angle float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerAngEclipse(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.float(angle))

	labelFin()
}

// SpinnerSpinnerAngMixV parameter default value hint:
// color: white
// speed: 2.8f
// angle: 3.14159265358979323846f
// arcs: 4
// mode: 0
func SpinnerSpinnerAngMixV(label string, radius, thickness float32, color imgui.Color, speed, angle float32, arcs, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerAngMix(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.float(angle), C.int(arcs), C.int(mode))

	labelFin()
}

// SpinnerSpinnerAngTripleV parameter default value hint:
// c1: white
// c2: half_white
// c3: white
// speed: 2.8f
// angle: 3.14159265358979323846f
func SpinnerSpinnerAngTripleV(label string, radius1, radius2, radius3, thickness float32, c1, c2, c3 imgui.Color, speed, angle float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerAngTriple(labelArg, C.float(radius1), C.float(radius2), C.float(radius3), C.float(thickness), internal.ReinterpretCast[C.ImColor](c1.ToC()), internal.ReinterpretCast[C.ImColor](c2.ToC()), internal.ReinterpretCast[C.ImColor](c3.ToC()), C.float(speed), C.float(angle))

	labelFin()
}

// SpinnerSpinnerAngTwinV parameter default value hint:
// color: white
// bg: half_white
// speed: 2.8f
// angle: 3.14159265358979323846f
// arcs: 1
// mode: 0
func SpinnerSpinnerAngTwinV(label string, radius1, radius2, thickness float32, color, bg imgui.Color, speed, angle float32, arcs uint64, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerAngTwin(labelArg, C.float(radius1), C.float(radius2), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), internal.ReinterpretCast[C.ImColor](bg.ToC()), C.float(speed), C.float(angle), C.xulong(arcs), C.int(mode))

	labelFin()
}

// SpinnerSpinnerArcFadeV parameter default value hint:
// color: white
// speed: 2.8f
// arcs: 4
// mode: 0
func SpinnerSpinnerArcFadeV(label string, radius, thickness float32, color imgui.Color, speed float32, arcs uint64, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerArcFade(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.xulong(arcs), C.int(mode))

	labelFin()
}

// SpinnerSpinnerArcPolarFadeV parameter default value hint:
// color: white
// speed: 2.8f
// arcs: 4
// mode: 0
func SpinnerSpinnerArcPolarFadeV(label string, radius float32, color imgui.Color, speed float32, arcs uint64, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerArcPolarFade(labelArg, C.float(radius), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.xulong(arcs), C.int(mode))

	labelFin()
}

// SpinnerSpinnerArcPolarRadiusV parameter default value hint:
// color: white
// speed: 2.8f
// arcs: 4
// mode: 0
func SpinnerSpinnerArcPolarRadiusV(label string, radius float32, color imgui.Color, speed float32, arcs uint64, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerArcPolarRadius(labelArg, C.float(radius), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.xulong(arcs), C.int(mode))

	labelFin()
}

// SpinnerSpinnerArcRotationV parameter default value hint:
// color: white
// speed: 2.8f
// arcs: 4
// mode: 0
func SpinnerSpinnerArcRotationV(label string, radius, thickness float32, color imgui.Color, speed float32, arcs uint64, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerArcRotation(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.xulong(arcs), C.int(mode))

	labelFin()
}

// SpinnerSpinnerArcWedgesV parameter default value hint:
// color: red
// speed: 2.8f
// arcs: 4
// mode: 0
func SpinnerSpinnerArcWedgesV(label string, radius float32, color imgui.Color, speed float32, arcs uint64, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerArcWedges(labelArg, C.float(radius), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.xulong(arcs), C.int(mode))

	labelFin()
}

// SpinnerSpinnerAsciiSymbolPointsV parameter default value hint:
// color: white
// speed: 2.8f
func SpinnerSpinnerAsciiSymbolPointsV(label, text string, radius, thickness float32, color imgui.Color, speed float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	textArg, textFin := internal.WrapString[C.char](text)
	C.ImSpinner_SpinnerAsciiSymbolPoints(labelArg, textArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed))

	labelFin()
	textFin()
}

// SpinnerSpinnerAtomV parameter default value hint:
// color: white
// speed: 2.8f
// elipses: 3
func SpinnerSpinnerAtomV(label string, radius, thickness float32, color imgui.Color, speed float32, elipses int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerAtom(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.int(elipses))

	labelFin()
}

// SpinnerSpinnerBarChartAdvSineV parameter default value hint:
// mode: 0
func SpinnerSpinnerBarChartAdvSineV(label string, radius, thickness float32, color imgui.Color, speed float32, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerBarChartAdvSine(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.int(mode))

	labelFin()
}

// SpinnerSpinnerBarChartAdvSineFadeV parameter default value hint:
// mode: 0
func SpinnerSpinnerBarChartAdvSineFadeV(label string, radius, thickness float32, color imgui.Color, speed float32, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerBarChartAdvSineFade(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.int(mode))

	labelFin()
}

// SpinnerSpinnerBarChartRainbowV parameter default value hint:
// bars: 5
// mode: 0
func SpinnerSpinnerBarChartRainbowV(label string, radius, thickness float32, color imgui.Color, speed float32, bars, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerBarChartRainbow(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.int(bars), C.int(mode))

	labelFin()
}

// SpinnerSpinnerBarChartSineV parameter default value hint:
// bars: 5
// mode: 0
func SpinnerSpinnerBarChartSineV(label string, radius, thickness float32, color imgui.Color, speed float32, bars, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerBarChartSine(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.int(bars), C.int(mode))

	labelFin()
}

// SpinnerSpinnerBarsRotateFadeV parameter default value hint:
// color: white
// speed: 2.8f
// bars: 6
func SpinnerSpinnerBarsRotateFadeV(label string, rmin, rmax, thickness float32, color imgui.Color, speed float32, bars uint64) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerBarsRotateFade(labelArg, C.float(rmin), C.float(rmax), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.xulong(bars))

	labelFin()
}

// SpinnerSpinnerBarsScaleMiddleV parameter default value hint:
// color: white
// speed: 2.8f
// bars: 3
func SpinnerSpinnerBarsScaleMiddleV(label string, w float32, color imgui.Color, speed float32, bars uint64) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerBarsScaleMiddle(labelArg, C.float(w), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.xulong(bars))

	labelFin()
}

func SpinnerSpinnerBlocks(label string, radius, thickness float32, bg, color imgui.Color, speed float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerBlocks(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](bg.ToC()), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed))

	labelFin()
}

// SpinnerSpinnerBounceBallV parameter default value hint:
// color: white
// speed: 2.8f
// dots: 1
// shadow: false
func SpinnerSpinnerBounceBallV(label string, radius, thickness float32, color imgui.Color, speed float32, dots int32, shadow bool) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerBounceBall(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.int(dots), C.bool(shadow))

	labelFin()
}

// SpinnerSpinnerBounceDotsV parameter default value hint:
// color: white
// speed: 2.8f
// dots: 3
// mode: 0
func SpinnerSpinnerBounceDotsV(label string, radius, thickness float32, color imgui.Color, speed float32, dots uint64, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerBounceDots(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.xulong(dots), C.int(mode))

	labelFin()
}

// SpinnerSpinnerCaleidoscopeV parameter default value hint:
// color: white
// speed: 2.8f
// arcs: 6
// mode: 0
func SpinnerSpinnerCaleidoscopeV(label string, radius, thickness float32, color imgui.Color, speed float32, arcs uint64, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerCaleidoscope(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.xulong(arcs), C.int(mode))

	labelFin()
}

// SpinnerSpinnerCircleDropV parameter default value hint:
// color: white
// bg: half_white
// speed: 2.8f
// angle: 3.14159265358979323846f
func SpinnerSpinnerCircleDropV(label string, radius, thickness, thickness_drop float32, color, bg imgui.Color, speed, angle float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerCircleDrop(labelArg, C.float(radius), C.float(thickness), C.float(thickness_drop), internal.ReinterpretCast[C.ImColor](color.ToC()), internal.ReinterpretCast[C.ImColor](bg.ToC()), C.float(speed), C.float(angle))

	labelFin()
}

// SpinnerSpinnerCircularLinesV parameter default value hint:
// color: white
// speed: 1.8f
// lines: 8
// mode: 0
func SpinnerSpinnerCircularLinesV(label string, radius float32, color imgui.Color, speed float32, lines, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerCircularLines(labelArg, C.float(radius), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.int(lines), C.int(mode))

	labelFin()
}

// SpinnerSpinnerCircularPointsV parameter default value hint:
// color: white
// speed: 1.8f
// lines: 8
func SpinnerSpinnerCircularPointsV(label string, radius, thickness float32, color imgui.Color, speed float32, lines int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerCircularPoints(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.int(lines))

	labelFin()
}

// SpinnerSpinnerClockV parameter default value hint:
// color: white
// bg: half_white
// speed: 2.8f
func SpinnerSpinnerClockV(label string, radius, thickness float32, color, bg imgui.Color, speed float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerClock(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), internal.ReinterpretCast[C.ImColor](bg.ToC()), C.float(speed))

	labelFin()
}

// SpinnerSpinnerCurvedCircleV parameter default value hint:
// color: white
// speed: 2.8f
// circles: 1
func SpinnerSpinnerCurvedCircleV(label string, radius, thickness float32, color imgui.Color, speed float32, circles uint64) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerCurvedCircle(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.xulong(circles))

	labelFin()
}

// SpinnerSpinnerDnaDotsV parameter default value hint:
// color: white
// speed: 2.8f
// lt: 8
// delta: 0.5f
// mode: 0
func SpinnerSpinnerDnaDotsV(label string, radius, thickness float32, color imgui.Color, speed float32, lt int32, delta float32, mode bool) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerDnaDots(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.int(lt), C.float(delta), C.bool(mode))

	labelFin()
}

// SpinnerSpinnerDotsV parameter default value hint:
// color: white
// speed: 2.8f
// dots: 12
// minth: -1.f
// mode: 0
func SpinnerSpinnerDotsV(label string, nextdot *float32, radius, thickness float32, color imgui.Color, speed float32, dots uint64, minth float32, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	nextdotArg, nextdotFin := internal.WrapNumberPtr[C.float, float32](nextdot)
	C.ImSpinner_SpinnerDots(labelArg, nextdotArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.xulong(dots), C.float(minth), C.int(mode))

	labelFin()
	nextdotFin()
}

func SpinnerSpinnerDotsLoading(label string, radius, thickness float32, color, bg imgui.Color, speed float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerDotsLoading(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), internal.ReinterpretCast[C.ImColor](bg.ToC()), C.float(speed))

	labelFin()
}

// SpinnerSpinnerDotsToBarV parameter default value hint:
// color: white
// speed: 2.8f
// dots: 5
func SpinnerSpinnerDotsToBarV(label string, radius, thickness, offset_k float32, color imgui.Color, speed float32, dots uint64) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerDotsToBar(labelArg, C.float(radius), C.float(thickness), C.float(offset_k), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.xulong(dots))

	labelFin()
}

// SpinnerSpinnerDotsToPointsV parameter default value hint:
// color: white
// speed: 1.8f
// dots: 5
func SpinnerSpinnerDotsToPointsV(label string, radius, thickness, offset_k float32, color imgui.Color, speed float32, dots uint64) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerDotsToPoints(labelArg, C.float(radius), C.float(thickness), C.float(offset_k), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.xulong(dots))

	labelFin()
}

// SpinnerSpinnerDoubleFadePulsarV parameter default value hint:
// bg: half_white
// speed: 2.8f
func SpinnerSpinnerDoubleFadePulsarV(label string, radius, noname1 float32, bg imgui.Color, speed float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerDoubleFadePulsar(labelArg, C.float(radius), C.float(noname1), internal.ReinterpretCast[C.ImColor](bg.ToC()), C.float(speed))

	labelFin()
}

// SpinnerSpinnerFadeBarsV parameter default value hint:
// color: white
// speed: 2.8f
// bars: 3
// scale: false
func SpinnerSpinnerFadeBarsV(label string, w float32, color imgui.Color, speed float32, bars uint64, scale bool) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerFadeBars(labelArg, C.float(w), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.xulong(bars), C.bool(scale))

	labelFin()
}

// SpinnerSpinnerFadeDotsV parameter default value hint:
// color: white
// speed: 2.8f
// lt: 8
// mode: 0
func SpinnerSpinnerFadeDotsV(label string, radius, thickness float32, color imgui.Color, speed float32, lt, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerFadeDots(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.int(lt), C.int(mode))

	labelFin()
}

// SpinnerSpinnerFadePulsarV parameter default value hint:
// color: white
// speed: 2.8f
// rings: 2
// mode: 0
func SpinnerSpinnerFadePulsarV(label string, radius float32, color imgui.Color, speed float32, rings, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerFadePulsar(labelArg, C.float(radius), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.int(rings), C.int(mode))

	labelFin()
}

// SpinnerSpinnerFadePulsarSquareV parameter default value hint:
// color: white
// speed: 2.8f
// rings: 2
// mode: 0
func SpinnerSpinnerFadePulsarSquareV(label string, radius float32, color imgui.Color, speed float32, rings, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerFadePulsarSquare(labelArg, C.float(radius), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.int(rings), C.int(mode))

	labelFin()
}

// SpinnerSpinnerFadeTrisV parameter default value hint:
// color: white
// speed: 2.8f
// dim: 2
// scale: false
// mode: 0
func SpinnerSpinnerFadeTrisV(label string, radius float32, color imgui.Color, speed float32, dim uint64, scale bool, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerFadeTris(labelArg, C.float(radius), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.xulong(dim), C.bool(scale), C.int(mode))

	labelFin()
}

// SpinnerSpinnerFilledArcColorV parameter default value hint:
// color: red
// bg: white
// speed: 2.8f
// arcs: 4
func SpinnerSpinnerFilledArcColorV(label string, radius float32, color, bg imgui.Color, speed float32, arcs uint64) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerFilledArcColor(labelArg, C.float(radius), internal.ReinterpretCast[C.ImColor](color.ToC()), internal.ReinterpretCast[C.ImColor](bg.ToC()), C.float(speed), C.xulong(arcs))

	labelFin()
}

// SpinnerSpinnerFilledArcFadeV parameter default value hint:
// color: white
// speed: 2.8f
// arcs: 4
// mode: 0
func SpinnerSpinnerFilledArcFadeV(label string, radius float32, color imgui.Color, speed float32, arcs uint64, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerFilledArcFade(labelArg, C.float(radius), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.xulong(arcs), C.int(mode))

	labelFin()
}

// SpinnerSpinnerFilledArcRingV parameter default value hint:
// color: red
// bg: white
// speed: 2.8f
// arcs: 4
func SpinnerSpinnerFilledArcRingV(label string, radius, thickness float32, color, bg imgui.Color, speed float32, arcs uint64) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerFilledArcRing(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), internal.ReinterpretCast[C.ImColor](bg.ToC()), C.float(speed), C.xulong(arcs))

	labelFin()
}

// SpinnerSpinnerFillingV parameter default value hint:
// color1: white
// color2: red
// speed: 2.8f
func SpinnerSpinnerFillingV(label string, radius, thickness float32, color1, color2 imgui.Color, speed float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerFilling(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color1.ToC()), internal.ReinterpretCast[C.ImColor](color2.ToC()), C.float(speed))

	labelFin()
}

// SpinnerSpinnerFiveDotsV parameter default value hint:
// color: 0xffffffff
// speed: 2.8f
// lt: 8
func SpinnerSpinnerFiveDotsV(label string, radius, thickness float32, color imgui.Color, speed float32, lt int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerFiveDots(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.int(lt))

	labelFin()
}

// SpinnerSpinnerFlowingGradientV parameter default value hint:
// color: white
// bg: red
// speed: 2.8f
// angle: 3.14159265358979323846f
func SpinnerSpinnerFlowingGradientV(label string, radius, thickness float32, color, bg imgui.Color, speed, angle float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerFlowingGradient(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), internal.ReinterpretCast[C.ImColor](bg.ToC()), C.float(speed), C.float(angle))

	labelFin()
}

// SpinnerSpinnerFluidV parameter default value hint:
// bars: 3
func SpinnerSpinnerFluidV(label string, radius float32, color imgui.Color, speed float32, bars int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerFluid(labelArg, C.float(radius), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.int(bars))

	labelFin()
}

// SpinnerSpinnerFluidPointsV parameter default value hint:
// dots: 6
// delta: 0.35f
func SpinnerSpinnerFluidPointsV(label string, radius, thickness float32, color imgui.Color, speed float32, dots uint64, delta float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerFluidPoints(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.xulong(dots), C.float(delta))

	labelFin()
}

// SpinnerSpinnerGalaxyDotsV parameter default value hint:
// color: white
// speed: 2.8f
// arcs: 4
func SpinnerSpinnerGalaxyDotsV(label string, radius, thickness float32, color imgui.Color, speed float32, arcs int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerGalaxyDots(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.int(arcs))

	labelFin()
}

// SpinnerSpinnerGooeyBallsV parameter default value hint:
// mode: 0
func SpinnerSpinnerGooeyBallsV(label string, radius float32, color imgui.Color, speed float32, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerGooeyBalls(labelArg, C.float(radius), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.int(mode))

	labelFin()
}

// SpinnerSpinnerHboDotsV parameter default value hint:
// color: white
// minfade: 0.0f
// ryk: 0.f
// speed: 1.1f
// dots: 6
// mode: 0
func SpinnerSpinnerHboDotsV(label string, radius, thickness float32, color imgui.Color, minfade, ryk, speed float32, dots uint64, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerHboDots(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(minfade), C.float(ryk), C.float(speed), C.xulong(dots), C.int(mode))

	labelFin()
}

func SpinnerSpinnerHerbertBalls(label string, radius, thickness float32, color imgui.Color, speed float32, balls int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerHerbertBalls(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.int(balls))

	labelFin()
}

func SpinnerSpinnerHerbertBalls3D(label string, radius, thickness float32, color imgui.Color, speed float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerHerbertBalls3D(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed))

	labelFin()
}

// SpinnerSpinnerIncDotsV parameter default value hint:
// color: white
// speed: 2.8f
// dots: 6
func SpinnerSpinnerIncDotsV(label string, radius, thickness float32, color imgui.Color, speed float32, dots uint64) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerIncDots(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.xulong(dots))

	labelFin()
}

// SpinnerSpinnerIncFullDotsV parameter default value hint:
// color: white
// speed: 2.8f
// dots: 4
func SpinnerSpinnerIncFullDotsV(label string, radius, thickness float32, color imgui.Color, speed float32, dots uint64) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerIncFullDots(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.xulong(dots))

	labelFin()
}

// SpinnerSpinnerIncScaleDotsV parameter default value hint:
// color: white
// speed: 2.8f
// dots: 6
// angle: 0.f
// mode: 0
func SpinnerSpinnerIncScaleDotsV(label string, radius, thickness float32, color imgui.Color, speed float32, dots uint64, angle float32, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerIncScaleDots(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.xulong(dots), C.float(angle), C.int(mode))

	labelFin()
}

// SpinnerSpinnerIngYangV parameter default value hint:
// colorI: white
// colorY: white
// speed: 2.8f
// angle: 3.14159265358979323846f* 0.7f
// mode: 0
func SpinnerSpinnerIngYangV(label string, radius, thickness float32, reverse bool, yang_detlta_r float32, colorI, colorY imgui.Color, speed, angle float32, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerIngYang(labelArg, C.float(radius), C.float(thickness), C.bool(reverse), C.float(yang_detlta_r), internal.ReinterpretCast[C.ImColor](colorI.ToC()), internal.ReinterpretCast[C.ImColor](colorY.ToC()), C.float(speed), C.float(angle), C.int(mode))

	labelFin()
}

// SpinnerSpinnerLemniscateV parameter default value hint:
// color: white
// speed: 2.8f
// angle: 3.14159265358979323846f / 2.0f
func SpinnerSpinnerLemniscateV(label string, radius, thickness float32, color imgui.Color, speed, angle float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerLemniscate(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.float(angle))

	labelFin()
}

// SpinnerSpinnerLoadingRingV parameter default value hint:
// color: white
// bg: half_white
// speed: 2.8f
// segments: 5
func SpinnerSpinnerLoadingRingV(label string, radius, thickness float32, color, bg imgui.Color, speed float32, segments int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerLoadingRing(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), internal.ReinterpretCast[C.ImColor](bg.ToC()), C.float(speed), C.int(segments))

	labelFin()
}

// SpinnerSpinnerModCircleV parameter default value hint:
// color: white
// ang_min: 1.f
// ang_max: 1.f
// speed: 2.8f
func SpinnerSpinnerModCircleV(label string, radius, thickness float32, color imgui.Color, ang_min, ang_max, speed float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerModCircle(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(ang_min), C.float(ang_max), C.float(speed))

	labelFin()
}

// SpinnerSpinnerMoonDotsV parameter default value hint:
// speed: 1.1f
func SpinnerSpinnerMoonDotsV(label string, radius, thickness float32, first, second imgui.Color, speed float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerMoonDots(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](first.ToC()), internal.ReinterpretCast[C.ImColor](second.ToC()), C.float(speed))

	labelFin()
}

// SpinnerSpinnerMoonLineV parameter default value hint:
// color: white
// bg: red
// speed: 2.8f
// angle: 3.14159265358979323846f
func SpinnerSpinnerMoonLineV(label string, radius, thickness float32, color, bg imgui.Color, speed, angle float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerMoonLine(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), internal.ReinterpretCast[C.ImColor](bg.ToC()), C.float(speed), C.float(angle))

	labelFin()
}

// SpinnerSpinnerMovingArcsV parameter default value hint:
// color: white
// speed: 2.8f
// arcs: 4
func SpinnerSpinnerMovingArcsV(label string, radius, thickness float32, color imgui.Color, speed float32, arcs uint64) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerMovingArcs(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.xulong(arcs))

	labelFin()
}

// SpinnerSpinnerMovingDotsV parameter default value hint:
// color: white
// speed: 2.8f
// dots: 3
func SpinnerSpinnerMovingDotsV(label string, radius, thickness float32, color imgui.Color, speed float32, dots uint64) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerMovingDots(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.xulong(dots))

	labelFin()
}

// SpinnerSpinnerMultiFadeDotsV parameter default value hint:
// color: white
// speed: 2.8f
// lt: 8
func SpinnerSpinnerMultiFadeDotsV(label string, radius, thickness float32, color imgui.Color, speed float32, lt int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerMultiFadeDots(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.int(lt))

	labelFin()
}

// SpinnerSpinnerOrionDotsV parameter default value hint:
// color: white
// speed: 2.8f
// arcs: 4
func SpinnerSpinnerOrionDotsV(label string, radius, thickness float32, color imgui.Color, speed float32, arcs int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerOrionDots(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.int(arcs))

	labelFin()
}

// SpinnerSpinnerPatternEclipseV parameter default value hint:
// color: white
// speed: 2.8f
// elipses: 3
// delta_a: 2.f
// delta_y: 0.f
func SpinnerSpinnerPatternEclipseV(label string, radius, thickness float32, color imgui.Color, speed float32, elipses int32, delta_a, delta_y float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerPatternEclipse(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.int(elipses), C.float(delta_a), C.float(delta_y))

	labelFin()
}

// SpinnerSpinnerPatternRingsV parameter default value hint:
// color: white
// speed: 2.8f
// elipses: 3
func SpinnerSpinnerPatternRingsV(label string, radius, thickness float32, color imgui.Color, speed float32, elipses int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerPatternRings(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.int(elipses))

	labelFin()
}

// SpinnerSpinnerPatternSphereV parameter default value hint:
// color: white
// speed: 2.8f
// elipses: 3
func SpinnerSpinnerPatternSphereV(label string, radius, thickness float32, color imgui.Color, speed float32, elipses int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerPatternSphere(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.int(elipses))

	labelFin()
}

// SpinnerSpinnerPointsArcBounceV parameter default value hint:
// color: white
// speed: 2.8f
// points: 4
// circles: 2
// rspeed: 0.f
func SpinnerSpinnerPointsArcBounceV(label string, radius, thickness float32, color imgui.Color, speed float32, points uint64, circles int32, rspeed float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerPointsArcBounce(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.xulong(points), C.int(circles), C.float(rspeed))

	labelFin()
}

// SpinnerSpinnerPointsRollerV parameter default value hint:
// color: white
// speed: 2.8f
// points: 8
// circles: 2
// rspeed: 1.f
func SpinnerSpinnerPointsRollerV(label string, radius, thickness float32, color imgui.Color, speed float32, points uint64, circles int32, rspeed float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerPointsRoller(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.xulong(points), C.int(circles), C.float(rspeed))

	labelFin()
}

// SpinnerSpinnerPointsShiftV parameter default value hint:
// color: white
// bg: half_white
// speed: 2.8f
// bars: 8
func SpinnerSpinnerPointsShiftV(label string, radius, thickness float32, color, bg imgui.Color, speed float32, bars uint64) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerPointsShift(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), internal.ReinterpretCast[C.ImColor](bg.ToC()), C.float(speed), C.xulong(bars))

	labelFin()
}

// SpinnerSpinnerPulsarV parameter default value hint:
// bg: half_white
// speed: 2.8f
// sequence: true
// angle: 0.f
// mode: 0
func SpinnerSpinnerPulsarV(label string, radius, thickness float32, bg imgui.Color, speed float32, sequence bool, angle float32, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerPulsar(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](bg.ToC()), C.float(speed), C.bool(sequence), C.float(angle), C.int(mode))

	labelFin()
}

// SpinnerSpinnerPulsarBallV parameter default value hint:
// color: white
// speed: 2.8f
// shadow: false
// mode: 0
func SpinnerSpinnerPulsarBallV(label string, radius, thickness float32, color imgui.Color, speed float32, shadow bool, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerPulsarBall(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.bool(shadow), C.int(mode))

	labelFin()
}

// SpinnerSpinnerRainbowV parameter default value hint:
// ang_min: 0.f
// ang_max: PI_2
// arcs: 1
// mode: 0
func SpinnerSpinnerRainbowV(label string, radius, thickness float32, color imgui.Color, speed, ang_min, ang_max float32, arcs, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerRainbow(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.float(ang_min), C.float(ang_max), C.int(arcs), C.int(mode))

	labelFin()
}

// SpinnerSpinnerRainbowBallsV parameter default value hint:
// balls: 5
// mode: 0
func SpinnerSpinnerRainbowBallsV(label string, radius, thickness float32, color imgui.Color, speed float32, balls, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerRainbowBalls(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.int(balls), C.int(mode))

	labelFin()
}

// SpinnerSpinnerRainbowCircleV parameter default value hint:
// color: white
// speed: 2.8f
// arcs: 4
// mode: 1
func SpinnerSpinnerRainbowCircleV(label string, radius, thickness float32, color imgui.Color, speed float32, arcs uint64, mode float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerRainbowCircle(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.xulong(arcs), C.float(mode))

	labelFin()
}

// SpinnerSpinnerRainbowMixV parameter default value hint:
// ang_min: 0.f
// ang_max: PI_2
// arcs: 1
// mode: 0
func SpinnerSpinnerRainbowMixV(label string, radius, thickness float32, color imgui.Color, speed, ang_min, ang_max float32, arcs, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerRainbowMix(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.float(ang_min), C.float(ang_max), C.int(arcs), C.int(mode))

	labelFin()
}

// SpinnerSpinnerRainbowShotV parameter default value hint:
// balls: 5
func SpinnerSpinnerRainbowShotV(label string, radius, thickness float32, color imgui.Color, speed float32, balls int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerRainbowShot(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.int(balls))

	labelFin()
}

// SpinnerSpinnerRingSynchronousV parameter default value hint:
// color: white
// speed: 2.8f
// elipses: 3
func SpinnerSpinnerRingSynchronousV(label string, radius, thickness float32, color imgui.Color, speed float32, elipses int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerRingSynchronous(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.int(elipses))

	labelFin()
}

// SpinnerSpinnerRingWatermarksV parameter default value hint:
// color: white
// speed: 2.8f
// elipses: 3
func SpinnerSpinnerRingWatermarksV(label string, radius, thickness float32, color imgui.Color, speed float32, elipses int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerRingWatermarks(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.int(elipses))

	labelFin()
}

// SpinnerSpinnerRotateDotsV parameter default value hint:
// color: white
// speed: 2.8f
// dots: 2
// mode: 0
func SpinnerSpinnerRotateDotsV(label string, radius, thickness float32, color imgui.Color, speed float32, dots, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerRotateDots(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.int(dots), C.int(mode))

	labelFin()
}

// SpinnerSpinnerRotateGearV parameter default value hint:
// color: white
// speed: 2.8f
// pins: 12
func SpinnerSpinnerRotateGearV(label string, radius, thickness float32, color imgui.Color, speed float32, pins uint64) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerRotateGear(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.xulong(pins))

	labelFin()
}

// SpinnerSpinnerRotateGooeyBallsV parameter default value hint:
// mode: 0
func SpinnerSpinnerRotateGooeyBallsV(label string, radius, thickness float32, color imgui.Color, speed float32, balls, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerRotateGooeyBalls(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.int(balls), C.int(mode))

	labelFin()
}

// SpinnerSpinnerRotateSegmentsV parameter default value hint:
// color: white
// speed: 2.8f
// arcs: 4
// layers: 1
// mode: 0
func SpinnerSpinnerRotateSegmentsV(label string, radius, thickness float32, color imgui.Color, speed float32, arcs, layers uint64, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerRotateSegments(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.xulong(arcs), C.xulong(layers), C.int(mode))

	labelFin()
}

// SpinnerSpinnerRotateSegmentsPulsarV parameter default value hint:
// color: white
// speed: 2.8f
// arcs: 4
// layers: 1
func SpinnerSpinnerRotateSegmentsPulsarV(label string, radius, thickness float32, color imgui.Color, speed float32, arcs, layers uint64) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerRotateSegmentsPulsar(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.xulong(arcs), C.xulong(layers))

	labelFin()
}

func SpinnerSpinnerRotateShapes(label string, radius, thickness float32, color imgui.Color, speed float32, shapes, pnt int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerRotateShapes(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.int(shapes), C.int(pnt))

	labelFin()
}

// SpinnerSpinnerRotateTrianglesV parameter default value hint:
// mode: 0
func SpinnerSpinnerRotateTrianglesV(label string, radius, thickness float32, color imgui.Color, speed float32, tris, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerRotateTriangles(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.int(tris), C.int(mode))

	labelFin()
}

// SpinnerSpinnerRotateWheelV parameter default value hint:
// bg_color: white
// color: white
// speed: 2.8f
// pins: 12
func SpinnerSpinnerRotateWheelV(label string, radius, thickness float32, bg_color, color imgui.Color, speed float32, pins uint64) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerRotateWheel(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](bg_color.ToC()), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.xulong(pins))

	labelFin()
}

// SpinnerSpinnerRotatedAtomV parameter default value hint:
// color: white
// speed: 2.8f
// elipses: 3
// mode: 0
func SpinnerSpinnerRotatedAtomV(label string, radius, thickness float32, color imgui.Color, speed float32, elipses, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerRotatedAtom(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.int(elipses), C.int(mode))

	labelFin()
}

// SpinnerSpinnerRotatingHeartV parameter default value hint:
// ang_min: 0.f
func SpinnerSpinnerRotatingHeartV(label string, radius, thickness float32, color imgui.Color, speed, ang_min float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerRotatingHeart(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.float(ang_min))

	labelFin()
}

// SpinnerSpinnerScaleBlocksV parameter default value hint:
// mode: 0
func SpinnerSpinnerScaleBlocksV(label string, radius, thickness float32, color imgui.Color, speed float32, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerScaleBlocks(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.int(mode))

	labelFin()
}

// SpinnerSpinnerScaleDotsV parameter default value hint:
// color: white
// speed: 2.8f
// lt: 8
func SpinnerSpinnerScaleDotsV(label string, radius, thickness float32, color imgui.Color, speed float32, lt int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerScaleDots(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.int(lt))

	labelFin()
}

func SpinnerSpinnerScaleSquares(label string, radius, thikness float32, color imgui.Color, speed float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerScaleSquares(labelArg, C.float(radius), C.float(thikness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed))

	labelFin()
}

// SpinnerSpinnerSevenSegmentsV parameter default value hint:
// color: white
// speed: 2.8f
func SpinnerSpinnerSevenSegmentsV(label, text string, radius, thickness float32, color imgui.Color, speed float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	textArg, textFin := internal.WrapString[C.char](text)
	C.ImSpinner_SpinnerSevenSegments(labelArg, textArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed))

	labelFin()
	textFin()
}

// SpinnerSpinnerSimpleArcFadeV parameter default value hint:
// color: white
// speed: 2.8f
func SpinnerSpinnerSimpleArcFadeV(label string, radius, thickness float32, color imgui.Color, speed float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerSimpleArcFade(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed))

	labelFin()
}

// SpinnerSpinnerSinSquaresV parameter default value hint:
// mode: 0
func SpinnerSpinnerSinSquaresV(label string, radius, thickness float32, color imgui.Color, speed float32, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerSinSquares(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.int(mode))

	labelFin()
}

// SpinnerSpinnerSineArcsV parameter default value hint:
// color: white
// speed: 2.8f
func SpinnerSpinnerSineArcsV(label string, radius, thickness float32, color imgui.Color, speed float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerSineArcs(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed))

	labelFin()
}

// SpinnerSpinnerSolarArcsV parameter default value hint:
// ball: white
// bg: half_white
// speed: 2.8f
// balls: 4
func SpinnerSpinnerSolarArcsV(label string, radius, thickness float32, ball, bg imgui.Color, speed float32, balls uint64) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerSolarArcs(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](ball.ToC()), internal.ReinterpretCast[C.ImColor](bg.ToC()), C.float(speed), C.xulong(balls))

	labelFin()
}

// SpinnerSpinnerSolarBallsV parameter default value hint:
// ball: white
// bg: half_white
// speed: 2.8f
// balls: 4
func SpinnerSpinnerSolarBallsV(label string, radius, thickness float32, ball, bg imgui.Color, speed float32, balls uint64) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerSolarBalls(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](ball.ToC()), internal.ReinterpretCast[C.ImColor](bg.ToC()), C.float(speed), C.xulong(balls))

	labelFin()
}

// SpinnerSpinnerSolarScaleBallsV parameter default value hint:
// ball: white
// speed: 2.8f
// balls: 4
func SpinnerSpinnerSolarScaleBallsV(label string, radius, thickness float32, ball imgui.Color, speed float32, balls uint64) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerSolarScaleBalls(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](ball.ToC()), C.float(speed), C.xulong(balls))

	labelFin()
}

// SpinnerSpinnerSomeScaleDotsV parameter default value hint:
// color: white
// speed: 2.8f
// dots: 6
// mode: 0
func SpinnerSpinnerSomeScaleDotsV(label string, radius, thickness float32, color imgui.Color, speed float32, dots uint64, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerSomeScaleDots(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.xulong(dots), C.int(mode))

	labelFin()
}

// SpinnerSpinnerSpiralV parameter default value hint:
// color: white
// speed: 2.8f
// arcs: 4
func SpinnerSpinnerSpiralV(label string, radius, thickness float32, color imgui.Color, speed float32, arcs uint64) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerSpiral(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.xulong(arcs))

	labelFin()
}

// SpinnerSpinnerSpiralEyeV parameter default value hint:
// color: white
// speed: 2.8f
func SpinnerSpinnerSpiralEyeV(label string, radius, thickness float32, color imgui.Color, speed float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerSpiralEye(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed))

	labelFin()
}

// SpinnerSpinnerSplineAngV parameter default value hint:
// color: white
// bg: white
// speed: 2.8f
// angle: 3.14159265358979323846f
// mode: 0
func SpinnerSpinnerSplineAngV(label string, radius, thickness float32, color, bg imgui.Color, speed, angle float32, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerSplineAng(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), internal.ReinterpretCast[C.ImColor](bg.ToC()), C.float(speed), C.float(angle), C.int(mode))

	labelFin()
}

// SpinnerSpinnerSquareLoadingV parameter default value hint:
// color: white
// speed: 2.8f
func SpinnerSpinnerSquareLoadingV(label string, radius, thickness float32, color imgui.Color, speed float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerSquareLoading(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed))

	labelFin()
}

func SpinnerSpinnerSquareRandomDots(label string, radius, thickness float32, bg, color imgui.Color, speed float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerSquareRandomDots(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](bg.ToC()), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed))

	labelFin()
}

// SpinnerSpinnerSquareSpinsV parameter default value hint:
// color: white
// speed: 2.8f
func SpinnerSpinnerSquareSpinsV(label string, radius, thickness float32, color imgui.Color, speed float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerSquareSpins(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed))

	labelFin()
}

// SpinnerSpinnerSquareStrokeFadeV parameter default value hint:
// color: white
// speed: 2.8f
func SpinnerSpinnerSquareStrokeFadeV(label string, radius, thickness float32, color imgui.Color, speed float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerSquareStrokeFade(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed))

	labelFin()
}

// SpinnerSpinnerSquareStrokeFillV parameter default value hint:
// color: white
// speed: 2.8f
func SpinnerSpinnerSquareStrokeFillV(label string, radius, thickness float32, color imgui.Color, speed float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerSquareStrokeFill(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed))

	labelFin()
}

// SpinnerSpinnerSquareStrokeLoadingV parameter default value hint:
// color: white
// speed: 2.8f
func SpinnerSpinnerSquareStrokeLoadingV(label string, radius, thickness float32, color imgui.Color, speed float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerSquareStrokeLoading(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed))

	labelFin()
}

func SpinnerSpinnerSquishSquare(label string, radius float32, color imgui.Color, speed float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerSquishSquare(labelArg, C.float(radius), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed))

	labelFin()
}

// SpinnerSpinnerSurroundedIndicatorV parameter default value hint:
// color: white
// bg: half_white
// speed: 2.8f
func SpinnerSpinnerSurroundedIndicatorV(label string, radius, thickness float32, color, bg imgui.Color, speed float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerSurroundedIndicator(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), internal.ReinterpretCast[C.ImColor](bg.ToC()), C.float(speed))

	labelFin()
}

// SpinnerSpinnerSwingDotsV parameter default value hint:
// color: white
// speed: 2.8f
func SpinnerSpinnerSwingDotsV(label string, radius, thickness float32, color imgui.Color, speed float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerSwingDots(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed))

	labelFin()
}

// SpinnerSpinnerTextFadingV parameter default value hint:
// color: white
// speed: 2.8f
func SpinnerSpinnerTextFadingV(label, text string, radius, fsize float32, color imgui.Color, speed float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	textArg, textFin := internal.WrapString[C.char](text)
	C.ImSpinner_SpinnerTextFading(labelArg, textArg, C.float(radius), C.float(fsize), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed))

	labelFin()
	textFin()
}

// SpinnerSpinnerThickToSinV parameter default value hint:
// color: white
// speed: 2.8f
// lt: 8
// mode: 0
func SpinnerSpinnerThickToSinV(label string, radius, thickness float32, color imgui.Color, speed float32, lt, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerThickToSin(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.int(lt), C.int(mode))

	labelFin()
}

// SpinnerSpinnerThreeDotsV parameter default value hint:
// color: white
// speed: 2.8f
// lt: 8
func SpinnerSpinnerThreeDotsV(label string, radius, thickness float32, color imgui.Color, speed float32, lt int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerThreeDots(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.int(lt))

	labelFin()
}

// SpinnerSpinnerThreeDotsStarV parameter default value hint:
// color: white
// minfade: 0.0f
// ryk: 0.f
// speed: 1.1f
// delta: 0.f
func SpinnerSpinnerThreeDotsStarV(label string, radius, thickness float32, color imgui.Color, minfade, ryk, speed, delta float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerThreeDotsStar(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(minfade), C.float(ryk), C.float(speed), C.float(delta))

	labelFin()
}

// SpinnerSpinnerTopupV parameter default value hint:
// color: red
// fg: white
// bg: white
// speed: 2.8f
func SpinnerSpinnerTopupV(label string, radius1, radius2 float32, color, fg, bg imgui.Color, speed float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerTopup(labelArg, C.float(radius1), C.float(radius2), internal.ReinterpretCast[C.ImColor](color.ToC()), internal.ReinterpretCast[C.ImColor](fg.ToC()), internal.ReinterpretCast[C.ImColor](bg.ToC()), C.float(speed))

	labelFin()
}

// SpinnerSpinnerTrianglesSelectorV parameter default value hint:
// color: white
// bg: half_white
// speed: 2.8f
// bars: 8
func SpinnerSpinnerTrianglesSelectorV(label string, radius, thickness float32, color, bg imgui.Color, speed float32, bars uint64) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerTrianglesSelector(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), internal.ReinterpretCast[C.ImColor](bg.ToC()), C.float(speed), C.xulong(bars))

	labelFin()
}

// SpinnerSpinnerTrianglesShiftV parameter default value hint:
// color: white
// bg: half_white
// speed: 2.8f
// bars: 8
func SpinnerSpinnerTrianglesShiftV(label string, radius, thickness float32, color, bg imgui.Color, speed float32, bars uint64) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerTrianglesShift(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), internal.ReinterpretCast[C.ImColor](bg.ToC()), C.float(speed), C.xulong(bars))

	labelFin()
}

// SpinnerSpinnerTwinAngV parameter default value hint:
// color1: white
// color2: red
// speed: 2.8f
// angle: 3.14159265358979323846f
// mode: 0
func SpinnerSpinnerTwinAngV(label string, radius1, radius2, thickness float32, color1, color2 imgui.Color, speed, angle float32, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerTwinAng(labelArg, C.float(radius1), C.float(radius2), C.float(thickness), internal.ReinterpretCast[C.ImColor](color1.ToC()), internal.ReinterpretCast[C.ImColor](color2.ToC()), C.float(speed), C.float(angle), C.int(mode))

	labelFin()
}

// SpinnerSpinnerTwinAng180V parameter default value hint:
// color1: white
// color2: red
// speed: 2.8f
// angle: PI_DIV_4
// mode: 0
func SpinnerSpinnerTwinAng180V(label string, radius1, radius2, thickness float32, color1, color2 imgui.Color, speed, angle float32, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerTwinAng180(labelArg, C.float(radius1), C.float(radius2), C.float(thickness), internal.ReinterpretCast[C.ImColor](color1.ToC()), internal.ReinterpretCast[C.ImColor](color2.ToC()), C.float(speed), C.float(angle), C.int(mode))

	labelFin()
}

// SpinnerSpinnerTwinAng360V parameter default value hint:
// color1: white
// color2: red
// speed1: 2.8f
// speed2: 2.5f
// mode: 0
func SpinnerSpinnerTwinAng360V(label string, radius1, radius2, thickness float32, color1, color2 imgui.Color, speed1, speed2 float32, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerTwinAng360(labelArg, C.float(radius1), C.float(radius2), C.float(thickness), internal.ReinterpretCast[C.ImColor](color1.ToC()), internal.ReinterpretCast[C.ImColor](color2.ToC()), C.float(speed1), C.float(speed2), C.int(mode))

	labelFin()
}

// SpinnerSpinnerTwinBallV parameter default value hint:
// ball: white
// bg: half_white
// speed: 2.8f
// balls: 2
// mode: 0
func SpinnerSpinnerTwinBallV(label string, radius1, radius2, thickness, b_thickness float32, ball, bg imgui.Color, speed float32, balls uint64, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerTwinBall(labelArg, C.float(radius1), C.float(radius2), C.float(thickness), C.float(b_thickness), internal.ReinterpretCast[C.ImColor](ball.ToC()), internal.ReinterpretCast[C.ImColor](bg.ToC()), C.float(speed), C.xulong(balls), C.int(mode))

	labelFin()
}

func SpinnerSpinnerTwinBlocks(label string, radius, thickness float32, bg, color imgui.Color, speed float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerTwinBlocks(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](bg.ToC()), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed))

	labelFin()
}

// SpinnerSpinnerTwinHboDotsV parameter default value hint:
// color: white
// minfade: 0.0f
// ryk: 0.f
// speed: 1.1f
// dots: 6
// delta: 0.f
func SpinnerSpinnerTwinHboDotsV(label string, radius, thickness float32, color imgui.Color, minfade, ryk, speed float32, dots uint64, delta float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerTwinHboDots(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(minfade), C.float(ryk), C.float(speed), C.xulong(dots), C.float(delta))

	labelFin()
}

// SpinnerSpinnerTwinPulsarV parameter default value hint:
// color: white
// speed: 2.8f
// rings: 2
// mode: 0
func SpinnerSpinnerTwinPulsarV(label string, radius, thickness float32, color imgui.Color, speed float32, rings, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerTwinPulsar(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.int(rings), C.int(mode))

	labelFin()
}

// SpinnerSpinnerVDotsV parameter default value hint:
// color: white
// bgcolor: white
// speed: 2.8f
// dots: 12
// mdots: 6
// mode: 0
func SpinnerSpinnerVDotsV(label string, radius, thickness float32, color, bgcolor imgui.Color, speed float32, dots, mdots uint64, mode int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerVDots(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), internal.ReinterpretCast[C.ImColor](bgcolor.ToC()), C.float(speed), C.xulong(dots), C.xulong(mdots), C.int(mode))

	labelFin()
}

// SpinnerSpinnerWaveDotsV parameter default value hint:
// color: white
// speed: 2.8f
// lt: 8
func SpinnerSpinnerWaveDotsV(label string, radius, thickness float32, color imgui.Color, speed float32, lt int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerWaveDots(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.int(lt))

	labelFin()
}

// SpinnerSpinnerWifiIndicatorV parameter default value hint:
// color: red
// bg: half_white
// speed: 2.8f
// cangle: 0.f
// dots: 3
func SpinnerSpinnerWifiIndicatorV(label string, radius, thickness float32, color, bg imgui.Color, speed, cangle float32, dots int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerWifiIndicator(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), internal.ReinterpretCast[C.ImColor](bg.ToC()), C.float(speed), C.float(cangle), C.int(dots))

	labelFin()
}

// SpinnerSpinnerZipDotsV parameter default value hint:
// color: white
// speed: 2.8f
// dots: 5
func SpinnerSpinnerZipDotsV(label string, radius, thickness float32, color imgui.Color, speed float32, dots uint64) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImSpinner_SpinnerZipDots(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.xulong(dots))

	labelFin()
}

func Spinnercoloralpha(c imgui.Color, alpha float32) imgui.Color {
	pOut := new(imgui.Color)
	pOutArg, pOutFin := internal.Wrap(pOut)

	C.ImSpinner_color_alpha(internal.ReinterpretCast[*C.ImColor](pOutArg), internal.ReinterpretCast[C.ImColor](c.ToC()), C.float(alpha))

	pOutFin()

	return *pOut
}

func Spinnerdampedgravity(limtime float32) float32 {
	return float32(C.ImSpinner_damped_gravity(C.float(limtime)))
}

func Spinnerdampedinoutelastic(t, amplitude, period float32) float32 {
	return float32(C.ImSpinner_damped_inoutelastic(C.float(t), C.float(amplitude), C.float(period)))
}

// SpinnerdampedspringV parameter default value hint:
// a: PI_DIV_2
// b: PI_DIV_2
func SpinnerdampedspringV(mass, stiffness, damping, time, a, b float32) float32 {
	return float32(C.ImSpinner_damped_spring(C.float(mass), C.float(stiffness), C.float(damping), C.float(time), C.float(a), C.float(b)))
}

// SpinnerdampedtrifoliumV parameter default value hint:
// a: 0.f
// b: 1.f
func SpinnerdampedtrifoliumV(limtime, a, b float32) float32 {
	return float32(C.ImSpinner_damped_trifolium(C.float(limtime), C.float(a), C.float(b)))
}

func Spinnereasegravity(p *float32) float32 {
	pArg, pFin := internal.WrapNumberPtr[C.float, float32](p)

	defer func() {
		pFin()
	}()
	return float32(C.ImSpinner_ease_gravity(pArg))
}

func Spinnereaseinexpo(t float32) float32 {
	return float32(C.ImSpinner_ease_inexpo(C.float(t)))
}

func Spinnereaseinfinity(p *float32) float32 {
	pArg, pFin := internal.WrapNumberPtr[C.float, float32](p)

	defer func() {
		pFin()
	}()
	return float32(C.ImSpinner_ease_infinity(pArg))
}

func Spinnereaseinoutelastic(p *float32) float32 {
	pArg, pFin := internal.WrapNumberPtr[C.float, float32](p)

	defer func() {
		pFin()
	}()
	return float32(C.ImSpinner_ease_inoutelastic(pArg))
}

func SpinnereaseinoutexpoFloat(t float32) float32 {
	return float32(C.ImSpinner_ease_inoutexpo_Float(C.float(t)))
}

func SpinnereaseinoutexpoFloatPtr(p *float32) float32 {
	pArg, pFin := internal.WrapNumberPtr[C.float, float32](p)

	defer func() {
		pFin()
	}()
	return float32(C.ImSpinner_ease_inoutexpo_FloatPtr(pArg))
}

func SpinnereaseinoutquadFloat(t float32) float32 {
	return float32(C.ImSpinner_ease_inoutquad_Float(C.float(t)))
}

func SpinnereaseinoutquadFloatPtr(p *float32) float32 {
	pArg, pFin := internal.WrapNumberPtr[C.float, float32](p)

	defer func() {
		pFin()
	}()
	return float32(C.ImSpinner_ease_inoutquad_FloatPtr(pArg))
}

func Spinnereaseinquad(time float32) float32 {
	return float32(C.ImSpinner_ease_inquad(C.float(time)))
}

func Spinnereaseoutcubic(t float32) float32 {
	return float32(C.ImSpinner_ease_outcubic(C.float(t)))
}

func Spinnereaseoutquad(time float32) float32 {
	return float32(C.ImSpinner_ease_outquad(C.float(time)))
}

func Spinnereasesine(p *float32) float32 {
	pArg, pFin := internal.WrapNumberPtr[C.float, float32](p)

	defer func() {
		pFin()
	}()
	return float32(C.ImSpinner_ease_sine(pArg))
}

func Spinnereasespring(p *float32) float32 {
	pArg, pFin := internal.WrapNumberPtr[C.float, float32](p)

	defer func() {
		pFin()
	}()
	return float32(C.ImSpinner_ease_spring(pArg))
}

func NewMiddleDots(v int32) *MiddleDots {
	return NewMiddleDotsFromC(C.MiddleDots_MiddleDots(C.int(v)))
}

func (self *MiddleDots) Destroy() {
	selfArg, selfFin := self.Handle()
	C.MiddleDots_destroy(internal.ReinterpretCast[*C.MiddleDots](selfArg))

	selfFin()
}

func NewMinThickness(v float32) *MinThickness {
	return NewMinThicknessFromC(C.MinThickness_MinThickness(C.float(v)))
}

func (self *MinThickness) Destroy() {
	selfArg, selfFin := self.Handle()
	C.MinThickness_destroy(internal.ReinterpretCast[*C.MinThickness](selfArg))

	selfFin()
}

func NewMode(v int32) *Mode {
	return NewModeFromC(C.Mode_Mode(C.int(v)))
}

func (self *Mode) Destroy() {
	selfArg, selfFin := self.Handle()
	C.Mode_destroy(internal.ReinterpretCast[*C.Mode](selfArg))

	selfFin()
}

func NewRadius(v float32) *Radius {
	return NewRadiusFromC(C.Radius_Radius(C.float(v)))
}

func (self *Radius) Destroy() {
	selfArg, selfFin := self.Handle()
	C.Radius_destroy(internal.ReinterpretCast[*C.Radius](selfArg))

	selfFin()
}

func NewReverse(v bool) *Reverse {
	return NewReverseFromC(C.Reverse_Reverse(C.bool(v)))
}

func (self *Reverse) Destroy() {
	selfArg, selfFin := self.Handle()
	C.Reverse_destroy(internal.ReinterpretCast[*C.Reverse](selfArg))

	selfFin()
}

func NewSpeed(v float32) *Speed {
	return NewSpeedFromC(C.Speed_Speed(C.float(v)))
}

func (self *Speed) Destroy() {
	selfArg, selfFin := self.Handle()
	C.Speed_destroy(internal.ReinterpretCast[*C.Speed](selfArg))

	selfFin()
}

func NewSpinnerConfig() *SpinnerConfig {
	return NewSpinnerConfigFromC(C.SpinnerConfig_SpinnerConfig())
}

func (self *SpinnerConfig) Destroy() {
	selfArg, selfFin := self.Handle()
	C.SpinnerConfig_destroy(internal.ReinterpretCast[*C.SpinnerConfig](selfArg))

	selfFin()
}

func (self *SpinnerConfig) SetAltColor(v imgui.Color) {
	selfArg, selfFin := self.Handle()
	C.SpinnerConfig_setAltColor(internal.ReinterpretCast[*C.SpinnerConfig](selfArg), internal.ReinterpretCast[C.ImColor](v.ToC()))

	selfFin()
}

func (self *SpinnerConfig) SetAngle(v float32) {
	selfArg, selfFin := self.Handle()
	C.SpinnerConfig_setAngle(internal.ReinterpretCast[*C.SpinnerConfig](selfArg), C.float(v))

	selfFin()
}

func (self *SpinnerConfig) SetAngleMax(v float32) {
	selfArg, selfFin := self.Handle()
	C.SpinnerConfig_setAngleMax(internal.ReinterpretCast[*C.SpinnerConfig](selfArg), C.float(v))

	selfFin()
}

func (self *SpinnerConfig) SetAngleMin(v float32) {
	selfArg, selfFin := self.Handle()
	C.SpinnerConfig_setAngleMin(internal.ReinterpretCast[*C.SpinnerConfig](selfArg), C.float(v))

	selfFin()
}

func (self *SpinnerConfig) SetBgColor(v imgui.Color) {
	selfArg, selfFin := self.Handle()
	C.SpinnerConfig_setBgColor(internal.ReinterpretCast[*C.SpinnerConfig](selfArg), internal.ReinterpretCast[C.ImColor](v.ToC()))

	selfFin()
}

func (self *SpinnerConfig) SetColor(v imgui.Color) {
	selfArg, selfFin := self.Handle()
	C.SpinnerConfig_setColor(internal.ReinterpretCast[*C.SpinnerConfig](selfArg), internal.ReinterpretCast[C.ImColor](v.ToC()))

	selfFin()
}

func (self *SpinnerConfig) SetDelta(v float32) {
	selfArg, selfFin := self.Handle()
	C.SpinnerConfig_setDelta(internal.ReinterpretCast[*C.SpinnerConfig](selfArg), C.float(v))

	selfFin()
}

func (self *SpinnerConfig) SetDots(v int32) {
	selfArg, selfFin := self.Handle()
	C.SpinnerConfig_setDots(internal.ReinterpretCast[*C.SpinnerConfig](selfArg), C.int(v))

	selfFin()
}

func (self *SpinnerConfig) SetMiddleDots(v int32) {
	selfArg, selfFin := self.Handle()
	C.SpinnerConfig_setMiddleDots(internal.ReinterpretCast[*C.SpinnerConfig](selfArg), C.int(v))

	selfFin()
}

func (self *SpinnerConfig) SetMinThickness(v float32) {
	selfArg, selfFin := self.Handle()
	C.SpinnerConfig_setMinThickness(internal.ReinterpretCast[*C.SpinnerConfig](selfArg), C.float(v))

	selfFin()
}

func (self *SpinnerConfig) SetMode(v int32) {
	selfArg, selfFin := self.Handle()
	C.SpinnerConfig_setMode(internal.ReinterpretCast[*C.SpinnerConfig](selfArg), C.int(v))

	selfFin()
}

func (self *SpinnerConfig) SetRadius(v float32) {
	selfArg, selfFin := self.Handle()
	C.SpinnerConfig_setRadius(internal.ReinterpretCast[*C.SpinnerConfig](selfArg), C.float(v))

	selfFin()
}

func (self *SpinnerConfig) SetReverse(v bool) {
	selfArg, selfFin := self.Handle()
	C.SpinnerConfig_setReverse(internal.ReinterpretCast[*C.SpinnerConfig](selfArg), C.bool(v))

	selfFin()
}

func (self *SpinnerConfig) SetSpeed(v float32) {
	selfArg, selfFin := self.Handle()
	C.SpinnerConfig_setSpeed(internal.ReinterpretCast[*C.SpinnerConfig](selfArg), C.float(v))

	selfFin()
}

func (self *SpinnerConfig) SetSpinnerType(v SpinnerTypeT) {
	selfArg, selfFin := self.Handle()
	C.SpinnerConfig_setSpinnerType(internal.ReinterpretCast[*C.SpinnerConfig](selfArg), C.SpinnerTypeT(v))

	selfFin()
}

func (self *SpinnerConfig) SetThickness(v float32) {
	selfArg, selfFin := self.Handle()
	C.SpinnerConfig_setThickness(internal.ReinterpretCast[*C.SpinnerConfig](selfArg), C.float(v))

	selfFin()
}

func (self *SpinnerConfig) SetAltColor(h AltColor) {
	selfArg, selfFin := self.Handle()
	hArg, hFin := h.C()
	C.SpinnerConfig_set_AltColor(internal.ReinterpretCast[*C.SpinnerConfig](selfArg), internal.ReinterpretCast[C.AltColor](hArg))

	selfFin()
	hFin()
}

func (self *SpinnerConfig) SetAngle(h Angle) {
	selfArg, selfFin := self.Handle()
	hArg, hFin := h.C()
	C.SpinnerConfig_set_Angle(internal.ReinterpretCast[*C.SpinnerConfig](selfArg), internal.ReinterpretCast[C.Angle](hArg))

	selfFin()
	hFin()
}

func (self *SpinnerConfig) SetAngleMax(h AngleMax) {
	selfArg, selfFin := self.Handle()
	hArg, hFin := h.C()
	C.SpinnerConfig_set_AngleMax(internal.ReinterpretCast[*C.SpinnerConfig](selfArg), internal.ReinterpretCast[C.AngleMax](hArg))

	selfFin()
	hFin()
}

func (self *SpinnerConfig) SetAngleMin(h AngleMin) {
	selfArg, selfFin := self.Handle()
	hArg, hFin := h.C()
	C.SpinnerConfig_set_AngleMin(internal.ReinterpretCast[*C.SpinnerConfig](selfArg), internal.ReinterpretCast[C.AngleMin](hArg))

	selfFin()
	hFin()
}

func (self *SpinnerConfig) SetBgColor(h BgColor) {
	selfArg, selfFin := self.Handle()
	hArg, hFin := h.C()
	C.SpinnerConfig_set_BgColor(internal.ReinterpretCast[*C.SpinnerConfig](selfArg), internal.ReinterpretCast[C.BgColor](hArg))

	selfFin()
	hFin()
}

func (self *SpinnerConfig) SetColor(h Color) {
	selfArg, selfFin := self.Handle()
	hArg, hFin := h.C()
	C.SpinnerConfig_set_Color(internal.ReinterpretCast[*C.SpinnerConfig](selfArg), internal.ReinterpretCast[C.Color](hArg))

	selfFin()
	hFin()
}

func (self *SpinnerConfig) SetDelta(h Delta) {
	selfArg, selfFin := self.Handle()
	hArg, hFin := h.C()
	C.SpinnerConfig_set_Delta(internal.ReinterpretCast[*C.SpinnerConfig](selfArg), internal.ReinterpretCast[C.Delta](hArg))

	selfFin()
	hFin()
}

func (self *SpinnerConfig) SetDots(h Dots) {
	selfArg, selfFin := self.Handle()
	hArg, hFin := h.C()
	C.SpinnerConfig_set_Dots(internal.ReinterpretCast[*C.SpinnerConfig](selfArg), internal.ReinterpretCast[C.Dots](hArg))

	selfFin()
	hFin()
}

func (self *SpinnerConfig) SetFloatPtr(h FloatPtr) {
	selfArg, selfFin := self.Handle()
	hArg, hFin := h.C()
	C.SpinnerConfig_set_FloatPtr(internal.ReinterpretCast[*C.SpinnerConfig](selfArg), internal.ReinterpretCast[C.FloatPtr](hArg))

	selfFin()
	hFin()
}

func (self *SpinnerConfig) SetMiddleDots(h MiddleDots) {
	selfArg, selfFin := self.Handle()
	hArg, hFin := h.C()
	C.SpinnerConfig_set_MiddleDots(internal.ReinterpretCast[*C.SpinnerConfig](selfArg), internal.ReinterpretCast[C.MiddleDots](hArg))

	selfFin()
	hFin()
}

func (self *SpinnerConfig) SetMinThickness(h MinThickness) {
	selfArg, selfFin := self.Handle()
	hArg, hFin := h.C()
	C.SpinnerConfig_set_MinThickness(internal.ReinterpretCast[*C.SpinnerConfig](selfArg), internal.ReinterpretCast[C.MinThickness](hArg))

	selfFin()
	hFin()
}

func (self *SpinnerConfig) SetMode(h Mode) {
	selfArg, selfFin := self.Handle()
	hArg, hFin := h.C()
	C.SpinnerConfig_set_Mode(internal.ReinterpretCast[*C.SpinnerConfig](selfArg), internal.ReinterpretCast[C.Mode](hArg))

	selfFin()
	hFin()
}

func (self *SpinnerConfig) SetRadius(h Radius) {
	selfArg, selfFin := self.Handle()
	hArg, hFin := h.C()
	C.SpinnerConfig_set_Radius(internal.ReinterpretCast[*C.SpinnerConfig](selfArg), internal.ReinterpretCast[C.Radius](hArg))

	selfFin()
	hFin()
}

func (self *SpinnerConfig) SetReverse(h Reverse) {
	selfArg, selfFin := self.Handle()
	hArg, hFin := h.C()
	C.SpinnerConfig_set_Reverse(internal.ReinterpretCast[*C.SpinnerConfig](selfArg), internal.ReinterpretCast[C.Reverse](hArg))

	selfFin()
	hFin()
}

func (self *SpinnerConfig) SetSpeed(h Speed) {
	selfArg, selfFin := self.Handle()
	hArg, hFin := h.C()
	C.SpinnerConfig_set_Speed(internal.ReinterpretCast[*C.SpinnerConfig](selfArg), internal.ReinterpretCast[C.Speed](hArg))

	selfFin()
	hFin()
}

func (self *SpinnerConfig) SetSpinnerType(h SpinnerType) {
	selfArg, selfFin := self.Handle()
	hArg, hFin := h.C()
	C.SpinnerConfig_set_SpinnerType(internal.ReinterpretCast[*C.SpinnerConfig](selfArg), internal.ReinterpretCast[C.SpinnerType](hArg))

	selfFin()
	hFin()
}

func (self *SpinnerConfig) SetThickness(h Thickness) {
	selfArg, selfFin := self.Handle()
	hArg, hFin := h.C()
	C.SpinnerConfig_set_Thickness(internal.ReinterpretCast[*C.SpinnerConfig](selfArg), internal.ReinterpretCast[C.Thickness](hArg))

	selfFin()
	hFin()
}

func NewSpinnerType(v SpinnerTypeT) *SpinnerType {
	return NewSpinnerTypeFromC(C.SpinnerType_SpinnerType(C.SpinnerTypeT(v)))
}

func (self *SpinnerType) Destroy() {
	selfArg, selfFin := self.Handle()
	C.SpinnerType_destroy(internal.ReinterpretCast[*C.SpinnerType](selfArg))

	selfFin()
}

func NewThickness(v float32) *Thickness {
	return NewThicknessFromC(C.Thickness_Thickness(C.float(v)))
}

func (self *Thickness) Destroy() {
	selfArg, selfFin := self.Handle()
	C.Thickness_destroy(internal.ReinterpretCast[*C.Thickness](selfArg))

	selfFin()
}

func SpinnerSpinner3SmuggleDots(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_Spinner3SmuggleDots(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinner4Caleidospcope(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_Spinner4Caleidospcope(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerAng(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerAng(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerAng8(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerAng8(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerAngEclipse(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerAngEclipse(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerAngMix(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerAngMix(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerAngTriple(label string, radius1, radius2, radius3, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerAngTriple(labelArg, C.float(radius1), C.float(radius2), C.float(radius3), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerAngTwin(label string, radius1, radius2, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerAngTwin(labelArg, C.float(radius1), C.float(radius2), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerArcFade(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerArcFade(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerArcPolarFade(label string, radius float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerArcPolarFade(labelArg, C.float(radius))

	labelFin()
}

func SpinnerSpinnerArcPolarRadius(label string, radius float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerArcPolarRadius(labelArg, C.float(radius))

	labelFin()
}

func SpinnerSpinnerArcRotation(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerArcRotation(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerArcWedges(label string, radius float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerArcWedges(labelArg, C.float(radius))

	labelFin()
}

func SpinnerSpinnerAsciiSymbolPoints(label, text string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	textArg, textFin := internal.WrapString[C.char](text)
	C.wrap_ImSpinner_SpinnerAsciiSymbolPoints(labelArg, textArg, C.float(radius), C.float(thickness))

	labelFin()
	textFin()
}

func SpinnerSpinnerAtom(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerAtom(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerBarChartAdvSine(label string, radius, thickness float32, color imgui.Color, speed float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerBarChartAdvSine(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed))

	labelFin()
}

func SpinnerSpinnerBarChartAdvSineFade(label string, radius, thickness float32, color imgui.Color, speed float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerBarChartAdvSineFade(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed))

	labelFin()
}

func SpinnerSpinnerBarChartRainbow(label string, radius, thickness float32, color imgui.Color, speed float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerBarChartRainbow(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed))

	labelFin()
}

func SpinnerSpinnerBarChartSine(label string, radius, thickness float32, color imgui.Color, speed float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerBarChartSine(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed))

	labelFin()
}

func SpinnerSpinnerBarsRotateFade(label string, rmin, rmax, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerBarsRotateFade(labelArg, C.float(rmin), C.float(rmax), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerBarsScaleMiddle(label string, w float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerBarsScaleMiddle(labelArg, C.float(w))

	labelFin()
}

func SpinnerSpinnerBounceBall(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerBounceBall(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerBounceDots(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerBounceDots(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerCaleidoscope(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerCaleidoscope(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerCircleDrop(label string, radius, thickness, thickness_drop float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerCircleDrop(labelArg, C.float(radius), C.float(thickness), C.float(thickness_drop))

	labelFin()
}

func SpinnerSpinnerCircularLines(label string, radius float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerCircularLines(labelArg, C.float(radius))

	labelFin()
}

func SpinnerSpinnerCircularPoints(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerCircularPoints(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerClock(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerClock(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerCurvedCircle(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerCurvedCircle(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerDnaDots(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerDnaDots(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerDots(label string, nextdot *float32, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	nextdotArg, nextdotFin := internal.WrapNumberPtr[C.float, float32](nextdot)
	C.wrap_ImSpinner_SpinnerDots(labelArg, nextdotArg, C.float(radius), C.float(thickness))

	labelFin()
	nextdotFin()
}

func SpinnerSpinnerDotsToBar(label string, radius, thickness, offset_k float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerDotsToBar(labelArg, C.float(radius), C.float(thickness), C.float(offset_k))

	labelFin()
}

func SpinnerSpinnerDotsToPoints(label string, radius, thickness, offset_k float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerDotsToPoints(labelArg, C.float(radius), C.float(thickness), C.float(offset_k))

	labelFin()
}

func SpinnerSpinnerDoubleFadePulsar(label string, radius, noname1 float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerDoubleFadePulsar(labelArg, C.float(radius), C.float(noname1))

	labelFin()
}

func SpinnerSpinnerFadeBars(label string, w float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerFadeBars(labelArg, C.float(w))

	labelFin()
}

func SpinnerSpinnerFadeDots(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerFadeDots(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerFadePulsar(label string, radius float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerFadePulsar(labelArg, C.float(radius))

	labelFin()
}

func SpinnerSpinnerFadePulsarSquare(label string, radius float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerFadePulsarSquare(labelArg, C.float(radius))

	labelFin()
}

func SpinnerSpinnerFadeTris(label string, radius float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerFadeTris(labelArg, C.float(radius))

	labelFin()
}

func SpinnerSpinnerFilledArcColor(label string, radius float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerFilledArcColor(labelArg, C.float(radius))

	labelFin()
}

func SpinnerSpinnerFilledArcFade(label string, radius float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerFilledArcFade(labelArg, C.float(radius))

	labelFin()
}

func SpinnerSpinnerFilledArcRing(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerFilledArcRing(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerFilling(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerFilling(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerFiveDots(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerFiveDots(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerFlowingGradient(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerFlowingGradient(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerFluid(label string, radius float32, color imgui.Color, speed float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerFluid(labelArg, C.float(radius), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed))

	labelFin()
}

func SpinnerSpinnerFluidPoints(label string, radius, thickness float32, color imgui.Color, speed float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerFluidPoints(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed))

	labelFin()
}

func SpinnerSpinnerGalaxyDots(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerGalaxyDots(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerGooeyBalls(label string, radius float32, color imgui.Color, speed float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerGooeyBalls(labelArg, C.float(radius), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed))

	labelFin()
}

func SpinnerSpinnerHboDots(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerHboDots(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerIncDots(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerIncDots(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerIncFullDots(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerIncFullDots(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerIncScaleDots(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerIncScaleDots(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerIngYang(label string, radius, thickness float32, reverse bool, yang_detlta_r float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerIngYang(labelArg, C.float(radius), C.float(thickness), C.bool(reverse), C.float(yang_detlta_r))

	labelFin()
}

func SpinnerSpinnerLemniscate(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerLemniscate(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerLoadingRing(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerLoadingRing(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerModCircle(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerModCircle(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerMoonDots(label string, radius, thickness float32, first, second imgui.Color) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerMoonDots(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](first.ToC()), internal.ReinterpretCast[C.ImColor](second.ToC()))

	labelFin()
}

func SpinnerSpinnerMoonLine(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerMoonLine(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerMovingArcs(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerMovingArcs(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerMovingDots(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerMovingDots(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerMultiFadeDots(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerMultiFadeDots(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerOrionDots(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerOrionDots(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerPatternEclipse(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerPatternEclipse(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerPatternRings(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerPatternRings(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerPatternSphere(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerPatternSphere(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerPointsArcBounce(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerPointsArcBounce(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerPointsRoller(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerPointsRoller(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerPointsShift(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerPointsShift(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerPulsar(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerPulsar(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerPulsarBall(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerPulsarBall(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerRainbow(label string, radius, thickness float32, color imgui.Color, speed float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerRainbow(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed))

	labelFin()
}

func SpinnerSpinnerRainbowBalls(label string, radius, thickness float32, color imgui.Color, speed float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerRainbowBalls(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed))

	labelFin()
}

func SpinnerSpinnerRainbowCircle(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerRainbowCircle(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerRainbowMix(label string, radius, thickness float32, color imgui.Color, speed float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerRainbowMix(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed))

	labelFin()
}

func SpinnerSpinnerRainbowShot(label string, radius, thickness float32, color imgui.Color, speed float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerRainbowShot(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed))

	labelFin()
}

func SpinnerSpinnerRingSynchronous(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerRingSynchronous(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerRingWatermarks(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerRingWatermarks(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerRotateDots(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerRotateDots(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerRotateGear(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerRotateGear(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerRotateGooeyBalls(label string, radius, thickness float32, color imgui.Color, speed float32, balls int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerRotateGooeyBalls(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.int(balls))

	labelFin()
}

func SpinnerSpinnerRotateSegments(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerRotateSegments(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerRotateSegmentsPulsar(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerRotateSegmentsPulsar(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerRotateTriangles(label string, radius, thickness float32, color imgui.Color, speed float32, tris int32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerRotateTriangles(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed), C.int(tris))

	labelFin()
}

func SpinnerSpinnerRotateWheel(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerRotateWheel(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerRotatedAtom(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerRotatedAtom(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerRotatingHeart(label string, radius, thickness float32, color imgui.Color, speed float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerRotatingHeart(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed))

	labelFin()
}

func SpinnerSpinnerScaleBlocks(label string, radius, thickness float32, color imgui.Color, speed float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerScaleBlocks(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed))

	labelFin()
}

func SpinnerSpinnerScaleDots(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerScaleDots(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerSevenSegments(label, text string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	textArg, textFin := internal.WrapString[C.char](text)
	C.wrap_ImSpinner_SpinnerSevenSegments(labelArg, textArg, C.float(radius), C.float(thickness))

	labelFin()
	textFin()
}

func SpinnerSpinnerSimpleArcFade(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerSimpleArcFade(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerSinSquares(label string, radius, thickness float32, color imgui.Color, speed float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerSinSquares(labelArg, C.float(radius), C.float(thickness), internal.ReinterpretCast[C.ImColor](color.ToC()), C.float(speed))

	labelFin()
}

func SpinnerSpinnerSineArcs(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerSineArcs(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerSolarArcs(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerSolarArcs(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerSolarBalls(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerSolarBalls(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerSolarScaleBalls(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerSolarScaleBalls(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerSomeScaleDots(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerSomeScaleDots(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerSpiral(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerSpiral(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerSpiralEye(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerSpiralEye(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerSplineAng(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerSplineAng(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerSquareLoading(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerSquareLoading(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerSquareSpins(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerSquareSpins(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerSquareStrokeFade(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerSquareStrokeFade(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerSquareStrokeFill(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerSquareStrokeFill(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerSquareStrokeLoading(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerSquareStrokeLoading(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerSurroundedIndicator(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerSurroundedIndicator(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerSwingDots(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerSwingDots(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerTextFading(label, text string, radius, fsize float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	textArg, textFin := internal.WrapString[C.char](text)
	C.wrap_ImSpinner_SpinnerTextFading(labelArg, textArg, C.float(radius), C.float(fsize))

	labelFin()
	textFin()
}

func SpinnerSpinnerThickToSin(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerThickToSin(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerThreeDots(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerThreeDots(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerThreeDotsStar(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerThreeDotsStar(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerTopup(label string, radius1, radius2 float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerTopup(labelArg, C.float(radius1), C.float(radius2))

	labelFin()
}

func SpinnerSpinnerTrianglesSelector(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerTrianglesSelector(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerTrianglesShift(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerTrianglesShift(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerTwinAng(label string, radius1, radius2, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerTwinAng(labelArg, C.float(radius1), C.float(radius2), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerTwinAng180(label string, radius1, radius2, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerTwinAng180(labelArg, C.float(radius1), C.float(radius2), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerTwinAng360(label string, radius1, radius2, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerTwinAng360(labelArg, C.float(radius1), C.float(radius2), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerTwinBall(label string, radius1, radius2, thickness, b_thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerTwinBall(labelArg, C.float(radius1), C.float(radius2), C.float(thickness), C.float(b_thickness))

	labelFin()
}

func SpinnerSpinnerTwinHboDots(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerTwinHboDots(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerTwinPulsar(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerTwinPulsar(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerVDots(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerVDots(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerWaveDots(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerWaveDots(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerWifiIndicator(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerWifiIndicator(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func SpinnerSpinnerZipDots(label string, radius, thickness float32) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImSpinner_SpinnerZipDots(labelArg, C.float(radius), C.float(thickness))

	labelFin()
}

func Spinnerdampedspring(mass, stiffness, damping, time float32) float32 {
	return float32(C.wrap_ImSpinner_damped_spring(C.float(mass), C.float(stiffness), C.float(damping), C.float(time)))
}

func Spinnerdampedtrifolium(limtime float32) float32 {
	return float32(C.wrap_ImSpinner_damped_trifolium(C.float(limtime)))
}

func (self AltColor) SetValue(v imgui.Color) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_AltColor_SetValue(selfArg, internal.ReinterpretCast[C.ImColor](v.ToC()))
}

func (self *AltColor) Value() imgui.Color {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() imgui.Color {
		out := C.wrap_AltColor_GetValue(internal.ReinterpretCast[*C.AltColor](selfArg))
		return *(&imgui.Color{}).FromC(unsafe.Pointer(&out))
	}()
}

func (self Angle) SetValue(v float32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_Angle_SetValue(selfArg, C.float(v))
}

func (self *Angle) Value() float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_Angle_GetValue(internal.ReinterpretCast[*C.Angle](selfArg)))
}

func (self AngleMax) SetValue(v float32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_AngleMax_SetValue(selfArg, C.float(v))
}

func (self *AngleMax) Value() float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_AngleMax_GetValue(internal.ReinterpretCast[*C.AngleMax](selfArg)))
}

func (self AngleMin) SetValue(v float32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_AngleMin_SetValue(selfArg, C.float(v))
}

func (self *AngleMin) Value() float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_AngleMin_GetValue(internal.ReinterpretCast[*C.AngleMin](selfArg)))
}

func (self BgColor) SetValue(v imgui.Color) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_BgColor_SetValue(selfArg, internal.ReinterpretCast[C.ImColor](v.ToC()))
}

func (self *BgColor) Value() imgui.Color {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() imgui.Color {
		out := C.wrap_BgColor_GetValue(internal.ReinterpretCast[*C.BgColor](selfArg))
		return *(&imgui.Color{}).FromC(unsafe.Pointer(&out))
	}()
}

func (self Color) SetValue(v imgui.Color) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_Color_SetValue(selfArg, internal.ReinterpretCast[C.ImColor](v.ToC()))
}

func (self *Color) Value() imgui.Color {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() imgui.Color {
		out := C.wrap_Color_GetValue(internal.ReinterpretCast[*C.Color](selfArg))
		return *(&imgui.Color{}).FromC(unsafe.Pointer(&out))
	}()
}

func (self Delta) SetValue(v float32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_Delta_SetValue(selfArg, C.float(v))
}

func (self *Delta) Value() float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_Delta_GetValue(internal.ReinterpretCast[*C.Delta](selfArg)))
}

func (self Dots) SetValue(v int32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_Dots_SetValue(selfArg, C.int(v))
}

func (self *Dots) Value() int32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return int32(C.wrap_Dots_GetValue(internal.ReinterpretCast[*C.Dots](selfArg)))
}

func (self MiddleDots) SetValue(v int32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_MiddleDots_SetValue(selfArg, C.int(v))
}

func (self *MiddleDots) Value() int32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return int32(C.wrap_MiddleDots_GetValue(internal.ReinterpretCast[*C.MiddleDots](selfArg)))
}

func (self MinThickness) SetValue(v float32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_MinThickness_SetValue(selfArg, C.float(v))
}

func (self *MinThickness) Value() float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_MinThickness_GetValue(internal.ReinterpretCast[*C.MinThickness](selfArg)))
}

func (self Mode) SetValue(v int32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_Mode_SetValue(selfArg, C.int(v))
}

func (self *Mode) Value() int32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return int32(C.wrap_Mode_GetValue(internal.ReinterpretCast[*C.Mode](selfArg)))
}

func (self Radius) SetValue(v float32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_Radius_SetValue(selfArg, C.float(v))
}

func (self *Radius) Value() float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_Radius_GetValue(internal.ReinterpretCast[*C.Radius](selfArg)))
}

func (self Reverse) SetValue(v bool) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_Reverse_SetValue(selfArg, C.bool(v))
}

func (self *Reverse) Value() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.wrap_Reverse_GetValue(internal.ReinterpretCast[*C.Reverse](selfArg)) == C.bool(true)
}

func (self Speed) SetValue(v float32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_Speed_SetValue(selfArg, C.float(v))
}

func (self *Speed) Value() float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_Speed_GetValue(internal.ReinterpretCast[*C.Speed](selfArg)))
}

func (self SpinnerConfig) SetMSpinnerType(v SpinnerTypeT) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_SpinnerConfig_SetM_SpinnerType(selfArg, C.SpinnerTypeT(v))
}

func (self *SpinnerConfig) MSpinnerType() SpinnerTypeT {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return SpinnerTypeT(C.wrap_SpinnerConfig_GetM_SpinnerType(internal.ReinterpretCast[*C.SpinnerConfig](selfArg)))
}

func (self SpinnerConfig) SetMRadius(v float32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_SpinnerConfig_SetM_Radius(selfArg, C.float(v))
}

func (self *SpinnerConfig) MRadius() float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_SpinnerConfig_GetM_Radius(internal.ReinterpretCast[*C.SpinnerConfig](selfArg)))
}

func (self SpinnerConfig) SetMSpeed(v float32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_SpinnerConfig_SetM_Speed(selfArg, C.float(v))
}

func (self *SpinnerConfig) MSpeed() float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_SpinnerConfig_GetM_Speed(internal.ReinterpretCast[*C.SpinnerConfig](selfArg)))
}

func (self SpinnerConfig) SetMThickness(v float32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_SpinnerConfig_SetM_Thickness(selfArg, C.float(v))
}

func (self *SpinnerConfig) MThickness() float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_SpinnerConfig_GetM_Thickness(internal.ReinterpretCast[*C.SpinnerConfig](selfArg)))
}

func (self SpinnerConfig) SetMColor(v imgui.Color) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_SpinnerConfig_SetM_Color(selfArg, internal.ReinterpretCast[C.ImColor](v.ToC()))
}

func (self *SpinnerConfig) MColor() imgui.Color {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() imgui.Color {
		out := C.wrap_SpinnerConfig_GetM_Color(internal.ReinterpretCast[*C.SpinnerConfig](selfArg))
		return *(&imgui.Color{}).FromC(unsafe.Pointer(&out))
	}()
}

func (self SpinnerConfig) SetMBgColor(v imgui.Color) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_SpinnerConfig_SetM_BgColor(selfArg, internal.ReinterpretCast[C.ImColor](v.ToC()))
}

func (self *SpinnerConfig) MBgColor() imgui.Color {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() imgui.Color {
		out := C.wrap_SpinnerConfig_GetM_BgColor(internal.ReinterpretCast[*C.SpinnerConfig](selfArg))
		return *(&imgui.Color{}).FromC(unsafe.Pointer(&out))
	}()
}

func (self SpinnerConfig) SetMAltColor(v imgui.Color) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_SpinnerConfig_SetM_AltColor(selfArg, internal.ReinterpretCast[C.ImColor](v.ToC()))
}

func (self *SpinnerConfig) MAltColor() imgui.Color {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() imgui.Color {
		out := C.wrap_SpinnerConfig_GetM_AltColor(internal.ReinterpretCast[*C.SpinnerConfig](selfArg))
		return *(&imgui.Color{}).FromC(unsafe.Pointer(&out))
	}()
}

func (self SpinnerConfig) SetMAngle(v float32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_SpinnerConfig_SetM_Angle(selfArg, C.float(v))
}

func (self *SpinnerConfig) MAngle() float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_SpinnerConfig_GetM_Angle(internal.ReinterpretCast[*C.SpinnerConfig](selfArg)))
}

func (self SpinnerConfig) SetMAngleMin(v float32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_SpinnerConfig_SetM_AngleMin(selfArg, C.float(v))
}

func (self *SpinnerConfig) MAngleMin() float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_SpinnerConfig_GetM_AngleMin(internal.ReinterpretCast[*C.SpinnerConfig](selfArg)))
}

func (self SpinnerConfig) SetMAngleMax(v float32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_SpinnerConfig_SetM_AngleMax(selfArg, C.float(v))
}

func (self *SpinnerConfig) MAngleMax() float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_SpinnerConfig_GetM_AngleMax(internal.ReinterpretCast[*C.SpinnerConfig](selfArg)))
}

func (self SpinnerConfig) SetMDots(v int32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_SpinnerConfig_SetM_Dots(selfArg, C.int(v))
}

func (self *SpinnerConfig) MDots() int32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return int32(C.wrap_SpinnerConfig_GetM_Dots(internal.ReinterpretCast[*C.SpinnerConfig](selfArg)))
}

func (self SpinnerConfig) SetMMiddleDots(v int32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_SpinnerConfig_SetM_MiddleDots(selfArg, C.int(v))
}

func (self *SpinnerConfig) MMiddleDots() int32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return int32(C.wrap_SpinnerConfig_GetM_MiddleDots(internal.ReinterpretCast[*C.SpinnerConfig](selfArg)))
}

func (self SpinnerConfig) SetMMinThickness(v float32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_SpinnerConfig_SetM_MinThickness(selfArg, C.float(v))
}

func (self *SpinnerConfig) MMinThickness() float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_SpinnerConfig_GetM_MinThickness(internal.ReinterpretCast[*C.SpinnerConfig](selfArg)))
}

func (self SpinnerConfig) SetMReverse(v bool) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_SpinnerConfig_SetM_Reverse(selfArg, C.bool(v))
}

func (self *SpinnerConfig) MReverse() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.wrap_SpinnerConfig_GetM_Reverse(internal.ReinterpretCast[*C.SpinnerConfig](selfArg)) == C.bool(true)
}

func (self SpinnerConfig) SetMDelta(v float32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_SpinnerConfig_SetM_Delta(selfArg, C.float(v))
}

func (self *SpinnerConfig) MDelta() float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_SpinnerConfig_GetM_Delta(internal.ReinterpretCast[*C.SpinnerConfig](selfArg)))
}

func (self SpinnerConfig) SetMMode(v int32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_SpinnerConfig_SetM_Mode(selfArg, C.int(v))
}

func (self *SpinnerConfig) MMode() int32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return int32(C.wrap_SpinnerConfig_GetM_Mode(internal.ReinterpretCast[*C.SpinnerConfig](selfArg)))
}

func (self SpinnerType) SetValue(v SpinnerTypeT) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_SpinnerType_SetValue(selfArg, C.SpinnerTypeT(v))
}

func (self *SpinnerType) Value() SpinnerTypeT {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return SpinnerTypeT(C.wrap_SpinnerType_GetValue(internal.ReinterpretCast[*C.SpinnerType](selfArg)))
}

func (self Thickness) SetValue(v float32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_Thickness_SetValue(selfArg, C.float(v))
}

func (self *Thickness) Value() float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_Thickness_GetValue(internal.ReinterpretCast[*C.Thickness](selfArg)))
}
