// Code generated by cmd/codegen from https://github.com/AllenDang/cimgui-go.
// DO NOT EDIT.


#include <string.h>
#include "wrapper.h"
#include "structs_accessor.h"

void wrap_AltColor_SetValue(AltColor *AltColorPtr, ImColor v) { AltColorPtr->value = v; }
ImColor wrap_AltColor_GetValue(AltColor *self) { return self->value; }
void wrap_Angle_SetValue(Angle *AnglePtr, float v) { AnglePtr->value = v; }
float wrap_Angle_GetValue(Angle *self) { return self->value; }
void wrap_AngleMax_SetValue(AngleMax *AngleMaxPtr, float v) { AngleMaxPtr->value = v; }
float wrap_AngleMax_GetValue(AngleMax *self) { return self->value; }
void wrap_AngleMin_SetValue(AngleMin *AngleMinPtr, float v) { AngleMinPtr->value = v; }
float wrap_AngleMin_GetValue(AngleMin *self) { return self->value; }
void wrap_BgColor_SetValue(BgColor *BgColorPtr, ImColor v) { BgColorPtr->value = v; }
ImColor wrap_BgColor_GetValue(BgColor *self) { return self->value; }
void wrap_Color_SetValue(Color *ColorPtr, ImColor v) { ColorPtr->value = v; }
ImColor wrap_Color_GetValue(Color *self) { return self->value; }
void wrap_Delta_SetValue(Delta *DeltaPtr, float v) { DeltaPtr->value = v; }
float wrap_Delta_GetValue(Delta *self) { return self->value; }
void wrap_Dots_SetValue(Dots *DotsPtr, int v) { DotsPtr->value = v; }
int wrap_Dots_GetValue(Dots *self) { return self->value; }
void wrap_FloatPtr_SetValue(FloatPtr *FloatPtrPtr, float_ptr v) { FloatPtrPtr->value = v; }
float_ptr wrap_FloatPtr_GetValue(FloatPtr *self) { return self->value; }
void wrap_MiddleDots_SetValue(MiddleDots *MiddleDotsPtr, int v) { MiddleDotsPtr->value = v; }
int wrap_MiddleDots_GetValue(MiddleDots *self) { return self->value; }
void wrap_MinThickness_SetValue(MinThickness *MinThicknessPtr, float v) { MinThicknessPtr->value = v; }
float wrap_MinThickness_GetValue(MinThickness *self) { return self->value; }
void wrap_Mode_SetValue(Mode *ModePtr, int v) { ModePtr->value = v; }
int wrap_Mode_GetValue(Mode *self) { return self->value; }
void wrap_Radius_SetValue(Radius *RadiusPtr, float v) { RadiusPtr->value = v; }
float wrap_Radius_GetValue(Radius *self) { return self->value; }
void wrap_Reverse_SetValue(Reverse *ReversePtr, bool v) { ReversePtr->value = v; }
bool wrap_Reverse_GetValue(Reverse *self) { return self->value; }
void wrap_Speed_SetValue(Speed *SpeedPtr, float v) { SpeedPtr->value = v; }
float wrap_Speed_GetValue(Speed *self) { return self->value; }
void wrap_SpinnerConfig_SetM_SpinnerType(SpinnerConfig *SpinnerConfigPtr, SpinnerTypeT v) { SpinnerConfigPtr->m_SpinnerType = v; }
SpinnerTypeT wrap_SpinnerConfig_GetM_SpinnerType(SpinnerConfig *self) { return self->m_SpinnerType; }
void wrap_SpinnerConfig_SetM_Radius(SpinnerConfig *SpinnerConfigPtr, float v) { SpinnerConfigPtr->m_Radius = v; }
float wrap_SpinnerConfig_GetM_Radius(SpinnerConfig *self) { return self->m_Radius; }
void wrap_SpinnerConfig_SetM_Speed(SpinnerConfig *SpinnerConfigPtr, float v) { SpinnerConfigPtr->m_Speed = v; }
float wrap_SpinnerConfig_GetM_Speed(SpinnerConfig *self) { return self->m_Speed; }
void wrap_SpinnerConfig_SetM_Thickness(SpinnerConfig *SpinnerConfigPtr, float v) { SpinnerConfigPtr->m_Thickness = v; }
float wrap_SpinnerConfig_GetM_Thickness(SpinnerConfig *self) { return self->m_Thickness; }
void wrap_SpinnerConfig_SetM_Color(SpinnerConfig *SpinnerConfigPtr, ImColor v) { SpinnerConfigPtr->m_Color = v; }
ImColor wrap_SpinnerConfig_GetM_Color(SpinnerConfig *self) { return self->m_Color; }
void wrap_SpinnerConfig_SetM_BgColor(SpinnerConfig *SpinnerConfigPtr, ImColor v) { SpinnerConfigPtr->m_BgColor = v; }
ImColor wrap_SpinnerConfig_GetM_BgColor(SpinnerConfig *self) { return self->m_BgColor; }
void wrap_SpinnerConfig_SetM_AltColor(SpinnerConfig *SpinnerConfigPtr, ImColor v) { SpinnerConfigPtr->m_AltColor = v; }
ImColor wrap_SpinnerConfig_GetM_AltColor(SpinnerConfig *self) { return self->m_AltColor; }
void wrap_SpinnerConfig_SetM_Angle(SpinnerConfig *SpinnerConfigPtr, float v) { SpinnerConfigPtr->m_Angle = v; }
float wrap_SpinnerConfig_GetM_Angle(SpinnerConfig *self) { return self->m_Angle; }
void wrap_SpinnerConfig_SetM_AngleMin(SpinnerConfig *SpinnerConfigPtr, float v) { SpinnerConfigPtr->m_AngleMin = v; }
float wrap_SpinnerConfig_GetM_AngleMin(SpinnerConfig *self) { return self->m_AngleMin; }
void wrap_SpinnerConfig_SetM_AngleMax(SpinnerConfig *SpinnerConfigPtr, float v) { SpinnerConfigPtr->m_AngleMax = v; }
float wrap_SpinnerConfig_GetM_AngleMax(SpinnerConfig *self) { return self->m_AngleMax; }
void wrap_SpinnerConfig_SetM_FloatPtr(SpinnerConfig *SpinnerConfigPtr, float_ptr v) { SpinnerConfigPtr->m_FloatPtr = v; }
float_ptr wrap_SpinnerConfig_GetM_FloatPtr(SpinnerConfig *self) { return self->m_FloatPtr; }
void wrap_SpinnerConfig_SetM_Dots(SpinnerConfig *SpinnerConfigPtr, int v) { SpinnerConfigPtr->m_Dots = v; }
int wrap_SpinnerConfig_GetM_Dots(SpinnerConfig *self) { return self->m_Dots; }
void wrap_SpinnerConfig_SetM_MiddleDots(SpinnerConfig *SpinnerConfigPtr, int v) { SpinnerConfigPtr->m_MiddleDots = v; }
int wrap_SpinnerConfig_GetM_MiddleDots(SpinnerConfig *self) { return self->m_MiddleDots; }
void wrap_SpinnerConfig_SetM_MinThickness(SpinnerConfig *SpinnerConfigPtr, float v) { SpinnerConfigPtr->m_MinThickness = v; }
float wrap_SpinnerConfig_GetM_MinThickness(SpinnerConfig *self) { return self->m_MinThickness; }
void wrap_SpinnerConfig_SetM_Reverse(SpinnerConfig *SpinnerConfigPtr, bool v) { SpinnerConfigPtr->m_Reverse = v; }
bool wrap_SpinnerConfig_GetM_Reverse(SpinnerConfig *self) { return self->m_Reverse; }
void wrap_SpinnerConfig_SetM_Delta(SpinnerConfig *SpinnerConfigPtr, float v) { SpinnerConfigPtr->m_Delta = v; }
float wrap_SpinnerConfig_GetM_Delta(SpinnerConfig *self) { return self->m_Delta; }
void wrap_SpinnerConfig_SetM_Mode(SpinnerConfig *SpinnerConfigPtr, int v) { SpinnerConfigPtr->m_Mode = v; }
int wrap_SpinnerConfig_GetM_Mode(SpinnerConfig *self) { return self->m_Mode; }
void wrap_SpinnerType_SetValue(SpinnerType *SpinnerTypePtr, SpinnerTypeT v) { SpinnerTypePtr->value = v; }
SpinnerTypeT wrap_SpinnerType_GetValue(SpinnerType *self) { return self->value; }
void wrap_Thickness_SetValue(Thickness *ThicknessPtr, float v) { ThicknessPtr->value = v; }
float wrap_Thickness_GetValue(Thickness *self) { return self->value; }
