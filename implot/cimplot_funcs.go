// Code generated by cmd/codegen from https://github.com/AllenDang/cimgui-go.
// DO NOT EDIT.

package implot

import (
	"unsafe"

	"github.com/AllenDang/cimgui-go/imgui"
	"github.com/AllenDang/cimgui-go/internal"
	"github.com/AllenDang/cimgui-go/utils/vectors"
)

// #include "../imgui/extra_types.h"
// #include "cimplot_structs_accessor.h"
// #include "cimplot_wrapper.h"
// #include "stdlib.h"
import "C"

func (self *AlignmentData) Begin() {
	selfArg, selfFin := self.Handle()
	C.ImPlotAlignmentData_Begin(internal.ReinterpretCast[*C.ImPlotAlignmentData](selfArg))

	selfFin()
}

func (self *AlignmentData) End() {
	selfArg, selfFin := self.Handle()
	C.ImPlotAlignmentData_End(internal.ReinterpretCast[*C.ImPlotAlignmentData](selfArg))

	selfFin()
}

func NewAlignmentData() *AlignmentData {
	return NewAlignmentDataFromC(C.ImPlotAlignmentData_ImPlotAlignmentData())
}

func (self *AlignmentData) Reset() {
	selfArg, selfFin := self.Handle()
	C.ImPlotAlignmentData_Reset(internal.ReinterpretCast[*C.ImPlotAlignmentData](selfArg))

	selfFin()
}

func (self *AlignmentData) Update(pad_a *float32, pad_b *float32, delta_a *float32, delta_b *float32) {
	selfArg, selfFin := self.Handle()
	pad_aArg, pad_aFin := internal.WrapNumberPtr[C.float, float32](pad_a)
	pad_bArg, pad_bFin := internal.WrapNumberPtr[C.float, float32](pad_b)
	delta_aArg, delta_aFin := internal.WrapNumberPtr[C.float, float32](delta_a)
	delta_bArg, delta_bFin := internal.WrapNumberPtr[C.float, float32](delta_b)
	C.ImPlotAlignmentData_Update(internal.ReinterpretCast[*C.ImPlotAlignmentData](selfArg), pad_aArg, pad_bArg, delta_aArg, delta_bArg)

	selfFin()
	pad_aFin()
	pad_bFin()
	delta_aFin()
	delta_bFin()
}

func (self *AlignmentData) Destroy() {
	selfArg, selfFin := self.Handle()
	C.ImPlotAlignmentData_destroy(internal.ReinterpretCast[*C.ImPlotAlignmentData](selfArg))

	selfFin()
}

func (self *AnnotationCollection) Append(pos imgui.Vec2, off imgui.Vec2, bg uint32, fg uint32, clamp bool, fmt string) {
	selfArg, selfFin := self.Handle()
	fmtArg, fmtFin := internal.WrapString[C.char](fmt)
	C.wrap_ImPlotAnnotationCollection_Append(internal.ReinterpretCast[*C.ImPlotAnnotationCollection](selfArg), internal.ReinterpretCast[C.ImVec2](pos.ToC()), internal.ReinterpretCast[C.ImVec2](off.ToC()), C.ImU32(bg), C.ImU32(fg), C.bool(clamp), fmtArg)

	selfFin()
	fmtFin()
}

func (self *AnnotationCollection) Text(idx int32) string {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() string {
		result := C.ImPlotAnnotationCollection_GetText(internal.ReinterpretCast[*C.ImPlotAnnotationCollection](selfArg), C.int(idx))
		defer C.free(unsafe.Pointer(result))
		return C.GoString(result)
	}()
}

func NewAnnotationCollection() *AnnotationCollection {
	return NewAnnotationCollectionFromC(C.ImPlotAnnotationCollection_ImPlotAnnotationCollection())
}

func (self *AnnotationCollection) Reset() {
	selfArg, selfFin := self.Handle()
	C.ImPlotAnnotationCollection_Reset(internal.ReinterpretCast[*C.ImPlotAnnotationCollection](selfArg))

	selfFin()
}

func (self *AnnotationCollection) Destroy() {
	selfArg, selfFin := self.Handle()
	C.ImPlotAnnotationCollection_destroy(internal.ReinterpretCast[*C.ImPlotAnnotationCollection](selfArg))

	selfFin()
}

func NewAnnotation() *Annotation {
	return NewAnnotationFromC(C.ImPlotAnnotation_ImPlotAnnotation())
}

func (self *Annotation) Destroy() {
	selfArg, selfFin := self.Handle()
	C.ImPlotAnnotation_destroy(internal.ReinterpretCast[*C.ImPlotAnnotation](selfArg))

	selfFin()
}

func (self *Axis) ApplyFit(padding float32) {
	selfArg, selfFin := self.Handle()
	C.ImPlotAxis_ApplyFit(internal.ReinterpretCast[*C.ImPlotAxis](selfArg), C.float(padding))

	selfFin()
}

func (self *Axis) CanInitFit() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.ImPlotAxis_CanInitFit(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)) == C.bool(true)
}

func (self *Axis) Constrain() {
	selfArg, selfFin := self.Handle()
	C.ImPlotAxis_Constrain(internal.ReinterpretCast[*C.ImPlotAxis](selfArg))

	selfFin()
}

func (self *Axis) ExtendFit(v float64) {
	selfArg, selfFin := self.Handle()
	C.ImPlotAxis_ExtendFit(internal.ReinterpretCast[*C.ImPlotAxis](selfArg), C.double(v))

	selfFin()
}

func (self *Axis) ExtendFitWith(alt *Axis, v float64, v_alt float64) {
	selfArg, selfFin := self.Handle()
	altArg, altFin := alt.Handle()
	C.ImPlotAxis_ExtendFitWith(internal.ReinterpretCast[*C.ImPlotAxis](selfArg), internal.ReinterpretCast[*C.ImPlotAxis](altArg), C.double(v), C.double(v_alt))

	selfFin()
	altFin()
}

func (self *Axis) Aspect() float64 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float64(C.ImPlotAxis_GetAspect(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)))
}

func (self *Axis) HasGridLines() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.ImPlotAxis_HasGridLines(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)) == C.bool(true)
}

func (self *Axis) HasLabel() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.ImPlotAxis_HasLabel(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)) == C.bool(true)
}

func (self *Axis) HasMenus() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.ImPlotAxis_HasMenus(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)) == C.bool(true)
}

func (self *Axis) HasTickLabels() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.ImPlotAxis_HasTickLabels(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)) == C.bool(true)
}

func (self *Axis) HasTickMarks() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.ImPlotAxis_HasTickMarks(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)) == C.bool(true)
}

func NewAxis() *Axis {
	return NewAxisFromC(C.ImPlotAxis_ImPlotAxis())
}

func (self *Axis) IsAutoFitting() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.ImPlotAxis_IsAutoFitting(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)) == C.bool(true)
}

func (self *Axis) IsForeground() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.ImPlotAxis_IsForeground(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)) == C.bool(true)
}

func (self *Axis) IsInputLocked() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.ImPlotAxis_IsInputLocked(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)) == C.bool(true)
}

func (self *Axis) IsInputLockedMax() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.ImPlotAxis_IsInputLockedMax(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)) == C.bool(true)
}

func (self *Axis) IsInputLockedMin() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.ImPlotAxis_IsInputLockedMin(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)) == C.bool(true)
}

func (self *Axis) IsInverted() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.ImPlotAxis_IsInverted(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)) == C.bool(true)
}

func (self *Axis) IsLocked() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.ImPlotAxis_IsLocked(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)) == C.bool(true)
}

func (self *Axis) IsLockedMax() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.ImPlotAxis_IsLockedMax(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)) == C.bool(true)
}

func (self *Axis) IsLockedMin() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.ImPlotAxis_IsLockedMin(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)) == C.bool(true)
}

func (self *Axis) IsOpposite() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.ImPlotAxis_IsOpposite(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)) == C.bool(true)
}

func (self *Axis) IsPanLocked(increasing bool) bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.ImPlotAxis_IsPanLocked(internal.ReinterpretCast[*C.ImPlotAxis](selfArg), C.bool(increasing)) == C.bool(true)
}

func (self *Axis) IsRangeLocked() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.ImPlotAxis_IsRangeLocked(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)) == C.bool(true)
}

func (self *Axis) PixelSize() float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.ImPlotAxis_PixelSize(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)))
}

func (self *Axis) PixelsToPlot(pix float32) float64 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float64(C.ImPlotAxis_PixelsToPlot(internal.ReinterpretCast[*C.ImPlotAxis](selfArg), C.float(pix)))
}

func (self *Axis) PlotToPixels(plt float64) float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.ImPlotAxis_PlotToPixels(internal.ReinterpretCast[*C.ImPlotAxis](selfArg), C.double(plt)))
}

func (self *Axis) PullLinks() {
	selfArg, selfFin := self.Handle()
	C.ImPlotAxis_PullLinks(internal.ReinterpretCast[*C.ImPlotAxis](selfArg))

	selfFin()
}

func (self *Axis) PushLinks() {
	selfArg, selfFin := self.Handle()
	C.ImPlotAxis_PushLinks(internal.ReinterpretCast[*C.ImPlotAxis](selfArg))

	selfFin()
}

func (self *Axis) Reset() {
	selfArg, selfFin := self.Handle()
	C.ImPlotAxis_Reset(internal.ReinterpretCast[*C.ImPlotAxis](selfArg))

	selfFin()
}

func (self *Axis) SetAspect(unit_per_pix float64) {
	selfArg, selfFin := self.Handle()
	C.ImPlotAxis_SetAspect(internal.ReinterpretCast[*C.ImPlotAxis](selfArg), C.double(unit_per_pix))

	selfFin()
}

// SetMaxV parameter default value hint:
// force: false
func (self *Axis) SetMaxV(_max float64, force bool) bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.ImPlotAxis_SetMax(internal.ReinterpretCast[*C.ImPlotAxis](selfArg), C.double(_max), C.bool(force)) == C.bool(true)
}

// SetMinV parameter default value hint:
// force: false
func (self *Axis) SetMinV(_min float64, force bool) bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.ImPlotAxis_SetMin(internal.ReinterpretCast[*C.ImPlotAxis](selfArg), C.double(_min), C.bool(force)) == C.bool(true)
}

func (self *Axis) SetRangePlotRange(rangeArg Range) {
	selfArg, selfFin := self.Handle()
	rangeArgArg, rangeArgFin := rangeArg.C()
	C.ImPlotAxis_SetRange_PlotRange(internal.ReinterpretCast[*C.ImPlotAxis](selfArg), internal.ReinterpretCast[C.ImPlotRange](rangeArgArg))

	selfFin()
	rangeArgFin()
}

func (self *Axis) SetRangedouble(v1 float64, v2 float64) {
	selfArg, selfFin := self.Handle()
	C.ImPlotAxis_SetRange_double(internal.ReinterpretCast[*C.ImPlotAxis](selfArg), C.double(v1), C.double(v2))

	selfFin()
}

func (self *Axis) UpdateTransformCache() {
	selfArg, selfFin := self.Handle()
	C.ImPlotAxis_UpdateTransformCache(internal.ReinterpretCast[*C.ImPlotAxis](selfArg))

	selfFin()
}

func (self *Axis) WillRender() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.ImPlotAxis_WillRender(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)) == C.bool(true)
}

func (self *Axis) Destroy() {
	selfArg, selfFin := self.Handle()
	C.ImPlotAxis_destroy(internal.ReinterpretCast[*C.ImPlotAxis](selfArg))

	selfFin()
}

func (self *ColormapData) Append(name string, keys *uint32, count int32, qual bool) int32 {
	selfArg, selfFin := self.Handle()
	nameArg, nameFin := internal.WrapString[C.char](name)
	keysArg, keysFin := internal.WrapNumberPtr[C.ImU32, uint32](keys)

	defer func() {
		selfFin()
		nameFin()
		keysFin()
	}()
	return int32(C.ImPlotColormapData_Append(internal.ReinterpretCast[*C.ImPlotColormapData](selfArg), nameArg, keysArg, C.int(count), C.bool(qual)))
}

func (self *ColormapData) Index(name string) Colormap {
	selfArg, selfFin := self.Handle()
	nameArg, nameFin := internal.WrapString[C.char](name)

	defer func() {
		selfFin()
		nameFin()
	}()
	return Colormap(C.ImPlotColormapData_GetIndex(internal.ReinterpretCast[*C.ImPlotColormapData](selfArg), nameArg))
}

func (self *ColormapData) KeyColor(cmap Colormap, idx int32) uint32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return uint32(C.ImPlotColormapData_GetKeyColor(internal.ReinterpretCast[*C.ImPlotColormapData](selfArg), C.ImPlotColormap(cmap), C.int(idx)))
}

func (self *ColormapData) KeyCount(cmap Colormap) int32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return int32(C.ImPlotColormapData_GetKeyCount(internal.ReinterpretCast[*C.ImPlotColormapData](selfArg), C.ImPlotColormap(cmap)))
}

func (self *ColormapData) Keys(cmap Colormap) *uint32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return (*uint32)(C.ImPlotColormapData_GetKeys(internal.ReinterpretCast[*C.ImPlotColormapData](selfArg), C.ImPlotColormap(cmap)))
}

func (self *ColormapData) Name(cmap Colormap) string {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() string {
		result := C.ImPlotColormapData_GetName(internal.ReinterpretCast[*C.ImPlotColormapData](selfArg), C.ImPlotColormap(cmap))
		defer C.free(unsafe.Pointer(result))
		return C.GoString(result)
	}()
}

func (self *ColormapData) Table(cmap Colormap) *uint32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return (*uint32)(C.ImPlotColormapData_GetTable(internal.ReinterpretCast[*C.ImPlotColormapData](selfArg), C.ImPlotColormap(cmap)))
}

func (self *ColormapData) TableColor(cmap Colormap, idx int32) uint32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return uint32(C.ImPlotColormapData_GetTableColor(internal.ReinterpretCast[*C.ImPlotColormapData](selfArg), C.ImPlotColormap(cmap), C.int(idx)))
}

func (self *ColormapData) TableSize(cmap Colormap) int32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return int32(C.ImPlotColormapData_GetTableSize(internal.ReinterpretCast[*C.ImPlotColormapData](selfArg), C.ImPlotColormap(cmap)))
}

func NewColormapData() *ColormapData {
	return NewColormapDataFromC(C.ImPlotColormapData_ImPlotColormapData())
}

func (self *ColormapData) IsQual(cmap Colormap) bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.ImPlotColormapData_IsQual(internal.ReinterpretCast[*C.ImPlotColormapData](selfArg), C.ImPlotColormap(cmap)) == C.bool(true)
}

func (self *ColormapData) LerpTable(cmap Colormap, t float32) uint32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return uint32(C.ImPlotColormapData_LerpTable(internal.ReinterpretCast[*C.ImPlotColormapData](selfArg), C.ImPlotColormap(cmap), C.float(t)))
}

func (self *ColormapData) RebuildTables() {
	selfArg, selfFin := self.Handle()
	C.ImPlotColormapData_RebuildTables(internal.ReinterpretCast[*C.ImPlotColormapData](selfArg))

	selfFin()
}

func (self *ColormapData) SetKeyColor(cmap Colormap, idx int32, value uint32) {
	selfArg, selfFin := self.Handle()
	C.ImPlotColormapData_SetKeyColor(internal.ReinterpretCast[*C.ImPlotColormapData](selfArg), C.ImPlotColormap(cmap), C.int(idx), C.ImU32(value))

	selfFin()
}

func (self *ColormapData) AppendTable(cmap Colormap) {
	selfArg, selfFin := self.Handle()
	C.ImPlotColormapData__AppendTable(internal.ReinterpretCast[*C.ImPlotColormapData](selfArg), C.ImPlotColormap(cmap))

	selfFin()
}

func (self *ColormapData) Destroy() {
	selfArg, selfFin := self.Handle()
	C.ImPlotColormapData_destroy(internal.ReinterpretCast[*C.ImPlotColormapData](selfArg))

	selfFin()
}

func NewDateTimeSpecNil() *DateTimeSpec {
	return NewDateTimeSpecFromC(C.ImPlotDateTimeSpec_ImPlotDateTimeSpec_Nil())
}

// NewDateTimeSpecPlotDateFmt parameter default value hint:
// use_24_hr_clk: false
// use_iso_8601: false
func NewDateTimeSpecPlotDateFmt(date_fmt DateFmt, time_fmt TimeFmt, use_24_hr_clk bool, use_iso_8601 bool) *DateTimeSpec {
	return NewDateTimeSpecFromC(C.ImPlotDateTimeSpec_ImPlotDateTimeSpec_PlotDateFmt(C.ImPlotDateFmt(date_fmt), C.ImPlotTimeFmt(time_fmt), C.bool(use_24_hr_clk), C.bool(use_iso_8601)))
}

func (self *DateTimeSpec) Destroy() {
	selfArg, selfFin := self.Handle()
	C.ImPlotDateTimeSpec_destroy(internal.ReinterpretCast[*C.ImPlotDateTimeSpec](selfArg))

	selfFin()
}

func NewInputMap() *InputMap {
	return NewInputMapFromC(C.ImPlotInputMap_ImPlotInputMap())
}

func (self *InputMap) Destroy() {
	selfArg, selfFin := self.Handle()
	C.ImPlotInputMap_destroy(internal.ReinterpretCast[*C.ImPlotInputMap](selfArg))

	selfFin()
}

func (self *ItemGroup) ItemByIndex(i int32) *Item {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return NewItemFromC(C.ImPlotItemGroup_GetItemByIndex(internal.ReinterpretCast[*C.ImPlotItemGroup](selfArg), C.int(i)))
}

func (self *ItemGroup) ItemCount() int32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return int32(C.ImPlotItemGroup_GetItemCount(internal.ReinterpretCast[*C.ImPlotItemGroup](selfArg)))
}

func (self *ItemGroup) ItemID(label_id string) imgui.ID {
	selfArg, selfFin := self.Handle()
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)

	defer func() {
		selfFin()
		label_idFin()
	}()
	return *imgui.NewIDFromC(func() *C.ImGuiID {
		result := C.ImPlotItemGroup_GetItemID(internal.ReinterpretCast[*C.ImPlotItemGroup](selfArg), label_idArg)
		return &result
	}())
}

func (self *ItemGroup) ItemIndex(item *Item) int32 {
	selfArg, selfFin := self.Handle()
	itemArg, itemFin := item.Handle()

	defer func() {
		selfFin()
		itemFin()
	}()
	return int32(C.ImPlotItemGroup_GetItemIndex(internal.ReinterpretCast[*C.ImPlotItemGroup](selfArg), internal.ReinterpretCast[*C.ImPlotItem](itemArg)))
}

func (self *ItemGroup) ItemByID(id imgui.ID) *Item {
	selfArg, selfFin := self.Handle()
	idArg, idFin := id.C()

	defer func() {
		selfFin()
		idFin()
	}()
	return NewItemFromC(C.ImPlotItemGroup_GetItem_ID(internal.ReinterpretCast[*C.ImPlotItemGroup](selfArg), internal.ReinterpretCast[C.ImGuiID](idArg)))
}

func (self *ItemGroup) ItemStr(label_id string) *Item {
	selfArg, selfFin := self.Handle()
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)

	defer func() {
		selfFin()
		label_idFin()
	}()
	return NewItemFromC(C.ImPlotItemGroup_GetItem_Str(internal.ReinterpretCast[*C.ImPlotItemGroup](selfArg), label_idArg))
}

func (self *ItemGroup) LegendCount() int32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return int32(C.ImPlotItemGroup_GetLegendCount(internal.ReinterpretCast[*C.ImPlotItemGroup](selfArg)))
}

func (self *ItemGroup) LegendItem(i int32) *Item {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return NewItemFromC(C.ImPlotItemGroup_GetLegendItem(internal.ReinterpretCast[*C.ImPlotItemGroup](selfArg), C.int(i)))
}

func (self *ItemGroup) LegendLabel(i int32) string {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() string {
		result := C.ImPlotItemGroup_GetLegendLabel(internal.ReinterpretCast[*C.ImPlotItemGroup](selfArg), C.int(i))
		defer C.free(unsafe.Pointer(result))
		return C.GoString(result)
	}()
}

func (self *ItemGroup) OrAddItem(id imgui.ID) *Item {
	selfArg, selfFin := self.Handle()
	idArg, idFin := id.C()

	defer func() {
		selfFin()
		idFin()
	}()
	return NewItemFromC(C.ImPlotItemGroup_GetOrAddItem(internal.ReinterpretCast[*C.ImPlotItemGroup](selfArg), internal.ReinterpretCast[C.ImGuiID](idArg)))
}

func NewItemGroup() *ItemGroup {
	return NewItemGroupFromC(C.ImPlotItemGroup_ImPlotItemGroup())
}

func (self *ItemGroup) Reset() {
	selfArg, selfFin := self.Handle()
	C.ImPlotItemGroup_Reset(internal.ReinterpretCast[*C.ImPlotItemGroup](selfArg))

	selfFin()
}

func (self *ItemGroup) Destroy() {
	selfArg, selfFin := self.Handle()
	C.ImPlotItemGroup_destroy(internal.ReinterpretCast[*C.ImPlotItemGroup](selfArg))

	selfFin()
}

func NewItem() *Item {
	return NewItemFromC(C.ImPlotItem_ImPlotItem())
}

func (self *Item) Destroy() {
	selfArg, selfFin := self.Handle()
	C.ImPlotItem_destroy(internal.ReinterpretCast[*C.ImPlotItem](selfArg))

	selfFin()
}

func NewLegend() *Legend {
	return NewLegendFromC(C.ImPlotLegend_ImPlotLegend())
}

func (self *Legend) Reset() {
	selfArg, selfFin := self.Handle()
	C.ImPlotLegend_Reset(internal.ReinterpretCast[*C.ImPlotLegend](selfArg))

	selfFin()
}

func (self *Legend) Destroy() {
	selfArg, selfFin := self.Handle()
	C.ImPlotLegend_destroy(internal.ReinterpretCast[*C.ImPlotLegend](selfArg))

	selfFin()
}

func NewNextItemData() *NextItemData {
	return NewNextItemDataFromC(C.ImPlotNextItemData_ImPlotNextItemData())
}

func (self *NextItemData) Reset() {
	selfArg, selfFin := self.Handle()
	C.ImPlotNextItemData_Reset(internal.ReinterpretCast[*C.ImPlotNextItemData](selfArg))

	selfFin()
}

func (self *NextItemData) Destroy() {
	selfArg, selfFin := self.Handle()
	C.ImPlotNextItemData_destroy(internal.ReinterpretCast[*C.ImPlotNextItemData](selfArg))

	selfFin()
}

func NewNextPlotData() *NextPlotData {
	return NewNextPlotDataFromC(C.ImPlotNextPlotData_ImPlotNextPlotData())
}

func (self *NextPlotData) Reset() {
	selfArg, selfFin := self.Handle()
	C.ImPlotNextPlotData_Reset(internal.ReinterpretCast[*C.ImPlotNextPlotData](selfArg))

	selfFin()
}

func (self *NextPlotData) Destroy() {
	selfArg, selfFin := self.Handle()
	C.ImPlotNextPlotData_destroy(internal.ReinterpretCast[*C.ImPlotNextPlotData](selfArg))

	selfFin()
}

func (self *Plot) ClearTextBuffer() {
	selfArg, selfFin := self.Handle()
	C.ImPlotPlot_ClearTextBuffer(internal.ReinterpretCast[*C.ImPlotPlot](selfArg))

	selfFin()
}

func (self *Plot) EnabledAxesX() int32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return int32(C.ImPlotPlot_EnabledAxesX(internal.ReinterpretCast[*C.ImPlotPlot](selfArg)))
}

func (self *Plot) EnabledAxesY() int32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return int32(C.ImPlotPlot_EnabledAxesY(internal.ReinterpretCast[*C.ImPlotPlot](selfArg)))
}

func (self *Plot) AxisLabel(axis Axis) string {
	selfArg, selfFin := self.Handle()
	axisArg, axisFin := axis.C()

	defer func() {
		selfFin()
		axisFin()
	}()
	return func() string {
		result := C.ImPlotPlot_GetAxisLabel(internal.ReinterpretCast[*C.ImPlotPlot](selfArg), internal.ReinterpretCast[C.ImPlotAxis](axisArg))
		defer C.free(unsafe.Pointer(result))
		return C.GoString(result)
	}()
}

func (self *Plot) Title() string {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() string {
		result := C.ImPlotPlot_GetTitle(internal.ReinterpretCast[*C.ImPlotPlot](selfArg))
		defer C.free(unsafe.Pointer(result))
		return C.GoString(result)
	}()
}

func (self *Plot) HasTitle() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.ImPlotPlot_HasTitle(internal.ReinterpretCast[*C.ImPlotPlot](selfArg)) == C.bool(true)
}

func NewPlot() *Plot {
	return NewPlotFromC(C.ImPlotPlot_ImPlotPlot())
}

func (self *Plot) IsInputLocked() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.ImPlotPlot_IsInputLocked(internal.ReinterpretCast[*C.ImPlotPlot](selfArg)) == C.bool(true)
}

func (self *Plot) SetAxisLabel(axis *Axis, label string) {
	selfArg, selfFin := self.Handle()
	axisArg, axisFin := axis.Handle()
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImPlotPlot_SetAxisLabel(internal.ReinterpretCast[*C.ImPlotPlot](selfArg), internal.ReinterpretCast[*C.ImPlotAxis](axisArg), labelArg)

	selfFin()
	axisFin()
	labelFin()
}

func (self *Plot) SetTitle(title string) {
	selfArg, selfFin := self.Handle()
	titleArg, titleFin := internal.WrapString[C.char](title)
	C.ImPlotPlot_SetTitle(internal.ReinterpretCast[*C.ImPlotPlot](selfArg), titleArg)

	selfFin()
	titleFin()
}

func (self *Plot) XAxis(i int32) *Axis {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return NewAxisFromC(C.ImPlotPlot_XAxis_Nil(internal.ReinterpretCast[*C.ImPlotPlot](selfArg), C.int(i)))
}

func (self *Plot) XAxisconst(i int32) *Axis {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return NewAxisFromC(C.ImPlotPlot_XAxis__const(internal.ReinterpretCast[*C.ImPlotPlot](selfArg), C.int(i)))
}

func (self *Plot) YAxis(i int32) *Axis {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return NewAxisFromC(C.ImPlotPlot_YAxis_Nil(internal.ReinterpretCast[*C.ImPlotPlot](selfArg), C.int(i)))
}

func (self *Plot) YAxisconst(i int32) *Axis {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return NewAxisFromC(C.ImPlotPlot_YAxis__const(internal.ReinterpretCast[*C.ImPlotPlot](selfArg), C.int(i)))
}

func (self *Plot) Destroy() {
	selfArg, selfFin := self.Handle()
	C.ImPlotPlot_destroy(internal.ReinterpretCast[*C.ImPlotPlot](selfArg))

	selfFin()
}

func NewPointError(x float64, y float64, neg float64, pos float64) *PointError {
	return NewPointErrorFromC(C.ImPlotPointError_ImPlotPointError(C.double(x), C.double(y), C.double(neg), C.double(pos)))
}

func (self *PointError) Destroy() {
	selfArg, selfFin := self.Handle()
	C.ImPlotPointError_destroy(internal.ReinterpretCast[*C.ImPlotPointError](selfArg))

	selfFin()
}

func (self *PlotPoint) Destroy() {
	selfArg, selfFin := internal.Wrap(self)
	C.ImPlotPoint_destroy(internal.ReinterpretCast[*C.ImPlotPoint](selfArg))

	selfFin()
}

func (self *Range) Clamp(value float64) float64 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float64(C.ImPlotRange_Clamp(internal.ReinterpretCast[*C.ImPlotRange](selfArg), C.double(value)))
}

func (self *Range) Contains(value float64) bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.ImPlotRange_Contains(internal.ReinterpretCast[*C.ImPlotRange](selfArg), C.double(value)) == C.bool(true)
}

func NewRangeNil() *Range {
	return NewRangeFromC(C.ImPlotRange_ImPlotRange_Nil())
}

func NewRangedouble(_min float64, _max float64) *Range {
	return NewRangeFromC(C.ImPlotRange_ImPlotRange_double(C.double(_min), C.double(_max)))
}

func (self *Range) Size() float64 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float64(C.ImPlotRange_Size(internal.ReinterpretCast[*C.ImPlotRange](selfArg)))
}

func (self *Range) Destroy() {
	selfArg, selfFin := self.Handle()
	C.ImPlotRange_destroy(internal.ReinterpretCast[*C.ImPlotRange](selfArg))

	selfFin()
}

func (self *Rect) ClampPlotPoInt(p PlotPoint) PlotPoint {
	pOut := new(PlotPoint)
	pOutArg, pOutFin := internal.Wrap(pOut)

	selfArg, selfFin := self.Handle()
	C.ImPlotRect_Clamp_PlotPoInt(internal.ReinterpretCast[*C.ImPlotPoint](pOutArg), internal.ReinterpretCast[*C.ImPlotRect](selfArg), internal.ReinterpretCast[C.ImPlotPoint](p.ToC()))

	pOutFin()
	selfFin()

	return *pOut
}

func (self *Rect) Clampdouble(x float64, y float64) PlotPoint {
	pOut := new(PlotPoint)
	pOutArg, pOutFin := internal.Wrap(pOut)

	selfArg, selfFin := self.Handle()
	C.ImPlotRect_Clamp_double(internal.ReinterpretCast[*C.ImPlotPoint](pOutArg), internal.ReinterpretCast[*C.ImPlotRect](selfArg), C.double(x), C.double(y))

	pOutFin()
	selfFin()

	return *pOut
}

func (self *Rect) ContainsPlotPoInt(p PlotPoint) bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.ImPlotRect_Contains_PlotPoInt(internal.ReinterpretCast[*C.ImPlotRect](selfArg), internal.ReinterpretCast[C.ImPlotPoint](p.ToC())) == C.bool(true)
}

func (self *Rect) Containsdouble(x float64, y float64) bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.ImPlotRect_Contains_double(internal.ReinterpretCast[*C.ImPlotRect](selfArg), C.double(x), C.double(y)) == C.bool(true)
}

func NewRectNil() *Rect {
	return NewRectFromC(C.ImPlotRect_ImPlotRect_Nil())
}

func NewRectdouble(x_min float64, x_max float64, y_min float64, y_max float64) *Rect {
	return NewRectFromC(C.ImPlotRect_ImPlotRect_double(C.double(x_min), C.double(x_max), C.double(y_min), C.double(y_max)))
}

func (self *Rect) Max() PlotPoint {
	pOut := new(PlotPoint)
	pOutArg, pOutFin := internal.Wrap(pOut)

	selfArg, selfFin := self.Handle()
	C.ImPlotRect_Max(internal.ReinterpretCast[*C.ImPlotPoint](pOutArg), internal.ReinterpretCast[*C.ImPlotRect](selfArg))

	pOutFin()
	selfFin()

	return *pOut
}

func (self *Rect) Min() PlotPoint {
	pOut := new(PlotPoint)
	pOutArg, pOutFin := internal.Wrap(pOut)

	selfArg, selfFin := self.Handle()
	C.ImPlotRect_Min(internal.ReinterpretCast[*C.ImPlotPoint](pOutArg), internal.ReinterpretCast[*C.ImPlotRect](selfArg))

	pOutFin()
	selfFin()

	return *pOut
}

func (self *Rect) Size() PlotPoint {
	pOut := new(PlotPoint)
	pOutArg, pOutFin := internal.Wrap(pOut)

	selfArg, selfFin := self.Handle()
	C.ImPlotRect_Size(internal.ReinterpretCast[*C.ImPlotPoint](pOutArg), internal.ReinterpretCast[*C.ImPlotRect](selfArg))

	pOutFin()
	selfFin()

	return *pOut
}

func (self *Rect) Destroy() {
	selfArg, selfFin := self.Handle()
	C.ImPlotRect_destroy(internal.ReinterpretCast[*C.ImPlotRect](selfArg))

	selfFin()
}

func NewStyle() *Style {
	return NewStyleFromC(C.ImPlotStyle_ImPlotStyle())
}

func (self *Style) Destroy() {
	selfArg, selfFin := self.Handle()
	C.ImPlotStyle_destroy(internal.ReinterpretCast[*C.ImPlotStyle](selfArg))

	selfFin()
}

func NewSubplot() *Subplot {
	return NewSubplotFromC(C.ImPlotSubplot_ImPlotSubplot())
}

func (self *Subplot) Destroy() {
	selfArg, selfFin := self.Handle()
	C.ImPlotSubplot_destroy(internal.ReinterpretCast[*C.ImPlotSubplot](selfArg))

	selfFin()
}

func (self *TagCollection) Append(axis AxisEnum, value float64, bg uint32, fg uint32, fmt string) {
	selfArg, selfFin := self.Handle()
	fmtArg, fmtFin := internal.WrapString[C.char](fmt)
	C.wrap_ImPlotTagCollection_Append(internal.ReinterpretCast[*C.ImPlotTagCollection](selfArg), C.ImAxis(axis), C.double(value), C.ImU32(bg), C.ImU32(fg), fmtArg)

	selfFin()
	fmtFin()
}

func (self *TagCollection) Text(idx int32) string {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() string {
		result := C.ImPlotTagCollection_GetText(internal.ReinterpretCast[*C.ImPlotTagCollection](selfArg), C.int(idx))
		defer C.free(unsafe.Pointer(result))
		return C.GoString(result)
	}()
}

func NewTagCollection() *TagCollection {
	return NewTagCollectionFromC(C.ImPlotTagCollection_ImPlotTagCollection())
}

func (self *TagCollection) Reset() {
	selfArg, selfFin := self.Handle()
	C.ImPlotTagCollection_Reset(internal.ReinterpretCast[*C.ImPlotTagCollection](selfArg))

	selfFin()
}

func (self *TagCollection) Destroy() {
	selfArg, selfFin := self.Handle()
	C.ImPlotTagCollection_destroy(internal.ReinterpretCast[*C.ImPlotTagCollection](selfArg))

	selfFin()
}

func NewTick(value float64, major bool, level int32, show_label bool) *Tick {
	return NewTickFromC(C.ImPlotTick_ImPlotTick(C.double(value), C.bool(major), C.int(level), C.bool(show_label)))
}

func (self *Tick) Destroy() {
	selfArg, selfFin := self.Handle()
	C.ImPlotTick_destroy(internal.ReinterpretCast[*C.ImPlotTick](selfArg))

	selfFin()
}

func (self *Ticker) AddTickPlotTick(tick Tick) *Tick {
	selfArg, selfFin := self.Handle()
	tickArg, tickFin := tick.C()

	defer func() {
		selfFin()
		tickFin()
	}()
	return NewTickFromC(C.ImPlotTicker_AddTick_PlotTick(internal.ReinterpretCast[*C.ImPlotTicker](selfArg), internal.ReinterpretCast[C.ImPlotTick](tickArg)))
}

func (self *Ticker) AddTickdoublePlotFormatter(value float64, major bool, level int32, show_label bool, formatter Formatter, data uintptr) *Tick {
	selfArg, selfFin := self.Handle()
	formatterArg, formatterFin := formatter.C()

	defer func() {
		selfFin()
		formatterFin()
	}()
	return NewTickFromC(C.wrap_ImPlotTicker_AddTick_doublePlotFormatter(internal.ReinterpretCast[*C.ImPlotTicker](selfArg), C.double(value), C.bool(major), C.int(level), C.bool(show_label), internal.ReinterpretCast[C.ImPlotFormatter](formatterArg), C.uintptr_t(data)))
}

func (self *Ticker) AddTickdoubleStr(value float64, major bool, level int32, show_label bool, label string) *Tick {
	selfArg, selfFin := self.Handle()
	labelArg, labelFin := internal.WrapString[C.char](label)

	defer func() {
		selfFin()
		labelFin()
	}()
	return NewTickFromC(C.ImPlotTicker_AddTick_doubleStr(internal.ReinterpretCast[*C.ImPlotTicker](selfArg), C.double(value), C.bool(major), C.int(level), C.bool(show_label), labelArg))
}

func (self *Ticker) TextInt(idx int32) string {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() string {
		result := C.ImPlotTicker_GetText_Int(internal.ReinterpretCast[*C.ImPlotTicker](selfArg), C.int(idx))
		defer C.free(unsafe.Pointer(result))
		return C.GoString(result)
	}()
}

func (self *Ticker) TextPlotTick(tick Tick) string {
	selfArg, selfFin := self.Handle()
	tickArg, tickFin := tick.C()

	defer func() {
		selfFin()
		tickFin()
	}()
	return func() string {
		result := C.ImPlotTicker_GetText_PlotTick(internal.ReinterpretCast[*C.ImPlotTicker](selfArg), internal.ReinterpretCast[C.ImPlotTick](tickArg))
		defer C.free(unsafe.Pointer(result))
		return C.GoString(result)
	}()
}

func NewTicker() *Ticker {
	return NewTickerFromC(C.ImPlotTicker_ImPlotTicker())
}

func (self *Ticker) OverrideSizeLate(size imgui.Vec2) {
	selfArg, selfFin := self.Handle()
	C.ImPlotTicker_OverrideSizeLate(internal.ReinterpretCast[*C.ImPlotTicker](selfArg), internal.ReinterpretCast[C.ImVec2](size.ToC()))

	selfFin()
}

func (self *Ticker) Reset() {
	selfArg, selfFin := self.Handle()
	C.ImPlotTicker_Reset(internal.ReinterpretCast[*C.ImPlotTicker](selfArg))

	selfFin()
}

func (self *Ticker) TickCount() int32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return int32(C.ImPlotTicker_TickCount(internal.ReinterpretCast[*C.ImPlotTicker](selfArg)))
}

func (self *Ticker) Destroy() {
	selfArg, selfFin := self.Handle()
	C.ImPlotTicker_destroy(internal.ReinterpretCast[*C.ImPlotTicker](selfArg))

	selfFin()
}

func TimeFromDouble(t float64) PlotTime {
	pOut := new(PlotTime)
	pOutArg, pOutFin := internal.Wrap(pOut)

	C.ImPlotTime_FromDouble(internal.ReinterpretCast[*C.ImPlotTime](pOutArg), C.double(t))

	pOutFin()

	return *pOut
}

func (self *PlotTime) RollOver() {
	selfArg, selfFin := internal.Wrap(self)
	C.ImPlotTime_RollOver(internal.ReinterpretCast[*C.ImPlotTime](selfArg))

	selfFin()
}

func (self *PlotTime) ToDouble() float64 {
	selfArg, selfFin := internal.Wrap(self)

	defer func() {
		selfFin()
	}()
	return float64(C.ImPlotTime_ToDouble(internal.ReinterpretCast[*C.ImPlotTime](selfArg)))
}

func (self *PlotTime) Destroy() {
	selfArg, selfFin := internal.Wrap(self)
	C.ImPlotTime_destroy(internal.ReinterpretCast[*C.ImPlotTime](selfArg))

	selfFin()
}

// AddColormapU32PtrV parameter default value hint:
// qual: true
func AddColormapU32PtrV(name string, cols *uint32, size int32, qual bool) Colormap {
	nameArg, nameFin := internal.WrapString[C.char](name)
	colsArg, colsFin := internal.WrapNumberPtr[C.ImU32, uint32](cols)

	defer func() {
		nameFin()
		colsFin()
	}()
	return Colormap(C.ImPlot_AddColormap_U32Ptr(nameArg, colsArg, C.int(size), C.bool(qual)))
}

// AddColormapVec4PtrV parameter default value hint:
// qual: true
func AddColormapVec4PtrV(name string, cols *imgui.Vec4, size int32, qual bool) Colormap {
	nameArg, nameFin := internal.WrapString[C.char](name)
	colsArg, colsFin := internal.Wrap(cols)

	defer func() {
		nameFin()
		colsFin()
	}()
	return Colormap(C.ImPlot_AddColormap_Vec4Ptr(nameArg, internal.ReinterpretCast[*C.ImVec4](colsArg), C.int(size), C.bool(qual)))
}

// AddTextCenteredV parameter default value hint:
func AddTextCenteredV(DrawList *imgui.DrawList, top_center imgui.Vec2, col uint32, text_begin string) {
	DrawListArg, DrawListFin := DrawList.Handle()
	text_beginArg, text_beginFin := internal.WrapString[C.char](text_begin)
	C.wrap_ImPlot_AddTextCenteredV(internal.ReinterpretCast[*C.ImDrawList](DrawListArg), internal.ReinterpretCast[C.ImVec2](top_center.ToC()), C.ImU32(col), text_beginArg)

	DrawListFin()
	text_beginFin()
}

// AddTextVerticalV parameter default value hint:
func AddTextVerticalV(DrawList *imgui.DrawList, pos imgui.Vec2, col uint32, text_begin string) {
	DrawListArg, DrawListFin := DrawList.Handle()
	text_beginArg, text_beginFin := internal.WrapString[C.char](text_begin)
	C.wrap_ImPlot_AddTextVerticalV(internal.ReinterpretCast[*C.ImDrawList](DrawListArg), internal.ReinterpretCast[C.ImVec2](pos.ToC()), C.ImU32(col), text_beginArg)

	DrawListFin()
	text_beginFin()
}

func AddTime(t PlotTime, unit TimeUnit, count int32) PlotTime {
	pOut := new(PlotTime)
	pOutArg, pOutFin := internal.Wrap(pOut)

	C.ImPlot_AddTime(internal.ReinterpretCast[*C.ImPlotTime](pOutArg), internal.ReinterpretCast[C.ImPlotTime](t.ToC()), C.ImPlotTimeUnit(unit), C.int(count))

	pOutFin()

	return *pOut
}

func AllAxesInputLocked(axes *Axis, count int32) bool {
	axesArg, axesFin := axes.Handle()

	defer func() {
		axesFin()
	}()
	return C.ImPlot_AllAxesInputLocked(internal.ReinterpretCast[*C.ImPlotAxis](axesArg), C.int(count)) == C.bool(true)
}

// AnnotationBoolV parameter default value hint:
// round: false
func AnnotationBoolV(x float64, y float64, col imgui.Vec4, pix_offset imgui.Vec2, clamp bool, round bool) {
	C.ImPlot_Annotation_Bool(C.double(x), C.double(y), internal.ReinterpretCast[C.ImVec4](col.ToC()), internal.ReinterpretCast[C.ImVec2](pix_offset.ToC()), C.bool(clamp), C.bool(round))
}

func AnnotationStr(x float64, y float64, col imgui.Vec4, pix_offset imgui.Vec2, clamp bool, fmt string) {
	fmtArg, fmtFin := internal.WrapString[C.char](fmt)
	C.wrap_ImPlot_Annotation_Str(C.double(x), C.double(y), internal.ReinterpretCast[C.ImVec4](col.ToC()), internal.ReinterpretCast[C.ImVec2](pix_offset.ToC()), C.bool(clamp), fmtArg)

	fmtFin()
}

func AnyAxesHeld(axes *Axis, count int32) bool {
	axesArg, axesFin := axes.Handle()

	defer func() {
		axesFin()
	}()
	return C.ImPlot_AnyAxesHeld(internal.ReinterpretCast[*C.ImPlotAxis](axesArg), C.int(count)) == C.bool(true)
}

func AnyAxesHovered(axes *Axis, count int32) bool {
	axesArg, axesFin := axes.Handle()

	defer func() {
		axesFin()
	}()
	return C.ImPlot_AnyAxesHovered(internal.ReinterpretCast[*C.ImPlotAxis](axesArg), C.int(count)) == C.bool(true)
}

func AnyAxesInputLocked(axes *Axis, count int32) bool {
	axesArg, axesFin := axes.Handle()

	defer func() {
		axesFin()
	}()
	return C.ImPlot_AnyAxesInputLocked(internal.ReinterpretCast[*C.ImPlotAxis](axesArg), C.int(count)) == C.bool(true)
}

// BeginAlignedPlotsV parameter default value hint:
// vertical: true
func BeginAlignedPlotsV(group_id string, vertical bool) bool {
	group_idArg, group_idFin := internal.WrapString[C.char](group_id)

	defer func() {
		group_idFin()
	}()
	return C.ImPlot_BeginAlignedPlots(group_idArg, C.bool(vertical)) == C.bool(true)
}

// BeginDragDropSourceAxisV parameter default value hint:
// flags: 0
func BeginDragDropSourceAxisV(axis AxisEnum, flags imgui.DragDropFlags) bool {
	return C.ImPlot_BeginDragDropSourceAxis(C.ImAxis(axis), C.ImGuiDragDropFlags(flags)) == C.bool(true)
}

// BeginDragDropSourceItemV parameter default value hint:
// flags: 0
func BeginDragDropSourceItemV(label_id string, flags imgui.DragDropFlags) bool {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)

	defer func() {
		label_idFin()
	}()
	return C.ImPlot_BeginDragDropSourceItem(label_idArg, C.ImGuiDragDropFlags(flags)) == C.bool(true)
}

// BeginDragDropSourcePlotV parameter default value hint:
// flags: 0
func BeginDragDropSourcePlotV(flags imgui.DragDropFlags) bool {
	return C.ImPlot_BeginDragDropSourcePlot(C.ImGuiDragDropFlags(flags)) == C.bool(true)
}

func BeginDragDropTargetAxis(axis AxisEnum) bool {
	return C.ImPlot_BeginDragDropTargetAxis(C.ImAxis(axis)) == C.bool(true)
}

func BeginDragDropTargetLegend() bool {
	return C.ImPlot_BeginDragDropTargetLegend() == C.bool(true)
}

func BeginDragDropTargetPlot() bool {
	return C.ImPlot_BeginDragDropTargetPlot() == C.bool(true)
}

// BeginItemV parameter default value hint:
// flags: 0
// recolor_from: -1
func BeginItemV(label_id string, flags ItemFlags, recolor_from Col) bool {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)

	defer func() {
		label_idFin()
	}()
	return C.ImPlot_BeginItem(label_idArg, C.ImPlotItemFlags(flags), C.ImPlotCol(recolor_from)) == C.bool(true)
}

// BeginLegendPopupV parameter default value hint:
// mouse_button: 1
func BeginLegendPopupV(label_id string, mouse_button imgui.MouseButton) bool {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)

	defer func() {
		label_idFin()
	}()
	return C.ImPlot_BeginLegendPopup(label_idArg, C.ImGuiMouseButton(mouse_button)) == C.bool(true)
}

// BeginPlotV parameter default value hint:
// size: ImVec2(-1,0)
// flags: 0
func BeginPlotV(title_id string, size imgui.Vec2, flags Flags) bool {
	title_idArg, title_idFin := internal.WrapString[C.char](title_id)

	defer func() {
		title_idFin()
	}()
	return C.ImPlot_BeginPlot(title_idArg, internal.ReinterpretCast[C.ImVec2](size.ToC()), C.ImPlotFlags(flags)) == C.bool(true)
}

// BeginSubplotsV parameter default value hint:
// flags: 0
// row_ratios: nullptr
// col_ratios: nullptr
func BeginSubplotsV(title_id string, rows int32, cols int32, size imgui.Vec2, flags SubplotFlags, row_ratios *float32, col_ratios *float32) bool {
	title_idArg, title_idFin := internal.WrapString[C.char](title_id)
	row_ratiosArg, row_ratiosFin := internal.WrapNumberPtr[C.float, float32](row_ratios)
	col_ratiosArg, col_ratiosFin := internal.WrapNumberPtr[C.float, float32](col_ratios)

	defer func() {
		title_idFin()
		row_ratiosFin()
		col_ratiosFin()
	}()
	return C.ImPlot_BeginSubplots(title_idArg, C.int(rows), C.int(cols), internal.ReinterpretCast[C.ImVec2](size.ToC()), C.ImPlotSubplotFlags(flags), row_ratiosArg, col_ratiosArg) == C.bool(true)
}

// BustColorCacheV parameter default value hint:
// plot_title_id: nullptr
func BustColorCacheV(plot_title_id string) {
	plot_title_idArg, plot_title_idFin := internal.WrapString[C.char](plot_title_id)
	C.ImPlot_BustColorCache(plot_title_idArg)

	plot_title_idFin()
}

func BustItemCache() {
	C.ImPlot_BustItemCache()
}

func BustPlotCache() {
	C.ImPlot_BustPlotCache()
}

func CalcHoverColor(col uint32) uint32 {
	return uint32(C.ImPlot_CalcHoverColor(C.ImU32(col)))
}

func CalcLegendSize(items *ItemGroup, pad imgui.Vec2, spacing imgui.Vec2, vertical bool) imgui.Vec2 {
	pOut := new(imgui.Vec2)
	pOutArg, pOutFin := internal.Wrap(pOut)

	itemsArg, itemsFin := items.Handle()
	C.ImPlot_CalcLegendSize(internal.ReinterpretCast[*C.ImVec2](pOutArg), internal.ReinterpretCast[*C.ImPlotItemGroup](itemsArg), internal.ReinterpretCast[C.ImVec2](pad.ToC()), internal.ReinterpretCast[C.ImVec2](spacing.ToC()), C.bool(vertical))

	pOutFin()
	itemsFin()

	return *pOut
}

func CalcTextColorU32(bg uint32) uint32 {
	return uint32(C.ImPlot_CalcTextColor_U32(C.ImU32(bg)))
}

func CalcTextColorVec4(bg imgui.Vec4) uint32 {
	return uint32(C.ImPlot_CalcTextColor_Vec4(internal.ReinterpretCast[C.ImVec4](bg.ToC())))
}

func CalcTextSizeVertical(text string) imgui.Vec2 {
	pOut := new(imgui.Vec2)
	pOutArg, pOutFin := internal.Wrap(pOut)

	textArg, textFin := internal.WrapString[C.char](text)
	C.ImPlot_CalcTextSizeVertical(internal.ReinterpretCast[*C.ImVec2](pOutArg), textArg)

	pOutFin()
	textFin()

	return *pOut
}

func CalculateBinsFloatPtr(values *float32, count int32, meth Bin, rangeArg Range, bins_out *int32, width_out *float64) {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.float, float32](values)
	rangeArgArg, rangeArgFin := rangeArg.C()
	bins_outArg, bins_outFin := internal.WrapNumberPtr[C.int, int32](bins_out)
	width_outArg, width_outFin := internal.WrapNumberPtr[C.double, float64](width_out)
	C.ImPlot_CalculateBins_FloatPtr(valuesArg, C.int(count), C.ImPlotBin(meth), internal.ReinterpretCast[C.ImPlotRange](rangeArgArg), bins_outArg, width_outArg)

	valuesFin()
	rangeArgFin()
	bins_outFin()
	width_outFin()
}

func CalculateBinsS16Ptr(values *int16, count int32, meth Bin, rangeArg Range, bins_out *int32, width_out *float64) {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS16, int16](values)
	rangeArgArg, rangeArgFin := rangeArg.C()
	bins_outArg, bins_outFin := internal.WrapNumberPtr[C.int, int32](bins_out)
	width_outArg, width_outFin := internal.WrapNumberPtr[C.double, float64](width_out)
	C.ImPlot_CalculateBins_S16Ptr(valuesArg, C.int(count), C.ImPlotBin(meth), internal.ReinterpretCast[C.ImPlotRange](rangeArgArg), bins_outArg, width_outArg)

	valuesFin()
	rangeArgFin()
	bins_outFin()
	width_outFin()
}

func CalculateBinsS32Ptr(values *int32, count int32, meth Bin, rangeArg Range, bins_out *int32, width_out *float64) {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS32, int32](values)
	rangeArgArg, rangeArgFin := rangeArg.C()
	bins_outArg, bins_outFin := internal.WrapNumberPtr[C.int, int32](bins_out)
	width_outArg, width_outFin := internal.WrapNumberPtr[C.double, float64](width_out)
	C.ImPlot_CalculateBins_S32Ptr(valuesArg, C.int(count), C.ImPlotBin(meth), internal.ReinterpretCast[C.ImPlotRange](rangeArgArg), bins_outArg, width_outArg)

	valuesFin()
	rangeArgFin()
	bins_outFin()
	width_outFin()
}

func CalculateBinsS64Ptr(values []int64, count int32, meth Bin, rangeArg Range, bins_out *int32, width_out *float64) {
	rangeArgArg, rangeArgFin := rangeArg.C()
	bins_outArg, bins_outFin := internal.WrapNumberPtr[C.int, int32](bins_out)
	width_outArg, width_outFin := internal.WrapNumberPtr[C.double, float64](width_out)
	C.ImPlot_CalculateBins_S64Ptr((*C.longlong)(&(values[0])), C.int(count), C.ImPlotBin(meth), internal.ReinterpretCast[C.ImPlotRange](rangeArgArg), bins_outArg, width_outArg)

	rangeArgFin()
	bins_outFin()
	width_outFin()
}

func CalculateBinsS8Ptr(values *int8, count int32, meth Bin, rangeArg Range, bins_out *int32, width_out *float64) {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS8, int8](values)
	rangeArgArg, rangeArgFin := rangeArg.C()
	bins_outArg, bins_outFin := internal.WrapNumberPtr[C.int, int32](bins_out)
	width_outArg, width_outFin := internal.WrapNumberPtr[C.double, float64](width_out)
	C.ImPlot_CalculateBins_S8Ptr(valuesArg, C.int(count), C.ImPlotBin(meth), internal.ReinterpretCast[C.ImPlotRange](rangeArgArg), bins_outArg, width_outArg)

	valuesFin()
	rangeArgFin()
	bins_outFin()
	width_outFin()
}

func CalculateBinsU16Ptr(values *uint16, count int32, meth Bin, rangeArg Range, bins_out *int32, width_out *float64) {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU16, uint16](values)
	rangeArgArg, rangeArgFin := rangeArg.C()
	bins_outArg, bins_outFin := internal.WrapNumberPtr[C.int, int32](bins_out)
	width_outArg, width_outFin := internal.WrapNumberPtr[C.double, float64](width_out)
	C.ImPlot_CalculateBins_U16Ptr(valuesArg, C.int(count), C.ImPlotBin(meth), internal.ReinterpretCast[C.ImPlotRange](rangeArgArg), bins_outArg, width_outArg)

	valuesFin()
	rangeArgFin()
	bins_outFin()
	width_outFin()
}

func CalculateBinsU32Ptr(values *uint32, count int32, meth Bin, rangeArg Range, bins_out *int32, width_out *float64) {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU32, uint32](values)
	rangeArgArg, rangeArgFin := rangeArg.C()
	bins_outArg, bins_outFin := internal.WrapNumberPtr[C.int, int32](bins_out)
	width_outArg, width_outFin := internal.WrapNumberPtr[C.double, float64](width_out)
	C.ImPlot_CalculateBins_U32Ptr(valuesArg, C.int(count), C.ImPlotBin(meth), internal.ReinterpretCast[C.ImPlotRange](rangeArgArg), bins_outArg, width_outArg)

	valuesFin()
	rangeArgFin()
	bins_outFin()
	width_outFin()
}

func CalculateBinsU64Ptr(values []uint64, count int32, meth Bin, rangeArg Range, bins_out *int32, width_out *float64) {
	rangeArgArg, rangeArgFin := rangeArg.C()
	bins_outArg, bins_outFin := internal.WrapNumberPtr[C.int, int32](bins_out)
	width_outArg, width_outFin := internal.WrapNumberPtr[C.double, float64](width_out)
	C.ImPlot_CalculateBins_U64Ptr((*C.ulonglong)(&(values[0])), C.int(count), C.ImPlotBin(meth), internal.ReinterpretCast[C.ImPlotRange](rangeArgArg), bins_outArg, width_outArg)

	rangeArgFin()
	bins_outFin()
	width_outFin()
}

func CalculateBinsU8Ptr(values *byte, count int32, meth Bin, rangeArg Range, bins_out *int32, width_out *float64) {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU8, byte](values)
	rangeArgArg, rangeArgFin := rangeArg.C()
	bins_outArg, bins_outFin := internal.WrapNumberPtr[C.int, int32](bins_out)
	width_outArg, width_outFin := internal.WrapNumberPtr[C.double, float64](width_out)
	C.ImPlot_CalculateBins_U8Ptr(valuesArg, C.int(count), C.ImPlotBin(meth), internal.ReinterpretCast[C.ImPlotRange](rangeArgArg), bins_outArg, width_outArg)

	valuesFin()
	rangeArgFin()
	bins_outFin()
	width_outFin()
}

func CalculateBinsdoublePtr(values *float64, count int32, meth Bin, rangeArg Range, bins_out *int32, width_out *float64) {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.double, float64](values)
	rangeArgArg, rangeArgFin := rangeArg.C()
	bins_outArg, bins_outFin := internal.WrapNumberPtr[C.int, int32](bins_out)
	width_outArg, width_outFin := internal.WrapNumberPtr[C.double, float64](width_out)
	C.ImPlot_CalculateBins_doublePtr(valuesArg, C.int(count), C.ImPlotBin(meth), internal.ReinterpretCast[C.ImPlotRange](rangeArgArg), bins_outArg, width_outArg)

	valuesFin()
	rangeArgFin()
	bins_outFin()
	width_outFin()
}

func CancelPlotSelection() {
	C.ImPlot_CancelPlotSelection()
}

func CeilTime(t PlotTime, unit TimeUnit) PlotTime {
	pOut := new(PlotTime)
	pOutArg, pOutFin := internal.Wrap(pOut)

	C.ImPlot_CeilTime(internal.ReinterpretCast[*C.ImPlotTime](pOutArg), internal.ReinterpretCast[C.ImPlotTime](t.ToC()), C.ImPlotTimeUnit(unit))

	pOutFin()

	return *pOut
}

func ClampLabelPos(pos imgui.Vec2, size imgui.Vec2, Min imgui.Vec2, Max imgui.Vec2) imgui.Vec2 {
	pOut := new(imgui.Vec2)
	pOutArg, pOutFin := internal.Wrap(pOut)

	C.ImPlot_ClampLabelPos(internal.ReinterpretCast[*C.ImVec2](pOutArg), internal.ReinterpretCast[C.ImVec2](pos.ToC()), internal.ReinterpretCast[C.ImVec2](size.ToC()), internal.ReinterpretCast[C.ImVec2](Min.ToC()), internal.ReinterpretCast[C.ImVec2](Max.ToC()))

	pOutFin()

	return *pOut
}

func ClampLegendRect(legend_rect *imgui.Rect, outer_rect imgui.Rect, pad imgui.Vec2) bool {
	legend_rectArg, legend_rectFin := internal.Wrap(legend_rect)

	defer func() {
		legend_rectFin()
	}()
	return C.ImPlot_ClampLegendRect(internal.ReinterpretCast[*C.ImRect](legend_rectArg), internal.ReinterpretCast[C.ImRect](outer_rect.ToC()), internal.ReinterpretCast[C.ImVec2](pad.ToC())) == C.bool(true)
}

// ColormapButtonV parameter default value hint:
// size: ImVec2(0,0)
// cmap: -1
func ColormapButtonV(label string, size imgui.Vec2, cmap Colormap) bool {
	labelArg, labelFin := internal.WrapString[C.char](label)

	defer func() {
		labelFin()
	}()
	return C.ImPlot_ColormapButton(labelArg, internal.ReinterpretCast[C.ImVec2](size.ToC()), C.ImPlotColormap(cmap)) == C.bool(true)
}

func ColormapIcon(cmap Colormap) {
	C.ImPlot_ColormapIcon(C.ImPlotColormap(cmap))
}

// ColormapScaleV parameter default value hint:
// size: ImVec2(0,0)
// format: "%g"
// flags: 0
// cmap: -1
func ColormapScaleV(label string, scale_min float64, scale_max float64, size imgui.Vec2, format string, flags ColormapScaleFlags, cmap Colormap) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	formatArg, formatFin := internal.WrapString[C.char](format)
	C.ImPlot_ColormapScale(labelArg, C.double(scale_min), C.double(scale_max), internal.ReinterpretCast[C.ImVec2](size.ToC()), formatArg, C.ImPlotColormapScaleFlags(flags), C.ImPlotColormap(cmap))

	labelFin()
	formatFin()
}

// ColormapSliderV parameter default value hint:
// out: nullptr
// format: ""
// cmap: -1
func ColormapSliderV(label string, t *float32, out *imgui.Vec4, format string, cmap Colormap) bool {
	labelArg, labelFin := internal.WrapString[C.char](label)
	tArg, tFin := internal.WrapNumberPtr[C.float, float32](t)
	outArg, outFin := internal.Wrap(out)
	formatArg, formatFin := internal.WrapString[C.char](format)

	defer func() {
		labelFin()
		tFin()
		outFin()
		formatFin()
	}()
	return C.ImPlot_ColormapSlider(labelArg, tArg, internal.ReinterpretCast[*C.ImVec4](outArg), formatArg, C.ImPlotColormap(cmap)) == C.bool(true)
}

func CombineDateTime(date_part PlotTime, time_part PlotTime) PlotTime {
	pOut := new(PlotTime)
	pOutArg, pOutFin := internal.Wrap(pOut)

	C.ImPlot_CombineDateTime(internal.ReinterpretCast[*C.ImPlotTime](pOutArg), internal.ReinterpretCast[C.ImPlotTime](date_part.ToC()), internal.ReinterpretCast[C.ImPlotTime](time_part.ToC()))

	pOutFin()

	return *pOut
}

func CreateContext() *Context {
	return NewContextFromC(C.ImPlot_CreateContext())
}

// DestroyContextV parameter default value hint:
// ctx: nullptr
func DestroyContextV(ctx *Context) {
	ctxArg, ctxFin := ctx.Handle()
	C.ImPlot_DestroyContext(internal.ReinterpretCast[*C.ImPlotContext](ctxArg))

	ctxFin()
}

// DragLineXV parameter default value hint:
// thickness: 1
// flags: 0
// out_clicked: nullptr
// out_hovered: nullptr
// held: nullptr
func DragLineXV(id int32, x *float64, col imgui.Vec4, thickness float32, flags DragToolFlags, out_clicked *bool, out_hovered *bool, held *bool) bool {
	xArg, xFin := internal.WrapNumberPtr[C.double, float64](x)
	out_clickedArg, out_clickedFin := internal.WrapNumberPtr[C.bool, bool](out_clicked)
	out_hoveredArg, out_hoveredFin := internal.WrapNumberPtr[C.bool, bool](out_hovered)
	heldArg, heldFin := internal.WrapNumberPtr[C.bool, bool](held)

	defer func() {
		xFin()
		out_clickedFin()
		out_hoveredFin()
		heldFin()
	}()
	return C.ImPlot_DragLineX(C.int(id), xArg, internal.ReinterpretCast[C.ImVec4](col.ToC()), C.float(thickness), C.ImPlotDragToolFlags(flags), out_clickedArg, out_hoveredArg, heldArg) == C.bool(true)
}

// DragLineYV parameter default value hint:
// thickness: 1
// flags: 0
// out_clicked: nullptr
// out_hovered: nullptr
// held: nullptr
func DragLineYV(id int32, y *float64, col imgui.Vec4, thickness float32, flags DragToolFlags, out_clicked *bool, out_hovered *bool, held *bool) bool {
	yArg, yFin := internal.WrapNumberPtr[C.double, float64](y)
	out_clickedArg, out_clickedFin := internal.WrapNumberPtr[C.bool, bool](out_clicked)
	out_hoveredArg, out_hoveredFin := internal.WrapNumberPtr[C.bool, bool](out_hovered)
	heldArg, heldFin := internal.WrapNumberPtr[C.bool, bool](held)

	defer func() {
		yFin()
		out_clickedFin()
		out_hoveredFin()
		heldFin()
	}()
	return C.ImPlot_DragLineY(C.int(id), yArg, internal.ReinterpretCast[C.ImVec4](col.ToC()), C.float(thickness), C.ImPlotDragToolFlags(flags), out_clickedArg, out_hoveredArg, heldArg) == C.bool(true)
}

// DragPointV parameter default value hint:
// size: 4
// flags: 0
// out_clicked: nullptr
// out_hovered: nullptr
// held: nullptr
func DragPointV(id int32, x *float64, y *float64, col imgui.Vec4, size float32, flags DragToolFlags, out_clicked *bool, out_hovered *bool, held *bool) bool {
	xArg, xFin := internal.WrapNumberPtr[C.double, float64](x)
	yArg, yFin := internal.WrapNumberPtr[C.double, float64](y)
	out_clickedArg, out_clickedFin := internal.WrapNumberPtr[C.bool, bool](out_clicked)
	out_hoveredArg, out_hoveredFin := internal.WrapNumberPtr[C.bool, bool](out_hovered)
	heldArg, heldFin := internal.WrapNumberPtr[C.bool, bool](held)

	defer func() {
		xFin()
		yFin()
		out_clickedFin()
		out_hoveredFin()
		heldFin()
	}()
	return C.ImPlot_DragPoint(C.int(id), xArg, yArg, internal.ReinterpretCast[C.ImVec4](col.ToC()), C.float(size), C.ImPlotDragToolFlags(flags), out_clickedArg, out_hoveredArg, heldArg) == C.bool(true)
}

// DragRectV parameter default value hint:
// flags: 0
// out_clicked: nullptr
// out_hovered: nullptr
// held: nullptr
func DragRectV(id int32, x1 *float64, y1 *float64, x2 *float64, y2 *float64, col imgui.Vec4, flags DragToolFlags, out_clicked *bool, out_hovered *bool, held *bool) bool {
	x1Arg, x1Fin := internal.WrapNumberPtr[C.double, float64](x1)
	y1Arg, y1Fin := internal.WrapNumberPtr[C.double, float64](y1)
	x2Arg, x2Fin := internal.WrapNumberPtr[C.double, float64](x2)
	y2Arg, y2Fin := internal.WrapNumberPtr[C.double, float64](y2)
	out_clickedArg, out_clickedFin := internal.WrapNumberPtr[C.bool, bool](out_clicked)
	out_hoveredArg, out_hoveredFin := internal.WrapNumberPtr[C.bool, bool](out_hovered)
	heldArg, heldFin := internal.WrapNumberPtr[C.bool, bool](held)

	defer func() {
		x1Fin()
		y1Fin()
		x2Fin()
		y2Fin()
		out_clickedFin()
		out_hoveredFin()
		heldFin()
	}()
	return C.ImPlot_DragRect(C.int(id), x1Arg, y1Arg, x2Arg, y2Arg, internal.ReinterpretCast[C.ImVec4](col.ToC()), C.ImPlotDragToolFlags(flags), out_clickedArg, out_hoveredArg, heldArg) == C.bool(true)
}

func EndAlignedPlots() {
	C.ImPlot_EndAlignedPlots()
}

func EndDragDropSource() {
	C.ImPlot_EndDragDropSource()
}

func EndDragDropTarget() {
	C.ImPlot_EndDragDropTarget()
}

func EndItem() {
	C.ImPlot_EndItem()
}

func EndLegendPopup() {
	C.ImPlot_EndLegendPopup()
}

func EndPlot() {
	C.ImPlot_EndPlot()
}

func EndSubplots() {
	C.ImPlot_EndSubplots()
}

func FitPoint(p PlotPoint) {
	C.ImPlot_FitPoint(internal.ReinterpretCast[C.ImPlotPoint](p.ToC()))
}

func FitPointX(x float64) {
	C.ImPlot_FitPointX(C.double(x))
}

func FitPointY(y float64) {
	C.ImPlot_FitPointY(C.double(y))
}

func FitThisFrame() bool {
	return C.ImPlot_FitThisFrame() == C.bool(true)
}

func FloorTime(t PlotTime, unit TimeUnit) PlotTime {
	pOut := new(PlotTime)
	pOutArg, pOutFin := internal.Wrap(pOut)

	C.ImPlot_FloorTime(internal.ReinterpretCast[*C.ImPlotTime](pOutArg), internal.ReinterpretCast[C.ImPlotTime](t.ToC()), C.ImPlotTimeUnit(unit))

	pOutFin()

	return *pOut
}

func FormatDate(t PlotTime, buffer string, size int32, fmt DateFmt, use_iso_8601 bool) int32 {
	bufferArg, bufferFin := internal.WrapString[C.char](buffer)

	defer func() {
		bufferFin()
	}()
	return int32(C.ImPlot_FormatDate(internal.ReinterpretCast[C.ImPlotTime](t.ToC()), bufferArg, C.int(size), C.ImPlotDateFmt(fmt), C.bool(use_iso_8601)))
}

func FormatDateTime(t PlotTime, buffer string, size int32, fmt DateTimeSpec) int32 {
	bufferArg, bufferFin := internal.WrapString[C.char](buffer)
	fmtArg, fmtFin := fmt.C()

	defer func() {
		bufferFin()
		fmtFin()
	}()
	return int32(C.ImPlot_FormatDateTime(internal.ReinterpretCast[C.ImPlotTime](t.ToC()), bufferArg, C.int(size), internal.ReinterpretCast[C.ImPlotDateTimeSpec](fmtArg)))
}

func FormatTime(t PlotTime, buffer string, size int32, fmt TimeFmt, use_24_hr_clk bool) int32 {
	bufferArg, bufferFin := internal.WrapString[C.char](buffer)

	defer func() {
		bufferFin()
	}()
	return int32(C.ImPlot_FormatTime(internal.ReinterpretCast[C.ImPlotTime](t.ToC()), bufferArg, C.int(size), C.ImPlotTimeFmt(fmt), C.bool(use_24_hr_clk)))
}

func FormatterDefault(value float64, buff string, size int32, data uintptr) int32 {
	buffArg, buffFin := internal.WrapString[C.char](buff)

	defer func() {
		buffFin()
	}()
	return int32(C.wrap_ImPlot_Formatter_Default(C.double(value), buffArg, C.int(size), C.uintptr_t(data)))
}

func FormatterLogit(value float64, buff string, size int32, noname1 uintptr) int32 {
	buffArg, buffFin := internal.WrapString[C.char](buff)

	defer func() {
		buffFin()
	}()
	return int32(C.wrap_ImPlot_Formatter_Logit(C.double(value), buffArg, C.int(size), C.uintptr_t(noname1)))
}

func FormatterTime(noname1 float64, buff string, size int32, data uintptr) int32 {
	buffArg, buffFin := internal.WrapString[C.char](buff)

	defer func() {
		buffFin()
	}()
	return int32(C.wrap_ImPlot_Formatter_Time(C.double(noname1), buffArg, C.int(size), C.uintptr_t(data)))
}

func GetAutoColor(idx Col) imgui.Vec4 {
	pOut := new(imgui.Vec4)
	pOutArg, pOutFin := internal.Wrap(pOut)

	C.ImPlot_GetAutoColor(internal.ReinterpretCast[*C.ImVec4](pOutArg), C.ImPlotCol(idx))

	pOutFin()

	return *pOut
}

// GetColormapColorV parameter default value hint:
// cmap: -1
func GetColormapColorV(idx int32, cmap Colormap) imgui.Vec4 {
	pOut := new(imgui.Vec4)
	pOutArg, pOutFin := internal.Wrap(pOut)

	C.ImPlot_GetColormapColor(internal.ReinterpretCast[*C.ImVec4](pOutArg), C.int(idx), C.ImPlotColormap(cmap))

	pOutFin()

	return *pOut
}

func GetColormapColorU32(idx int32, cmap Colormap) uint32 {
	return uint32(C.ImPlot_GetColormapColorU32(C.int(idx), C.ImPlotColormap(cmap)))
}

func GetColormapCount() int32 {
	return int32(C.ImPlot_GetColormapCount())
}

func GetColormapIndex(name string) Colormap {
	nameArg, nameFin := internal.WrapString[C.char](name)

	defer func() {
		nameFin()
	}()
	return Colormap(C.ImPlot_GetColormapIndex(nameArg))
}

func GetColormapName(cmap Colormap) string {
	return func() string {
		result := C.ImPlot_GetColormapName(C.ImPlotColormap(cmap))
		defer C.free(unsafe.Pointer(result))
		return C.GoString(result)
	}()
}

// GetColormapSizeV parameter default value hint:
// cmap: -1
func GetColormapSizeV(cmap Colormap) int32 {
	return int32(C.ImPlot_GetColormapSize(C.ImPlotColormap(cmap)))
}

func GetCurrentContext() *Context {
	return NewContextFromC(C.ImPlot_GetCurrentContext())
}

func GetCurrentItem() *Item {
	return NewItemFromC(C.ImPlot_GetCurrentItem())
}

func GetCurrentPlot() *Plot {
	return NewPlotFromC(C.ImPlot_GetCurrentPlot())
}

func GetDaysInMonth(year int32, month int32) int32 {
	return int32(C.ImPlot_GetDaysInMonth(C.int(year), C.int(month)))
}

func GetInputMap() *InputMap {
	return NewInputMapFromC(C.ImPlot_GetInputMap())
}

func GetItem(label_id string) *Item {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)

	defer func() {
		label_idFin()
	}()
	return NewItemFromC(C.ImPlot_GetItem(label_idArg))
}

func GetItemData() *NextItemData {
	return NewNextItemDataFromC(C.ImPlot_GetItemData())
}

func GetLastItemColor() imgui.Vec4 {
	pOut := new(imgui.Vec4)
	pOutArg, pOutFin := internal.Wrap(pOut)

	C.ImPlot_GetLastItemColor(internal.ReinterpretCast[*C.ImVec4](pOutArg))

	pOutFin()

	return *pOut
}

// GetLocationPosV parameter default value hint:
// pad: ImVec2(0,0)
func GetLocationPosV(outer_rect imgui.Rect, inner_size imgui.Vec2, location Location, pad imgui.Vec2) imgui.Vec2 {
	pOut := new(imgui.Vec2)
	pOutArg, pOutFin := internal.Wrap(pOut)

	C.ImPlot_GetLocationPos(internal.ReinterpretCast[*C.ImVec2](pOutArg), internal.ReinterpretCast[C.ImRect](outer_rect.ToC()), internal.ReinterpretCast[C.ImVec2](inner_size.ToC()), C.ImPlotLocation(location), internal.ReinterpretCast[C.ImVec2](pad.ToC()))

	pOutFin()

	return *pOut
}

func GetMarkerName(idx Marker) string {
	return func() string {
		result := C.ImPlot_GetMarkerName(C.ImPlotMarker(idx))
		defer C.free(unsafe.Pointer(result))
		return C.GoString(result)
	}()
}

func GetPlot(title string) *Plot {
	titleArg, titleFin := internal.WrapString[C.char](title)

	defer func() {
		titleFin()
	}()
	return NewPlotFromC(C.ImPlot_GetPlot(titleArg))
}

func GetPlotDrawList() *imgui.DrawList {
	return imgui.NewDrawListFromC(C.ImPlot_GetPlotDrawList())
}

// GetPlotLimitsV parameter default value hint:
// x_axis: -1
// y_axis: -1
func GetPlotLimitsV(x_axis AxisEnum, y_axis AxisEnum) Rect {
	pOut := new(Rect)
	pOutArg, pOutFin := pOut.Handle()

	C.ImPlot_GetPlotLimits(internal.ReinterpretCast[*C.ImPlotRect](pOutArg), C.ImAxis(x_axis), C.ImAxis(y_axis))

	pOutFin()

	return *pOut
}

// GetPlotMousePosV parameter default value hint:
// x_axis: -1
// y_axis: -1
func GetPlotMousePosV(x_axis AxisEnum, y_axis AxisEnum) PlotPoint {
	pOut := new(PlotPoint)
	pOutArg, pOutFin := internal.Wrap(pOut)

	C.ImPlot_GetPlotMousePos(internal.ReinterpretCast[*C.ImPlotPoint](pOutArg), C.ImAxis(x_axis), C.ImAxis(y_axis))

	pOutFin()

	return *pOut
}

func GetPlotPos() imgui.Vec2 {
	pOut := new(imgui.Vec2)
	pOutArg, pOutFin := internal.Wrap(pOut)

	C.ImPlot_GetPlotPos(internal.ReinterpretCast[*C.ImVec2](pOutArg))

	pOutFin()

	return *pOut
}

// GetPlotSelectionV parameter default value hint:
// x_axis: -1
// y_axis: -1
func GetPlotSelectionV(x_axis AxisEnum, y_axis AxisEnum) Rect {
	pOut := new(Rect)
	pOutArg, pOutFin := pOut.Handle()

	C.ImPlot_GetPlotSelection(internal.ReinterpretCast[*C.ImPlotRect](pOutArg), C.ImAxis(x_axis), C.ImAxis(y_axis))

	pOutFin()

	return *pOut
}

func GetPlotSize() imgui.Vec2 {
	pOut := new(imgui.Vec2)
	pOutArg, pOutFin := internal.Wrap(pOut)

	C.ImPlot_GetPlotSize(internal.ReinterpretCast[*C.ImVec2](pOutArg))

	pOutFin()

	return *pOut
}

func GetStyle() *Style {
	return NewStyleFromC(C.ImPlot_GetStyle())
}

func GetStyleColorName(idx Col) string {
	return func() string {
		result := C.ImPlot_GetStyleColorName(C.ImPlotCol(idx))
		defer C.free(unsafe.Pointer(result))
		return C.GoString(result)
	}()
}

func GetStyleColorU32(idx Col) uint32 {
	return uint32(C.ImPlot_GetStyleColorU32(C.ImPlotCol(idx)))
}

func GetStyleColorVec4(idx Col) imgui.Vec4 {
	pOut := new(imgui.Vec4)
	pOutArg, pOutFin := internal.Wrap(pOut)

	C.ImPlot_GetStyleColorVec4(internal.ReinterpretCast[*C.ImVec4](pOutArg), C.ImPlotCol(idx))

	pOutFin()

	return *pOut
}

func GetYear(t PlotTime) int32 {
	return int32(C.ImPlot_GetYear(internal.ReinterpretCast[C.ImPlotTime](t.ToC())))
}

// HideNextItemV parameter default value hint:
// hidden: true
// cond: ImPlotCond_Once
func HideNextItemV(hidden bool, cond Cond) {
	C.ImPlot_HideNextItem(C.bool(hidden), C.ImPlotCond(cond))
}

// ImAlmostEqualV parameter default value hint:
// ulp: 2
func ImAlmostEqualV(v1 float64, v2 float64, ulp int32) bool {
	return C.ImPlot_ImAlmostEqual(C.double(v1), C.double(v2), C.int(ulp)) == C.bool(true)
}

func ImAlphaU32(col uint32, alpha float32) uint32 {
	return uint32(C.ImPlot_ImAlphaU32(C.ImU32(col), C.float(alpha)))
}

func ImAsinhFloat(x float32) float32 {
	return float32(C.ImPlot_ImAsinh_Float(C.float(x)))
}

func ImAsinhdouble(x float64) float64 {
	return float64(C.ImPlot_ImAsinh_double(C.double(x)))
}

func ImConstrainInf(val float64) float64 {
	return float64(C.ImPlot_ImConstrainInf(C.double(val)))
}

func ImConstrainLog(val float64) float64 {
	return float64(C.ImPlot_ImConstrainLog(C.double(val)))
}

func ImConstrainNan(val float64) float64 {
	return float64(C.ImPlot_ImConstrainNan(C.double(val)))
}

func ImConstrainTime(val float64) float64 {
	return float64(C.ImPlot_ImConstrainTime(C.double(val)))
}

func ImLerpU32(colors *uint32, size int32, t float32) uint32 {
	colorsArg, colorsFin := internal.WrapNumberPtr[C.ImU32, uint32](colors)

	defer func() {
		colorsFin()
	}()
	return uint32(C.ImPlot_ImLerpU32(colorsArg, C.int(size), C.float(t)))
}

func ImLog10Float(x float32) float32 {
	return float32(C.ImPlot_ImLog10_Float(C.float(x)))
}

func ImLog10double(x float64) float64 {
	return float64(C.ImPlot_ImLog10_double(C.double(x)))
}

func ImMaxArrayFloatPtr(values *float32, count int32) float32 {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.float, float32](values)

	defer func() {
		valuesFin()
	}()
	return float32(C.ImPlot_ImMaxArray_FloatPtr(valuesArg, C.int(count)))
}

func ImMaxArrayS16Ptr(values *int16, count int32) int16 {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS16, int16](values)

	defer func() {
		valuesFin()
	}()
	return int16(C.ImPlot_ImMaxArray_S16Ptr(valuesArg, C.int(count)))
}

func ImMaxArrayS32Ptr(values *int32, count int32) int {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS32, int32](values)

	defer func() {
		valuesFin()
	}()
	return int(C.ImPlot_ImMaxArray_S32Ptr(valuesArg, C.int(count)))
}

func ImMaxArrayS64Ptr(values []int64, count int32) int64 {
	return int64(C.ImPlot_ImMaxArray_S64Ptr((*C.longlong)(&(values[0])), C.int(count)))
}

func ImMaxArrayS8Ptr(values *int8, count int32) int {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS8, int8](values)

	defer func() {
		valuesFin()
	}()
	return int(C.ImPlot_ImMaxArray_S8Ptr(valuesArg, C.int(count)))
}

func ImMaxArrayU16Ptr(values *uint16, count int32) uint16 {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU16, uint16](values)

	defer func() {
		valuesFin()
	}()
	return uint16(C.ImPlot_ImMaxArray_U16Ptr(valuesArg, C.int(count)))
}

func ImMaxArrayU32Ptr(values *uint32, count int32) uint32 {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU32, uint32](values)

	defer func() {
		valuesFin()
	}()
	return uint32(C.ImPlot_ImMaxArray_U32Ptr(valuesArg, C.int(count)))
}

func ImMaxArrayU64Ptr(values []uint64, count int32) uint64 {
	return uint64(C.ImPlot_ImMaxArray_U64Ptr((*C.ulonglong)(&(values[0])), C.int(count)))
}

func ImMaxArrayU8Ptr(values *byte, count int32) byte {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU8, byte](values)

	defer func() {
		valuesFin()
	}()
	return byte(C.ImPlot_ImMaxArray_U8Ptr(valuesArg, C.int(count)))
}

func ImMaxArraydoublePtr(values *float64, count int32) float64 {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.double, float64](values)

	defer func() {
		valuesFin()
	}()
	return float64(C.ImPlot_ImMaxArray_doublePtr(valuesArg, C.int(count)))
}

func ImMeanFloatPtr(values *float32, count int32) float64 {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.float, float32](values)

	defer func() {
		valuesFin()
	}()
	return float64(C.ImPlot_ImMean_FloatPtr(valuesArg, C.int(count)))
}

func ImMeanS16Ptr(values *int16, count int32) float64 {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS16, int16](values)

	defer func() {
		valuesFin()
	}()
	return float64(C.ImPlot_ImMean_S16Ptr(valuesArg, C.int(count)))
}

func ImMeanS32Ptr(values *int32, count int32) float64 {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS32, int32](values)

	defer func() {
		valuesFin()
	}()
	return float64(C.ImPlot_ImMean_S32Ptr(valuesArg, C.int(count)))
}

func ImMeanS64Ptr(values []int64, count int32) float64 {
	return float64(C.ImPlot_ImMean_S64Ptr((*C.longlong)(&(values[0])), C.int(count)))
}

func ImMeanS8Ptr(values *int8, count int32) float64 {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS8, int8](values)

	defer func() {
		valuesFin()
	}()
	return float64(C.ImPlot_ImMean_S8Ptr(valuesArg, C.int(count)))
}

func ImMeanU16Ptr(values *uint16, count int32) float64 {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU16, uint16](values)

	defer func() {
		valuesFin()
	}()
	return float64(C.ImPlot_ImMean_U16Ptr(valuesArg, C.int(count)))
}

func ImMeanU32Ptr(values *uint32, count int32) float64 {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU32, uint32](values)

	defer func() {
		valuesFin()
	}()
	return float64(C.ImPlot_ImMean_U32Ptr(valuesArg, C.int(count)))
}

func ImMeanU64Ptr(values []uint64, count int32) float64 {
	return float64(C.ImPlot_ImMean_U64Ptr((*C.ulonglong)(&(values[0])), C.int(count)))
}

func ImMeanU8Ptr(values *byte, count int32) float64 {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU8, byte](values)

	defer func() {
		valuesFin()
	}()
	return float64(C.ImPlot_ImMean_U8Ptr(valuesArg, C.int(count)))
}

func ImMeandoublePtr(values *float64, count int32) float64 {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.double, float64](values)

	defer func() {
		valuesFin()
	}()
	return float64(C.ImPlot_ImMean_doublePtr(valuesArg, C.int(count)))
}

func ImMinArrayFloatPtr(values *float32, count int32) float32 {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.float, float32](values)

	defer func() {
		valuesFin()
	}()
	return float32(C.ImPlot_ImMinArray_FloatPtr(valuesArg, C.int(count)))
}

func ImMinArrayS16Ptr(values *int16, count int32) int16 {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS16, int16](values)

	defer func() {
		valuesFin()
	}()
	return int16(C.ImPlot_ImMinArray_S16Ptr(valuesArg, C.int(count)))
}

func ImMinArrayS32Ptr(values *int32, count int32) int {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS32, int32](values)

	defer func() {
		valuesFin()
	}()
	return int(C.ImPlot_ImMinArray_S32Ptr(valuesArg, C.int(count)))
}

func ImMinArrayS64Ptr(values []int64, count int32) int64 {
	return int64(C.ImPlot_ImMinArray_S64Ptr((*C.longlong)(&(values[0])), C.int(count)))
}

func ImMinArrayS8Ptr(values *int8, count int32) int {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS8, int8](values)

	defer func() {
		valuesFin()
	}()
	return int(C.ImPlot_ImMinArray_S8Ptr(valuesArg, C.int(count)))
}

func ImMinArrayU16Ptr(values *uint16, count int32) uint16 {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU16, uint16](values)

	defer func() {
		valuesFin()
	}()
	return uint16(C.ImPlot_ImMinArray_U16Ptr(valuesArg, C.int(count)))
}

func ImMinArrayU32Ptr(values *uint32, count int32) uint32 {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU32, uint32](values)

	defer func() {
		valuesFin()
	}()
	return uint32(C.ImPlot_ImMinArray_U32Ptr(valuesArg, C.int(count)))
}

func ImMinArrayU64Ptr(values []uint64, count int32) uint64 {
	return uint64(C.ImPlot_ImMinArray_U64Ptr((*C.ulonglong)(&(values[0])), C.int(count)))
}

func ImMinArrayU8Ptr(values *byte, count int32) byte {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU8, byte](values)

	defer func() {
		valuesFin()
	}()
	return byte(C.ImPlot_ImMinArray_U8Ptr(valuesArg, C.int(count)))
}

func ImMinArraydoublePtr(values *float64, count int32) float64 {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.double, float64](values)

	defer func() {
		valuesFin()
	}()
	return float64(C.ImPlot_ImMinArray_doublePtr(valuesArg, C.int(count)))
}

func ImMinMaxArrayFloatPtr(values *float32, count int32, min_out *float32, max_out *float32) {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.float, float32](values)
	min_outArg, min_outFin := internal.WrapNumberPtr[C.float, float32](min_out)
	max_outArg, max_outFin := internal.WrapNumberPtr[C.float, float32](max_out)
	C.ImPlot_ImMinMaxArray_FloatPtr(valuesArg, C.int(count), min_outArg, max_outArg)

	valuesFin()
	min_outFin()
	max_outFin()
}

func ImMinMaxArrayS16Ptr(values *int16, count int32, min_out *int16, max_out *int16) {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS16, int16](values)
	min_outArg, min_outFin := internal.WrapNumberPtr[C.ImS16, int16](min_out)
	max_outArg, max_outFin := internal.WrapNumberPtr[C.ImS16, int16](max_out)
	C.ImPlot_ImMinMaxArray_S16Ptr(valuesArg, C.int(count), min_outArg, max_outArg)

	valuesFin()
	min_outFin()
	max_outFin()
}

func ImMinMaxArrayS32Ptr(values *int32, count int32, min_out *int32, max_out *int32) {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS32, int32](values)
	min_outArg, min_outFin := internal.WrapNumberPtr[C.ImS32, int32](min_out)
	max_outArg, max_outFin := internal.WrapNumberPtr[C.ImS32, int32](max_out)
	C.ImPlot_ImMinMaxArray_S32Ptr(valuesArg, C.int(count), min_outArg, max_outArg)

	valuesFin()
	min_outFin()
	max_outFin()
}

func ImMinMaxArrayS64Ptr(values []int64, count int32, min_out *int64, max_out *int64) {
	min_outArg, min_outFin := internal.WrapNumberPtr[C.ImS64, int64](min_out)
	max_outArg, max_outFin := internal.WrapNumberPtr[C.ImS64, int64](max_out)
	C.ImPlot_ImMinMaxArray_S64Ptr((*C.longlong)(&(values[0])), C.int(count), min_outArg, max_outArg)

	min_outFin()
	max_outFin()
}

func ImMinMaxArrayS8Ptr(values *int8, count int32, min_out *int8, max_out *int8) {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS8, int8](values)
	min_outArg, min_outFin := internal.WrapNumberPtr[C.ImS8, int8](min_out)
	max_outArg, max_outFin := internal.WrapNumberPtr[C.ImS8, int8](max_out)
	C.ImPlot_ImMinMaxArray_S8Ptr(valuesArg, C.int(count), min_outArg, max_outArg)

	valuesFin()
	min_outFin()
	max_outFin()
}

func ImMinMaxArrayU16Ptr(values *uint16, count int32, min_out *uint16, max_out *uint16) {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU16, uint16](values)
	min_outArg, min_outFin := internal.WrapNumberPtr[C.ImU16, uint16](min_out)
	max_outArg, max_outFin := internal.WrapNumberPtr[C.ImU16, uint16](max_out)
	C.ImPlot_ImMinMaxArray_U16Ptr(valuesArg, C.int(count), min_outArg, max_outArg)

	valuesFin()
	min_outFin()
	max_outFin()
}

func ImMinMaxArrayU32Ptr(values *uint32, count int32, min_out *uint32, max_out *uint32) {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU32, uint32](values)
	min_outArg, min_outFin := internal.WrapNumberPtr[C.ImU32, uint32](min_out)
	max_outArg, max_outFin := internal.WrapNumberPtr[C.ImU32, uint32](max_out)
	C.ImPlot_ImMinMaxArray_U32Ptr(valuesArg, C.int(count), min_outArg, max_outArg)

	valuesFin()
	min_outFin()
	max_outFin()
}

func ImMinMaxArrayU64Ptr(values []uint64, count int32, min_out *uint64, max_out *uint64) {
	min_outArg, min_outFin := internal.WrapNumberPtr[C.ImU64, uint64](min_out)
	max_outArg, max_outFin := internal.WrapNumberPtr[C.ImU64, uint64](max_out)
	C.ImPlot_ImMinMaxArray_U64Ptr((*C.ulonglong)(&(values[0])), C.int(count), min_outArg, max_outArg)

	min_outFin()
	max_outFin()
}

func ImMinMaxArrayU8Ptr(values *byte, count int32, min_out *byte, max_out *byte) {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU8, byte](values)
	min_outArg, min_outFin := internal.WrapNumberPtr[C.ImU8, byte](min_out)
	max_outArg, max_outFin := internal.WrapNumberPtr[C.ImU8, byte](max_out)
	C.ImPlot_ImMinMaxArray_U8Ptr(valuesArg, C.int(count), min_outArg, max_outArg)

	valuesFin()
	min_outFin()
	max_outFin()
}

func ImMinMaxArraydoublePtr(values *float64, count int32, min_out *float64, max_out *float64) {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.double, float64](values)
	min_outArg, min_outFin := internal.WrapNumberPtr[C.double, float64](min_out)
	max_outArg, max_outFin := internal.WrapNumberPtr[C.double, float64](max_out)
	C.ImPlot_ImMinMaxArray_doublePtr(valuesArg, C.int(count), min_outArg, max_outArg)

	valuesFin()
	min_outFin()
	max_outFin()
}

func ImMixU32(a uint32, b uint32, s uint32) uint32 {
	return uint32(C.ImPlot_ImMixU32(C.ImU32(a), C.ImU32(b), C.ImU32(s)))
}

func ImNan(val float64) bool {
	return C.ImPlot_ImNan(C.double(val)) == C.bool(true)
}

func ImNanOrInf(val float64) bool {
	return C.ImPlot_ImNanOrInf(C.double(val)) == C.bool(true)
}

func ImOverlapsFloat(min_a float32, max_a float32, min_b float32, max_b float32) bool {
	return C.ImPlot_ImOverlaps_Float(C.float(min_a), C.float(max_a), C.float(min_b), C.float(max_b)) == C.bool(true)
}

func ImOverlapsS16(min_a int16, max_a int16, min_b int16, max_b int16) bool {
	return C.ImPlot_ImOverlaps_S16(C.ImS16(min_a), C.ImS16(max_a), C.ImS16(min_b), C.ImS16(max_b)) == C.bool(true)
}

func ImOverlapsS32(min_a int, max_a int, min_b int, max_b int) bool {
	return C.ImPlot_ImOverlaps_S32(C.ImS32(min_a), C.ImS32(max_a), C.ImS32(min_b), C.ImS32(max_b)) == C.bool(true)
}

func ImOverlapsS64(min_a int64, max_a int64, min_b int64, max_b int64) bool {
	return C.ImPlot_ImOverlaps_S64(C.ImS64(min_a), C.ImS64(max_a), C.ImS64(min_b), C.ImS64(max_b)) == C.bool(true)
}

func ImOverlapsS8(min_a int, max_a int, min_b int, max_b int) bool {
	return C.ImPlot_ImOverlaps_S8(C.ImS8(min_a), C.ImS8(max_a), C.ImS8(min_b), C.ImS8(max_b)) == C.bool(true)
}

func ImOverlapsU16(min_a uint16, max_a uint16, min_b uint16, max_b uint16) bool {
	return C.ImPlot_ImOverlaps_U16(C.ImU16(min_a), C.ImU16(max_a), C.ImU16(min_b), C.ImU16(max_b)) == C.bool(true)
}

func ImOverlapsU32(min_a uint32, max_a uint32, min_b uint32, max_b uint32) bool {
	return C.ImPlot_ImOverlaps_U32(C.ImU32(min_a), C.ImU32(max_a), C.ImU32(min_b), C.ImU32(max_b)) == C.bool(true)
}

func ImOverlapsU64(min_a uint64, max_a uint64, min_b uint64, max_b uint64) bool {
	return C.ImPlot_ImOverlaps_U64(C.ImU64(min_a), C.ImU64(max_a), C.ImU64(min_b), C.ImU64(max_b)) == C.bool(true)
}

func ImOverlapsU8(min_a byte, max_a byte, min_b byte, max_b byte) bool {
	return C.ImPlot_ImOverlaps_U8(C.ImU8(min_a), C.ImU8(max_a), C.ImU8(min_b), C.ImU8(max_b)) == C.bool(true)
}

func ImOverlapsdouble(min_a float64, max_a float64, min_b float64, max_b float64) bool {
	return C.ImPlot_ImOverlaps_double(C.double(min_a), C.double(max_a), C.double(min_b), C.double(max_b)) == C.bool(true)
}

func ImPosMod(l int32, r int32) int32 {
	return int32(C.ImPlot_ImPosMod(C.int(l), C.int(r)))
}

func ImRemap01Float(x float32, x0 float32, x1 float32) float32 {
	return float32(C.ImPlot_ImRemap01_Float(C.float(x), C.float(x0), C.float(x1)))
}

func ImRemap01S16(x int16, x0 int16, x1 int16) int16 {
	return int16(C.ImPlot_ImRemap01_S16(C.ImS16(x), C.ImS16(x0), C.ImS16(x1)))
}

func ImRemap01S32(x int, x0 int, x1 int) int {
	return int(C.ImPlot_ImRemap01_S32(C.ImS32(x), C.ImS32(x0), C.ImS32(x1)))
}

func ImRemap01S64(x int64, x0 int64, x1 int64) int64 {
	return int64(C.ImPlot_ImRemap01_S64(C.ImS64(x), C.ImS64(x0), C.ImS64(x1)))
}

func ImRemap01S8(x int, x0 int, x1 int) int {
	return int(C.ImPlot_ImRemap01_S8(C.ImS8(x), C.ImS8(x0), C.ImS8(x1)))
}

func ImRemap01U16(x uint16, x0 uint16, x1 uint16) uint16 {
	return uint16(C.ImPlot_ImRemap01_U16(C.ImU16(x), C.ImU16(x0), C.ImU16(x1)))
}

func ImRemap01U32(x uint32, x0 uint32, x1 uint32) uint32 {
	return uint32(C.ImPlot_ImRemap01_U32(C.ImU32(x), C.ImU32(x0), C.ImU32(x1)))
}

func ImRemap01U64(x uint64, x0 uint64, x1 uint64) uint64 {
	return uint64(C.ImPlot_ImRemap01_U64(C.ImU64(x), C.ImU64(x0), C.ImU64(x1)))
}

func ImRemap01U8(x byte, x0 byte, x1 byte) byte {
	return byte(C.ImPlot_ImRemap01_U8(C.ImU8(x), C.ImU8(x0), C.ImU8(x1)))
}

func ImRemap01double(x float64, x0 float64, x1 float64) float64 {
	return float64(C.ImPlot_ImRemap01_double(C.double(x), C.double(x0), C.double(x1)))
}

func ImRemapFloat(x float32, x0 float32, x1 float32, y0 float32, y1 float32) float32 {
	return float32(C.ImPlot_ImRemap_Float(C.float(x), C.float(x0), C.float(x1), C.float(y0), C.float(y1)))
}

func ImRemapS16(x int16, x0 int16, x1 int16, y0 int16, y1 int16) int16 {
	return int16(C.ImPlot_ImRemap_S16(C.ImS16(x), C.ImS16(x0), C.ImS16(x1), C.ImS16(y0), C.ImS16(y1)))
}

func ImRemapS32(x int, x0 int, x1 int, y0 int, y1 int) int {
	return int(C.ImPlot_ImRemap_S32(C.ImS32(x), C.ImS32(x0), C.ImS32(x1), C.ImS32(y0), C.ImS32(y1)))
}

func ImRemapS64(x int64, x0 int64, x1 int64, y0 int64, y1 int64) int64 {
	return int64(C.ImPlot_ImRemap_S64(C.ImS64(x), C.ImS64(x0), C.ImS64(x1), C.ImS64(y0), C.ImS64(y1)))
}

func ImRemapS8(x int, x0 int, x1 int, y0 int, y1 int) int {
	return int(C.ImPlot_ImRemap_S8(C.ImS8(x), C.ImS8(x0), C.ImS8(x1), C.ImS8(y0), C.ImS8(y1)))
}

func ImRemapU16(x uint16, x0 uint16, x1 uint16, y0 uint16, y1 uint16) uint16 {
	return uint16(C.ImPlot_ImRemap_U16(C.ImU16(x), C.ImU16(x0), C.ImU16(x1), C.ImU16(y0), C.ImU16(y1)))
}

func ImRemapU32(x uint32, x0 uint32, x1 uint32, y0 uint32, y1 uint32) uint32 {
	return uint32(C.ImPlot_ImRemap_U32(C.ImU32(x), C.ImU32(x0), C.ImU32(x1), C.ImU32(y0), C.ImU32(y1)))
}

func ImRemapU64(x uint64, x0 uint64, x1 uint64, y0 uint64, y1 uint64) uint64 {
	return uint64(C.ImPlot_ImRemap_U64(C.ImU64(x), C.ImU64(x0), C.ImU64(x1), C.ImU64(y0), C.ImU64(y1)))
}

func ImRemapU8(x byte, x0 byte, x1 byte, y0 byte, y1 byte) byte {
	return byte(C.ImPlot_ImRemap_U8(C.ImU8(x), C.ImU8(x0), C.ImU8(x1), C.ImU8(y0), C.ImU8(y1)))
}

func ImRemapdouble(x float64, x0 float64, x1 float64, y0 float64, y1 float64) float64 {
	return float64(C.ImPlot_ImRemap_double(C.double(x), C.double(x0), C.double(x1), C.double(y0), C.double(y1)))
}

func ImSinhFloat(x float32) float32 {
	return float32(C.ImPlot_ImSinh_Float(C.float(x)))
}

func ImSinhdouble(x float64) float64 {
	return float64(C.ImPlot_ImSinh_double(C.double(x)))
}

func ImStdDevFloatPtr(values *float32, count int32) float64 {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.float, float32](values)

	defer func() {
		valuesFin()
	}()
	return float64(C.ImPlot_ImStdDev_FloatPtr(valuesArg, C.int(count)))
}

func ImStdDevS16Ptr(values *int16, count int32) float64 {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS16, int16](values)

	defer func() {
		valuesFin()
	}()
	return float64(C.ImPlot_ImStdDev_S16Ptr(valuesArg, C.int(count)))
}

func ImStdDevS32Ptr(values *int32, count int32) float64 {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS32, int32](values)

	defer func() {
		valuesFin()
	}()
	return float64(C.ImPlot_ImStdDev_S32Ptr(valuesArg, C.int(count)))
}

func ImStdDevS64Ptr(values []int64, count int32) float64 {
	return float64(C.ImPlot_ImStdDev_S64Ptr((*C.longlong)(&(values[0])), C.int(count)))
}

func ImStdDevS8Ptr(values *int8, count int32) float64 {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS8, int8](values)

	defer func() {
		valuesFin()
	}()
	return float64(C.ImPlot_ImStdDev_S8Ptr(valuesArg, C.int(count)))
}

func ImStdDevU16Ptr(values *uint16, count int32) float64 {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU16, uint16](values)

	defer func() {
		valuesFin()
	}()
	return float64(C.ImPlot_ImStdDev_U16Ptr(valuesArg, C.int(count)))
}

func ImStdDevU32Ptr(values *uint32, count int32) float64 {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU32, uint32](values)

	defer func() {
		valuesFin()
	}()
	return float64(C.ImPlot_ImStdDev_U32Ptr(valuesArg, C.int(count)))
}

func ImStdDevU64Ptr(values []uint64, count int32) float64 {
	return float64(C.ImPlot_ImStdDev_U64Ptr((*C.ulonglong)(&(values[0])), C.int(count)))
}

func ImStdDevU8Ptr(values *byte, count int32) float64 {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU8, byte](values)

	defer func() {
		valuesFin()
	}()
	return float64(C.ImPlot_ImStdDev_U8Ptr(valuesArg, C.int(count)))
}

func ImStdDevdoublePtr(values *float64, count int32) float64 {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.double, float64](values)

	defer func() {
		valuesFin()
	}()
	return float64(C.ImPlot_ImStdDev_doublePtr(valuesArg, C.int(count)))
}

func ImSumFloatPtr(values *float32, count int32) float32 {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.float, float32](values)

	defer func() {
		valuesFin()
	}()
	return float32(C.ImPlot_ImSum_FloatPtr(valuesArg, C.int(count)))
}

func ImSumS16Ptr(values *int16, count int32) int16 {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS16, int16](values)

	defer func() {
		valuesFin()
	}()
	return int16(C.ImPlot_ImSum_S16Ptr(valuesArg, C.int(count)))
}

func ImSumS32Ptr(values *int32, count int32) int {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS32, int32](values)

	defer func() {
		valuesFin()
	}()
	return int(C.ImPlot_ImSum_S32Ptr(valuesArg, C.int(count)))
}

func ImSumS64Ptr(values []int64, count int32) int64 {
	return int64(C.ImPlot_ImSum_S64Ptr((*C.longlong)(&(values[0])), C.int(count)))
}

func ImSumS8Ptr(values *int8, count int32) int {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS8, int8](values)

	defer func() {
		valuesFin()
	}()
	return int(C.ImPlot_ImSum_S8Ptr(valuesArg, C.int(count)))
}

func ImSumU16Ptr(values *uint16, count int32) uint16 {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU16, uint16](values)

	defer func() {
		valuesFin()
	}()
	return uint16(C.ImPlot_ImSum_U16Ptr(valuesArg, C.int(count)))
}

func ImSumU32Ptr(values *uint32, count int32) uint32 {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU32, uint32](values)

	defer func() {
		valuesFin()
	}()
	return uint32(C.ImPlot_ImSum_U32Ptr(valuesArg, C.int(count)))
}

func ImSumU64Ptr(values []uint64, count int32) uint64 {
	return uint64(C.ImPlot_ImSum_U64Ptr((*C.ulonglong)(&(values[0])), C.int(count)))
}

func ImSumU8Ptr(values *byte, count int32) byte {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU8, byte](values)

	defer func() {
		valuesFin()
	}()
	return byte(C.ImPlot_ImSum_U8Ptr(valuesArg, C.int(count)))
}

func ImSumdoublePtr(values *float64, count int32) float64 {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.double, float64](values)

	defer func() {
		valuesFin()
	}()
	return float64(C.ImPlot_ImSum_doublePtr(valuesArg, C.int(count)))
}

func Initialize(ctx *Context) {
	ctxArg, ctxFin := ctx.Handle()
	C.ImPlot_Initialize(internal.ReinterpretCast[*C.ImPlotContext](ctxArg))

	ctxFin()
}

func Intersection(a1 imgui.Vec2, a2 imgui.Vec2, b1 imgui.Vec2, b2 imgui.Vec2) imgui.Vec2 {
	pOut := new(imgui.Vec2)
	pOutArg, pOutFin := internal.Wrap(pOut)

	C.ImPlot_Intersection(internal.ReinterpretCast[*C.ImVec2](pOutArg), internal.ReinterpretCast[C.ImVec2](a1.ToC()), internal.ReinterpretCast[C.ImVec2](a2.ToC()), internal.ReinterpretCast[C.ImVec2](b1.ToC()), internal.ReinterpretCast[C.ImVec2](b2.ToC()))

	pOutFin()

	return *pOut
}

func IsAxisHovered(axis AxisEnum) bool {
	return C.ImPlot_IsAxisHovered(C.ImAxis(axis)) == C.bool(true)
}

func IsColorAutoPlotCol(idx Col) bool {
	return C.ImPlot_IsColorAuto_PlotCol(C.ImPlotCol(idx)) == C.bool(true)
}

func IsColorAutoVec4(col imgui.Vec4) bool {
	return C.ImPlot_IsColorAuto_Vec4(internal.ReinterpretCast[C.ImVec4](col.ToC())) == C.bool(true)
}

func IsLeapYear(year int32) bool {
	return C.ImPlot_IsLeapYear(C.int(year)) == C.bool(true)
}

func IsLegendEntryHovered(label_id string) bool {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)

	defer func() {
		label_idFin()
	}()
	return C.ImPlot_IsLegendEntryHovered(label_idArg) == C.bool(true)
}

func IsPlotHovered() bool {
	return C.ImPlot_IsPlotHovered() == C.bool(true)
}

func IsPlotSelected() bool {
	return C.ImPlot_IsPlotSelected() == C.bool(true)
}

func IsSubplotsHovered() bool {
	return C.ImPlot_IsSubplotsHovered() == C.bool(true)
}

func ItemIconU32(col uint32) {
	C.ImPlot_ItemIcon_U32(C.ImU32(col))
}

func ItemIconVec4(col imgui.Vec4) {
	C.ImPlot_ItemIcon_Vec4(internal.ReinterpretCast[C.ImVec4](col.ToC()))
}

// LabelAxisValueV parameter default value hint:
// round: false
func LabelAxisValueV(axis Axis, value float64, buff string, size int32, round bool) {
	axisArg, axisFin := axis.C()
	buffArg, buffFin := internal.WrapString[C.char](buff)
	C.ImPlot_LabelAxisValue(internal.ReinterpretCast[C.ImPlotAxis](axisArg), C.double(value), buffArg, C.int(size), C.bool(round))

	axisFin()
	buffFin()
}

func LocatorDefault(ticker *Ticker, rangeArg Range, pixels float32, vertical bool, formatter Formatter, formatter_data uintptr) {
	tickerArg, tickerFin := ticker.Handle()
	rangeArgArg, rangeArgFin := rangeArg.C()
	formatterArg, formatterFin := formatter.C()
	C.wrap_ImPlot_Locator_Default(internal.ReinterpretCast[*C.ImPlotTicker](tickerArg), internal.ReinterpretCast[C.ImPlotRange](rangeArgArg), C.float(pixels), C.bool(vertical), internal.ReinterpretCast[C.ImPlotFormatter](formatterArg), C.uintptr_t(formatter_data))

	tickerFin()
	rangeArgFin()
	formatterFin()
}

func LocatorLog10(ticker *Ticker, rangeArg Range, pixels float32, vertical bool, formatter Formatter, formatter_data uintptr) {
	tickerArg, tickerFin := ticker.Handle()
	rangeArgArg, rangeArgFin := rangeArg.C()
	formatterArg, formatterFin := formatter.C()
	C.wrap_ImPlot_Locator_Log10(internal.ReinterpretCast[*C.ImPlotTicker](tickerArg), internal.ReinterpretCast[C.ImPlotRange](rangeArgArg), C.float(pixels), C.bool(vertical), internal.ReinterpretCast[C.ImPlotFormatter](formatterArg), C.uintptr_t(formatter_data))

	tickerFin()
	rangeArgFin()
	formatterFin()
}

func LocatorSymLog(ticker *Ticker, rangeArg Range, pixels float32, vertical bool, formatter Formatter, formatter_data uintptr) {
	tickerArg, tickerFin := ticker.Handle()
	rangeArgArg, rangeArgFin := rangeArg.C()
	formatterArg, formatterFin := formatter.C()
	C.wrap_ImPlot_Locator_SymLog(internal.ReinterpretCast[*C.ImPlotTicker](tickerArg), internal.ReinterpretCast[C.ImPlotRange](rangeArgArg), C.float(pixels), C.bool(vertical), internal.ReinterpretCast[C.ImPlotFormatter](formatterArg), C.uintptr_t(formatter_data))

	tickerFin()
	rangeArgFin()
	formatterFin()
}

func LocatorTime(ticker *Ticker, rangeArg Range, pixels float32, vertical bool, formatter Formatter, formatter_data uintptr) {
	tickerArg, tickerFin := ticker.Handle()
	rangeArgArg, rangeArgFin := rangeArg.C()
	formatterArg, formatterFin := formatter.C()
	C.wrap_ImPlot_Locator_Time(internal.ReinterpretCast[*C.ImPlotTicker](tickerArg), internal.ReinterpretCast[C.ImPlotRange](rangeArgArg), C.float(pixels), C.bool(vertical), internal.ReinterpretCast[C.ImPlotFormatter](formatterArg), C.uintptr_t(formatter_data))

	tickerFin()
	rangeArgFin()
	formatterFin()
}

// MakeTimeV parameter default value hint:
// month: 0
// day: 1
// hour: 0
// min: 0
// sec: 0
// us: 0
func MakeTimeV(year int32, month int32, day int32, hour int32, min int32, sec int32, us int32) PlotTime {
	pOut := new(PlotTime)
	pOutArg, pOutFin := internal.Wrap(pOut)

	C.ImPlot_MakeTime(internal.ReinterpretCast[*C.ImPlotTime](pOutArg), C.int(year), C.int(month), C.int(day), C.int(hour), C.int(min), C.int(sec), C.int(us))

	pOutFin()

	return *pOut
}

// MapInputDefaultV parameter default value hint:
// dst: nullptr
func MapInputDefaultV(dst *InputMap) {
	dstArg, dstFin := dst.Handle()
	C.ImPlot_MapInputDefault(internal.ReinterpretCast[*C.ImPlotInputMap](dstArg))

	dstFin()
}

// MapInputReverseV parameter default value hint:
// dst: nullptr
func MapInputReverseV(dst *InputMap) {
	dstArg, dstFin := dst.Handle()
	C.ImPlot_MapInputReverse(internal.ReinterpretCast[*C.ImPlotInputMap](dstArg))

	dstFin()
}

func NextColormapColor() imgui.Vec4 {
	pOut := new(imgui.Vec4)
	pOutArg, pOutFin := internal.Wrap(pOut)

	C.ImPlot_NextColormapColor(internal.ReinterpretCast[*C.ImVec4](pOutArg))

	pOutFin()

	return *pOut
}

func NextColormapColorU32() uint32 {
	return uint32(C.ImPlot_NextColormapColorU32())
}

func NiceNum(x float64, round bool) float64 {
	return float64(C.ImPlot_NiceNum(C.double(x), C.bool(round)))
}

func OrderOfMagnitude(val float64) int32 {
	return int32(C.ImPlot_OrderOfMagnitude(C.double(val)))
}

func OrderToPrecision(order int32) int32 {
	return int32(C.ImPlot_OrderToPrecision(C.int(order)))
}

// PixelsToPlotFloatV parameter default value hint:
// x_axis: -1
// y_axis: -1
func PixelsToPlotFloatV(x float32, y float32, x_axis AxisEnum, y_axis AxisEnum) PlotPoint {
	pOut := new(PlotPoint)
	pOutArg, pOutFin := internal.Wrap(pOut)

	C.ImPlot_PixelsToPlot_Float(internal.ReinterpretCast[*C.ImPlotPoint](pOutArg), C.float(x), C.float(y), C.ImAxis(x_axis), C.ImAxis(y_axis))

	pOutFin()

	return *pOut
}

// PixelsToPlotVec2V parameter default value hint:
// x_axis: -1
// y_axis: -1
func PixelsToPlotVec2V(pix imgui.Vec2, x_axis AxisEnum, y_axis AxisEnum) PlotPoint {
	pOut := new(PlotPoint)
	pOutArg, pOutFin := internal.Wrap(pOut)

	C.ImPlot_PixelsToPlot_Vec2(internal.ReinterpretCast[*C.ImPlotPoint](pOutArg), internal.ReinterpretCast[C.ImVec2](pix.ToC()), C.ImAxis(x_axis), C.ImAxis(y_axis))

	pOutFin()

	return *pOut
}

// PlotBarGroupsFloatPtrV parameter default value hint:
// group_size: 0.67
// shift: 0
// flags: 0
func PlotBarGroupsFloatPtrV(label_ids []string, values *float32, item_count int32, group_count int32, group_size float64, shift float64, flags BarGroupsFlags) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.float, float32](values)
	C.ImPlot_PlotBarGroups_FloatPtr(label_idsArg, valuesArg, C.int(item_count), C.int(group_count), C.double(group_size), C.double(shift), C.ImPlotBarGroupsFlags(flags))

	label_idsFin()
	valuesFin()
}

// PlotBarGroupsS16PtrV parameter default value hint:
// group_size: 0.67
// shift: 0
// flags: 0
func PlotBarGroupsS16PtrV(label_ids []string, values *int16, item_count int32, group_count int32, group_size float64, shift float64, flags BarGroupsFlags) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS16, int16](values)
	C.ImPlot_PlotBarGroups_S16Ptr(label_idsArg, valuesArg, C.int(item_count), C.int(group_count), C.double(group_size), C.double(shift), C.ImPlotBarGroupsFlags(flags))

	label_idsFin()
	valuesFin()
}

// PlotBarGroupsS32PtrV parameter default value hint:
// group_size: 0.67
// shift: 0
// flags: 0
func PlotBarGroupsS32PtrV(label_ids []string, values *int32, item_count int32, group_count int32, group_size float64, shift float64, flags BarGroupsFlags) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS32, int32](values)
	C.ImPlot_PlotBarGroups_S32Ptr(label_idsArg, valuesArg, C.int(item_count), C.int(group_count), C.double(group_size), C.double(shift), C.ImPlotBarGroupsFlags(flags))

	label_idsFin()
	valuesFin()
}

// PlotBarGroupsS64PtrV parameter default value hint:
// group_size: 0.67
// shift: 0
// flags: 0
func PlotBarGroupsS64PtrV(label_ids []string, values []int64, item_count int32, group_count int32, group_size float64, shift float64, flags BarGroupsFlags) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	C.ImPlot_PlotBarGroups_S64Ptr(label_idsArg, (*C.longlong)(&(values[0])), C.int(item_count), C.int(group_count), C.double(group_size), C.double(shift), C.ImPlotBarGroupsFlags(flags))

	label_idsFin()
}

// PlotBarGroupsS8PtrV parameter default value hint:
// group_size: 0.67
// shift: 0
// flags: 0
func PlotBarGroupsS8PtrV(label_ids []string, values *int8, item_count int32, group_count int32, group_size float64, shift float64, flags BarGroupsFlags) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS8, int8](values)
	C.ImPlot_PlotBarGroups_S8Ptr(label_idsArg, valuesArg, C.int(item_count), C.int(group_count), C.double(group_size), C.double(shift), C.ImPlotBarGroupsFlags(flags))

	label_idsFin()
	valuesFin()
}

// PlotBarGroupsU16PtrV parameter default value hint:
// group_size: 0.67
// shift: 0
// flags: 0
func PlotBarGroupsU16PtrV(label_ids []string, values *uint16, item_count int32, group_count int32, group_size float64, shift float64, flags BarGroupsFlags) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU16, uint16](values)
	C.ImPlot_PlotBarGroups_U16Ptr(label_idsArg, valuesArg, C.int(item_count), C.int(group_count), C.double(group_size), C.double(shift), C.ImPlotBarGroupsFlags(flags))

	label_idsFin()
	valuesFin()
}

// PlotBarGroupsU32PtrV parameter default value hint:
// group_size: 0.67
// shift: 0
// flags: 0
func PlotBarGroupsU32PtrV(label_ids []string, values *uint32, item_count int32, group_count int32, group_size float64, shift float64, flags BarGroupsFlags) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU32, uint32](values)
	C.ImPlot_PlotBarGroups_U32Ptr(label_idsArg, valuesArg, C.int(item_count), C.int(group_count), C.double(group_size), C.double(shift), C.ImPlotBarGroupsFlags(flags))

	label_idsFin()
	valuesFin()
}

// PlotBarGroupsU64PtrV parameter default value hint:
// group_size: 0.67
// shift: 0
// flags: 0
func PlotBarGroupsU64PtrV(label_ids []string, values []uint64, item_count int32, group_count int32, group_size float64, shift float64, flags BarGroupsFlags) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	C.ImPlot_PlotBarGroups_U64Ptr(label_idsArg, (*C.ulonglong)(&(values[0])), C.int(item_count), C.int(group_count), C.double(group_size), C.double(shift), C.ImPlotBarGroupsFlags(flags))

	label_idsFin()
}

// PlotBarGroupsU8PtrV parameter default value hint:
// group_size: 0.67
// shift: 0
// flags: 0
func PlotBarGroupsU8PtrV(label_ids []string, values *byte, item_count int32, group_count int32, group_size float64, shift float64, flags BarGroupsFlags) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU8, byte](values)
	C.ImPlot_PlotBarGroups_U8Ptr(label_idsArg, valuesArg, C.int(item_count), C.int(group_count), C.double(group_size), C.double(shift), C.ImPlotBarGroupsFlags(flags))

	label_idsFin()
	valuesFin()
}

// PlotBarGroupsdoublePtrV parameter default value hint:
// group_size: 0.67
// shift: 0
// flags: 0
func PlotBarGroupsdoublePtrV(label_ids []string, values *float64, item_count int32, group_count int32, group_size float64, shift float64, flags BarGroupsFlags) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.double, float64](values)
	C.ImPlot_PlotBarGroups_doublePtr(label_idsArg, valuesArg, C.int(item_count), C.int(group_count), C.double(group_size), C.double(shift), C.ImPlotBarGroupsFlags(flags))

	label_idsFin()
	valuesFin()
}

// PlotBarsFloatPtrFloatPtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(float)
func PlotBarsFloatPtrFloatPtrV(label_id string, xs *float32, ys *float32, count int32, bar_size float64, flags BarsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.float, float32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.float, float32](ys)
	C.ImPlot_PlotBars_FloatPtrFloatPtr(label_idArg, xsArg, ysArg, C.int(count), C.double(bar_size), C.ImPlotBarsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotBarsFloatPtrIntV parameter default value hint:
// bar_size: 0.67
// shift: 0
// flags: 0
// offset: 0
// stride: sizeof(float)
func PlotBarsFloatPtrIntV(label_id string, values *float32, count int32, bar_size float64, shift float64, flags BarsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.float, float32](values)
	C.ImPlot_PlotBars_FloatPtrInt(label_idArg, valuesArg, C.int(count), C.double(bar_size), C.double(shift), C.ImPlotBarsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotBarsS16PtrIntV parameter default value hint:
// bar_size: 0.67
// shift: 0
// flags: 0
// offset: 0
// stride: sizeof(ImS16)
func PlotBarsS16PtrIntV(label_id string, values *int16, count int32, bar_size float64, shift float64, flags BarsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS16, int16](values)
	C.ImPlot_PlotBars_S16PtrInt(label_idArg, valuesArg, C.int(count), C.double(bar_size), C.double(shift), C.ImPlotBarsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotBarsS16PtrS16PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImS16)
func PlotBarsS16PtrS16PtrV(label_id string, xs *int16, ys *int16, count int32, bar_size float64, flags BarsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS16, int16](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS16, int16](ys)
	C.ImPlot_PlotBars_S16PtrS16Ptr(label_idArg, xsArg, ysArg, C.int(count), C.double(bar_size), C.ImPlotBarsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotBarsS32PtrIntV parameter default value hint:
// bar_size: 0.67
// shift: 0
// flags: 0
// offset: 0
// stride: sizeof(ImS32)
func PlotBarsS32PtrIntV(label_id string, values *int32, count int32, bar_size float64, shift float64, flags BarsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS32, int32](values)
	C.ImPlot_PlotBars_S32PtrInt(label_idArg, valuesArg, C.int(count), C.double(bar_size), C.double(shift), C.ImPlotBarsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotBarsS32PtrS32PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImS32)
func PlotBarsS32PtrS32PtrV(label_id string, xs *int32, ys *int32, count int32, bar_size float64, flags BarsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS32, int32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS32, int32](ys)
	C.ImPlot_PlotBars_S32PtrS32Ptr(label_idArg, xsArg, ysArg, C.int(count), C.double(bar_size), C.ImPlotBarsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotBarsS64PtrIntV parameter default value hint:
// bar_size: 0.67
// shift: 0
// flags: 0
// offset: 0
// stride: sizeof(ImS64)
func PlotBarsS64PtrIntV(label_id string, values []int64, count int32, bar_size float64, shift float64, flags BarsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.ImPlot_PlotBars_S64PtrInt(label_idArg, (*C.longlong)(&(values[0])), C.int(count), C.double(bar_size), C.double(shift), C.ImPlotBarsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
}

// PlotBarsS64PtrS64PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImS64)
func PlotBarsS64PtrS64PtrV(label_id string, xs []int64, ys []int64, count int32, bar_size float64, flags BarsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.ImPlot_PlotBars_S64PtrS64Ptr(label_idArg, (*C.longlong)(&(xs[0])), (*C.longlong)(&(ys[0])), C.int(count), C.double(bar_size), C.ImPlotBarsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
}

// PlotBarsS8PtrIntV parameter default value hint:
// bar_size: 0.67
// shift: 0
// flags: 0
// offset: 0
// stride: sizeof(ImS8)
func PlotBarsS8PtrIntV(label_id string, values *int8, count int32, bar_size float64, shift float64, flags BarsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS8, int8](values)
	C.ImPlot_PlotBars_S8PtrInt(label_idArg, valuesArg, C.int(count), C.double(bar_size), C.double(shift), C.ImPlotBarsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotBarsS8PtrS8PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImS8)
func PlotBarsS8PtrS8PtrV(label_id string, xs *int8, ys *int8, count int32, bar_size float64, flags BarsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS8, int8](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS8, int8](ys)
	C.ImPlot_PlotBars_S8PtrS8Ptr(label_idArg, xsArg, ysArg, C.int(count), C.double(bar_size), C.ImPlotBarsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotBarsU16PtrIntV parameter default value hint:
// bar_size: 0.67
// shift: 0
// flags: 0
// offset: 0
// stride: sizeof(ImU16)
func PlotBarsU16PtrIntV(label_id string, values *uint16, count int32, bar_size float64, shift float64, flags BarsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU16, uint16](values)
	C.ImPlot_PlotBars_U16PtrInt(label_idArg, valuesArg, C.int(count), C.double(bar_size), C.double(shift), C.ImPlotBarsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotBarsU16PtrU16PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImU16)
func PlotBarsU16PtrU16PtrV(label_id string, xs *uint16, ys *uint16, count int32, bar_size float64, flags BarsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU16, uint16](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU16, uint16](ys)
	C.ImPlot_PlotBars_U16PtrU16Ptr(label_idArg, xsArg, ysArg, C.int(count), C.double(bar_size), C.ImPlotBarsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotBarsU32PtrIntV parameter default value hint:
// bar_size: 0.67
// shift: 0
// flags: 0
// offset: 0
// stride: sizeof(ImU32)
func PlotBarsU32PtrIntV(label_id string, values *uint32, count int32, bar_size float64, shift float64, flags BarsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU32, uint32](values)
	C.ImPlot_PlotBars_U32PtrInt(label_idArg, valuesArg, C.int(count), C.double(bar_size), C.double(shift), C.ImPlotBarsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotBarsU32PtrU32PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImU32)
func PlotBarsU32PtrU32PtrV(label_id string, xs *uint32, ys *uint32, count int32, bar_size float64, flags BarsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU32, uint32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU32, uint32](ys)
	C.ImPlot_PlotBars_U32PtrU32Ptr(label_idArg, xsArg, ysArg, C.int(count), C.double(bar_size), C.ImPlotBarsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotBarsU64PtrIntV parameter default value hint:
// bar_size: 0.67
// shift: 0
// flags: 0
// offset: 0
// stride: sizeof(ImU64)
func PlotBarsU64PtrIntV(label_id string, values []uint64, count int32, bar_size float64, shift float64, flags BarsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.ImPlot_PlotBars_U64PtrInt(label_idArg, (*C.ulonglong)(&(values[0])), C.int(count), C.double(bar_size), C.double(shift), C.ImPlotBarsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
}

// PlotBarsU64PtrU64PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImU64)
func PlotBarsU64PtrU64PtrV(label_id string, xs []uint64, ys []uint64, count int32, bar_size float64, flags BarsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.ImPlot_PlotBars_U64PtrU64Ptr(label_idArg, (*C.ulonglong)(&(xs[0])), (*C.ulonglong)(&(ys[0])), C.int(count), C.double(bar_size), C.ImPlotBarsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
}

// PlotBarsU8PtrIntV parameter default value hint:
// bar_size: 0.67
// shift: 0
// flags: 0
// offset: 0
// stride: sizeof(ImU8)
func PlotBarsU8PtrIntV(label_id string, values *byte, count int32, bar_size float64, shift float64, flags BarsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU8, byte](values)
	C.ImPlot_PlotBars_U8PtrInt(label_idArg, valuesArg, C.int(count), C.double(bar_size), C.double(shift), C.ImPlotBarsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotBarsU8PtrU8PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImU8)
func PlotBarsU8PtrU8PtrV(label_id string, xs *byte, ys *byte, count int32, bar_size float64, flags BarsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU8, byte](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU8, byte](ys)
	C.ImPlot_PlotBars_U8PtrU8Ptr(label_idArg, xsArg, ysArg, C.int(count), C.double(bar_size), C.ImPlotBarsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotBarsdoublePtrIntV parameter default value hint:
// bar_size: 0.67
// shift: 0
// flags: 0
// offset: 0
// stride: sizeof(double)
func PlotBarsdoublePtrIntV(label_id string, values *float64, count int32, bar_size float64, shift float64, flags BarsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.double, float64](values)
	C.ImPlot_PlotBars_doublePtrInt(label_idArg, valuesArg, C.int(count), C.double(bar_size), C.double(shift), C.ImPlotBarsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotBarsdoublePtrdoublePtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(double)
func PlotBarsdoublePtrdoublePtrV(label_id string, xs *float64, ys *float64, count int32, bar_size float64, flags BarsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.double, float64](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.double, float64](ys)
	C.ImPlot_PlotBars_doublePtrdoublePtr(label_idArg, xsArg, ysArg, C.int(count), C.double(bar_size), C.ImPlotBarsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotDigitalFloatPtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(float)
func PlotDigitalFloatPtrV(label_id string, xs *float32, ys *float32, count int32, flags DigitalFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.float, float32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.float, float32](ys)
	C.ImPlot_PlotDigital_FloatPtr(label_idArg, xsArg, ysArg, C.int(count), C.ImPlotDigitalFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotDigitalS16PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImS16)
func PlotDigitalS16PtrV(label_id string, xs *int16, ys *int16, count int32, flags DigitalFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS16, int16](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS16, int16](ys)
	C.ImPlot_PlotDigital_S16Ptr(label_idArg, xsArg, ysArg, C.int(count), C.ImPlotDigitalFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotDigitalS32PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImS32)
func PlotDigitalS32PtrV(label_id string, xs *int32, ys *int32, count int32, flags DigitalFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS32, int32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS32, int32](ys)
	C.ImPlot_PlotDigital_S32Ptr(label_idArg, xsArg, ysArg, C.int(count), C.ImPlotDigitalFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotDigitalS64PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImS64)
func PlotDigitalS64PtrV(label_id string, xs []int64, ys []int64, count int32, flags DigitalFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.ImPlot_PlotDigital_S64Ptr(label_idArg, (*C.longlong)(&(xs[0])), (*C.longlong)(&(ys[0])), C.int(count), C.ImPlotDigitalFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
}

// PlotDigitalS8PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImS8)
func PlotDigitalS8PtrV(label_id string, xs *int8, ys *int8, count int32, flags DigitalFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS8, int8](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS8, int8](ys)
	C.ImPlot_PlotDigital_S8Ptr(label_idArg, xsArg, ysArg, C.int(count), C.ImPlotDigitalFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotDigitalU16PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImU16)
func PlotDigitalU16PtrV(label_id string, xs *uint16, ys *uint16, count int32, flags DigitalFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU16, uint16](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU16, uint16](ys)
	C.ImPlot_PlotDigital_U16Ptr(label_idArg, xsArg, ysArg, C.int(count), C.ImPlotDigitalFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotDigitalU32PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImU32)
func PlotDigitalU32PtrV(label_id string, xs *uint32, ys *uint32, count int32, flags DigitalFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU32, uint32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU32, uint32](ys)
	C.ImPlot_PlotDigital_U32Ptr(label_idArg, xsArg, ysArg, C.int(count), C.ImPlotDigitalFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotDigitalU64PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImU64)
func PlotDigitalU64PtrV(label_id string, xs []uint64, ys []uint64, count int32, flags DigitalFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.ImPlot_PlotDigital_U64Ptr(label_idArg, (*C.ulonglong)(&(xs[0])), (*C.ulonglong)(&(ys[0])), C.int(count), C.ImPlotDigitalFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
}

// PlotDigitalU8PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImU8)
func PlotDigitalU8PtrV(label_id string, xs *byte, ys *byte, count int32, flags DigitalFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU8, byte](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU8, byte](ys)
	C.ImPlot_PlotDigital_U8Ptr(label_idArg, xsArg, ysArg, C.int(count), C.ImPlotDigitalFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotDigitaldoublePtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(double)
func PlotDigitaldoublePtrV(label_id string, xs *float64, ys *float64, count int32, flags DigitalFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.double, float64](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.double, float64](ys)
	C.ImPlot_PlotDigital_doublePtr(label_idArg, xsArg, ysArg, C.int(count), C.ImPlotDigitalFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotDummyV parameter default value hint:
// flags: 0
func PlotDummyV(label_id string, flags DummyFlags) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.ImPlot_PlotDummy(label_idArg, C.ImPlotDummyFlags(flags))

	label_idFin()
}

// PlotErrorBarsFloatPtrFloatPtrFloatPtrFloatPtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(float)
func PlotErrorBarsFloatPtrFloatPtrFloatPtrFloatPtrV(label_id string, xs *float32, ys *float32, neg *float32, pos *float32, count int32, flags ErrorBarsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.float, float32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.float, float32](ys)
	negArg, negFin := internal.WrapNumberPtr[C.float, float32](neg)
	posArg, posFin := internal.WrapNumberPtr[C.float, float32](pos)
	C.ImPlot_PlotErrorBars_FloatPtrFloatPtrFloatPtrFloatPtr(label_idArg, xsArg, ysArg, negArg, posArg, C.int(count), C.ImPlotErrorBarsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
	negFin()
	posFin()
}

// PlotErrorBarsFloatPtrFloatPtrFloatPtrIntV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(float)
func PlotErrorBarsFloatPtrFloatPtrFloatPtrIntV(label_id string, xs *float32, ys *float32, err *float32, count int32, flags ErrorBarsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.float, float32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.float, float32](ys)
	errArg, errFin := internal.WrapNumberPtr[C.float, float32](err)
	C.ImPlot_PlotErrorBars_FloatPtrFloatPtrFloatPtrInt(label_idArg, xsArg, ysArg, errArg, C.int(count), C.ImPlotErrorBarsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
	errFin()
}

// PlotErrorBarsS16PtrS16PtrS16PtrIntV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImS16)
func PlotErrorBarsS16PtrS16PtrS16PtrIntV(label_id string, xs *int16, ys *int16, err *int16, count int32, flags ErrorBarsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS16, int16](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS16, int16](ys)
	errArg, errFin := internal.WrapNumberPtr[C.ImS16, int16](err)
	C.ImPlot_PlotErrorBars_S16PtrS16PtrS16PtrInt(label_idArg, xsArg, ysArg, errArg, C.int(count), C.ImPlotErrorBarsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
	errFin()
}

// PlotErrorBarsS16PtrS16PtrS16PtrS16PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImS16)
func PlotErrorBarsS16PtrS16PtrS16PtrS16PtrV(label_id string, xs *int16, ys *int16, neg *int16, pos *int16, count int32, flags ErrorBarsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS16, int16](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS16, int16](ys)
	negArg, negFin := internal.WrapNumberPtr[C.ImS16, int16](neg)
	posArg, posFin := internal.WrapNumberPtr[C.ImS16, int16](pos)
	C.ImPlot_PlotErrorBars_S16PtrS16PtrS16PtrS16Ptr(label_idArg, xsArg, ysArg, negArg, posArg, C.int(count), C.ImPlotErrorBarsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
	negFin()
	posFin()
}

// PlotErrorBarsS32PtrS32PtrS32PtrIntV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImS32)
func PlotErrorBarsS32PtrS32PtrS32PtrIntV(label_id string, xs *int32, ys *int32, err *int32, count int32, flags ErrorBarsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS32, int32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS32, int32](ys)
	errArg, errFin := internal.WrapNumberPtr[C.ImS32, int32](err)
	C.ImPlot_PlotErrorBars_S32PtrS32PtrS32PtrInt(label_idArg, xsArg, ysArg, errArg, C.int(count), C.ImPlotErrorBarsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
	errFin()
}

// PlotErrorBarsS32PtrS32PtrS32PtrS32PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImS32)
func PlotErrorBarsS32PtrS32PtrS32PtrS32PtrV(label_id string, xs *int32, ys *int32, neg *int32, pos *int32, count int32, flags ErrorBarsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS32, int32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS32, int32](ys)
	negArg, negFin := internal.WrapNumberPtr[C.ImS32, int32](neg)
	posArg, posFin := internal.WrapNumberPtr[C.ImS32, int32](pos)
	C.ImPlot_PlotErrorBars_S32PtrS32PtrS32PtrS32Ptr(label_idArg, xsArg, ysArg, negArg, posArg, C.int(count), C.ImPlotErrorBarsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
	negFin()
	posFin()
}

// PlotErrorBarsS64PtrS64PtrS64PtrIntV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImS64)
func PlotErrorBarsS64PtrS64PtrS64PtrIntV(label_id string, xs []int64, ys []int64, err []int64, count int32, flags ErrorBarsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.ImPlot_PlotErrorBars_S64PtrS64PtrS64PtrInt(label_idArg, (*C.longlong)(&(xs[0])), (*C.longlong)(&(ys[0])), (*C.longlong)(&(err[0])), C.int(count), C.ImPlotErrorBarsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
}

// PlotErrorBarsS64PtrS64PtrS64PtrS64PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImS64)
func PlotErrorBarsS64PtrS64PtrS64PtrS64PtrV(label_id string, xs []int64, ys []int64, neg []int64, pos []int64, count int32, flags ErrorBarsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.ImPlot_PlotErrorBars_S64PtrS64PtrS64PtrS64Ptr(label_idArg, (*C.longlong)(&(xs[0])), (*C.longlong)(&(ys[0])), (*C.longlong)(&(neg[0])), (*C.longlong)(&(pos[0])), C.int(count), C.ImPlotErrorBarsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
}

// PlotErrorBarsS8PtrS8PtrS8PtrIntV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImS8)
func PlotErrorBarsS8PtrS8PtrS8PtrIntV(label_id string, xs *int8, ys *int8, err *int8, count int32, flags ErrorBarsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS8, int8](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS8, int8](ys)
	errArg, errFin := internal.WrapNumberPtr[C.ImS8, int8](err)
	C.ImPlot_PlotErrorBars_S8PtrS8PtrS8PtrInt(label_idArg, xsArg, ysArg, errArg, C.int(count), C.ImPlotErrorBarsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
	errFin()
}

// PlotErrorBarsS8PtrS8PtrS8PtrS8PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImS8)
func PlotErrorBarsS8PtrS8PtrS8PtrS8PtrV(label_id string, xs *int8, ys *int8, neg *int8, pos *int8, count int32, flags ErrorBarsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS8, int8](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS8, int8](ys)
	negArg, negFin := internal.WrapNumberPtr[C.ImS8, int8](neg)
	posArg, posFin := internal.WrapNumberPtr[C.ImS8, int8](pos)
	C.ImPlot_PlotErrorBars_S8PtrS8PtrS8PtrS8Ptr(label_idArg, xsArg, ysArg, negArg, posArg, C.int(count), C.ImPlotErrorBarsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
	negFin()
	posFin()
}

// PlotErrorBarsU16PtrU16PtrU16PtrIntV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImU16)
func PlotErrorBarsU16PtrU16PtrU16PtrIntV(label_id string, xs *uint16, ys *uint16, err *uint16, count int32, flags ErrorBarsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU16, uint16](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU16, uint16](ys)
	errArg, errFin := internal.WrapNumberPtr[C.ImU16, uint16](err)
	C.ImPlot_PlotErrorBars_U16PtrU16PtrU16PtrInt(label_idArg, xsArg, ysArg, errArg, C.int(count), C.ImPlotErrorBarsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
	errFin()
}

// PlotErrorBarsU16PtrU16PtrU16PtrU16PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImU16)
func PlotErrorBarsU16PtrU16PtrU16PtrU16PtrV(label_id string, xs *uint16, ys *uint16, neg *uint16, pos *uint16, count int32, flags ErrorBarsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU16, uint16](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU16, uint16](ys)
	negArg, negFin := internal.WrapNumberPtr[C.ImU16, uint16](neg)
	posArg, posFin := internal.WrapNumberPtr[C.ImU16, uint16](pos)
	C.ImPlot_PlotErrorBars_U16PtrU16PtrU16PtrU16Ptr(label_idArg, xsArg, ysArg, negArg, posArg, C.int(count), C.ImPlotErrorBarsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
	negFin()
	posFin()
}

// PlotErrorBarsU32PtrU32PtrU32PtrIntV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImU32)
func PlotErrorBarsU32PtrU32PtrU32PtrIntV(label_id string, xs *uint32, ys *uint32, err *uint32, count int32, flags ErrorBarsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU32, uint32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU32, uint32](ys)
	errArg, errFin := internal.WrapNumberPtr[C.ImU32, uint32](err)
	C.ImPlot_PlotErrorBars_U32PtrU32PtrU32PtrInt(label_idArg, xsArg, ysArg, errArg, C.int(count), C.ImPlotErrorBarsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
	errFin()
}

// PlotErrorBarsU32PtrU32PtrU32PtrU32PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImU32)
func PlotErrorBarsU32PtrU32PtrU32PtrU32PtrV(label_id string, xs *uint32, ys *uint32, neg *uint32, pos *uint32, count int32, flags ErrorBarsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU32, uint32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU32, uint32](ys)
	negArg, negFin := internal.WrapNumberPtr[C.ImU32, uint32](neg)
	posArg, posFin := internal.WrapNumberPtr[C.ImU32, uint32](pos)
	C.ImPlot_PlotErrorBars_U32PtrU32PtrU32PtrU32Ptr(label_idArg, xsArg, ysArg, negArg, posArg, C.int(count), C.ImPlotErrorBarsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
	negFin()
	posFin()
}

// PlotErrorBarsU64PtrU64PtrU64PtrIntV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImU64)
func PlotErrorBarsU64PtrU64PtrU64PtrIntV(label_id string, xs []uint64, ys []uint64, err []uint64, count int32, flags ErrorBarsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.ImPlot_PlotErrorBars_U64PtrU64PtrU64PtrInt(label_idArg, (*C.ulonglong)(&(xs[0])), (*C.ulonglong)(&(ys[0])), (*C.ulonglong)(&(err[0])), C.int(count), C.ImPlotErrorBarsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
}

// PlotErrorBarsU64PtrU64PtrU64PtrU64PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImU64)
func PlotErrorBarsU64PtrU64PtrU64PtrU64PtrV(label_id string, xs []uint64, ys []uint64, neg []uint64, pos []uint64, count int32, flags ErrorBarsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.ImPlot_PlotErrorBars_U64PtrU64PtrU64PtrU64Ptr(label_idArg, (*C.ulonglong)(&(xs[0])), (*C.ulonglong)(&(ys[0])), (*C.ulonglong)(&(neg[0])), (*C.ulonglong)(&(pos[0])), C.int(count), C.ImPlotErrorBarsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
}

// PlotErrorBarsU8PtrU8PtrU8PtrIntV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImU8)
func PlotErrorBarsU8PtrU8PtrU8PtrIntV(label_id string, xs *byte, ys *byte, err *byte, count int32, flags ErrorBarsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU8, byte](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU8, byte](ys)
	errArg, errFin := internal.WrapNumberPtr[C.ImU8, byte](err)
	C.ImPlot_PlotErrorBars_U8PtrU8PtrU8PtrInt(label_idArg, xsArg, ysArg, errArg, C.int(count), C.ImPlotErrorBarsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
	errFin()
}

// PlotErrorBarsU8PtrU8PtrU8PtrU8PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImU8)
func PlotErrorBarsU8PtrU8PtrU8PtrU8PtrV(label_id string, xs *byte, ys *byte, neg *byte, pos *byte, count int32, flags ErrorBarsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU8, byte](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU8, byte](ys)
	negArg, negFin := internal.WrapNumberPtr[C.ImU8, byte](neg)
	posArg, posFin := internal.WrapNumberPtr[C.ImU8, byte](pos)
	C.ImPlot_PlotErrorBars_U8PtrU8PtrU8PtrU8Ptr(label_idArg, xsArg, ysArg, negArg, posArg, C.int(count), C.ImPlotErrorBarsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
	negFin()
	posFin()
}

// PlotErrorBarsdoublePtrdoublePtrdoublePtrIntV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(double)
func PlotErrorBarsdoublePtrdoublePtrdoublePtrIntV(label_id string, xs *float64, ys *float64, err *float64, count int32, flags ErrorBarsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.double, float64](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.double, float64](ys)
	errArg, errFin := internal.WrapNumberPtr[C.double, float64](err)
	C.ImPlot_PlotErrorBars_doublePtrdoublePtrdoublePtrInt(label_idArg, xsArg, ysArg, errArg, C.int(count), C.ImPlotErrorBarsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
	errFin()
}

// PlotErrorBarsdoublePtrdoublePtrdoublePtrdoublePtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(double)
func PlotErrorBarsdoublePtrdoublePtrdoublePtrdoublePtrV(label_id string, xs *float64, ys *float64, neg *float64, pos *float64, count int32, flags ErrorBarsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.double, float64](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.double, float64](ys)
	negArg, negFin := internal.WrapNumberPtr[C.double, float64](neg)
	posArg, posFin := internal.WrapNumberPtr[C.double, float64](pos)
	C.ImPlot_PlotErrorBars_doublePtrdoublePtrdoublePtrdoublePtr(label_idArg, xsArg, ysArg, negArg, posArg, C.int(count), C.ImPlotErrorBarsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
	negFin()
	posFin()
}

// PlotHeatmapFloatPtrV parameter default value hint:
// scale_min: 0
// scale_max: 0
// label_fmt: "%.1f"
// bounds_min: ImPlotPoint(0,0)
// bounds_max: ImPlotPoint(1,1)
// flags: 0
func PlotHeatmapFloatPtrV(label_id string, values *float32, rows int32, cols int32, scale_min float64, scale_max float64, label_fmt string, bounds_min PlotPoint, bounds_max PlotPoint, flags HeatmapFlags) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.float, float32](values)
	label_fmtArg, label_fmtFin := internal.WrapString[C.char](label_fmt)
	C.ImPlot_PlotHeatmap_FloatPtr(label_idArg, valuesArg, C.int(rows), C.int(cols), C.double(scale_min), C.double(scale_max), label_fmtArg, internal.ReinterpretCast[C.ImPlotPoint](bounds_min.ToC()), internal.ReinterpretCast[C.ImPlotPoint](bounds_max.ToC()), C.ImPlotHeatmapFlags(flags))

	label_idFin()
	valuesFin()
	label_fmtFin()
}

// PlotHeatmapS16PtrV parameter default value hint:
// scale_min: 0
// scale_max: 0
// label_fmt: "%.1f"
// bounds_min: ImPlotPoint(0,0)
// bounds_max: ImPlotPoint(1,1)
// flags: 0
func PlotHeatmapS16PtrV(label_id string, values *int16, rows int32, cols int32, scale_min float64, scale_max float64, label_fmt string, bounds_min PlotPoint, bounds_max PlotPoint, flags HeatmapFlags) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS16, int16](values)
	label_fmtArg, label_fmtFin := internal.WrapString[C.char](label_fmt)
	C.ImPlot_PlotHeatmap_S16Ptr(label_idArg, valuesArg, C.int(rows), C.int(cols), C.double(scale_min), C.double(scale_max), label_fmtArg, internal.ReinterpretCast[C.ImPlotPoint](bounds_min.ToC()), internal.ReinterpretCast[C.ImPlotPoint](bounds_max.ToC()), C.ImPlotHeatmapFlags(flags))

	label_idFin()
	valuesFin()
	label_fmtFin()
}

// PlotHeatmapS32PtrV parameter default value hint:
// scale_min: 0
// scale_max: 0
// label_fmt: "%.1f"
// bounds_min: ImPlotPoint(0,0)
// bounds_max: ImPlotPoint(1,1)
// flags: 0
func PlotHeatmapS32PtrV(label_id string, values *int32, rows int32, cols int32, scale_min float64, scale_max float64, label_fmt string, bounds_min PlotPoint, bounds_max PlotPoint, flags HeatmapFlags) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS32, int32](values)
	label_fmtArg, label_fmtFin := internal.WrapString[C.char](label_fmt)
	C.ImPlot_PlotHeatmap_S32Ptr(label_idArg, valuesArg, C.int(rows), C.int(cols), C.double(scale_min), C.double(scale_max), label_fmtArg, internal.ReinterpretCast[C.ImPlotPoint](bounds_min.ToC()), internal.ReinterpretCast[C.ImPlotPoint](bounds_max.ToC()), C.ImPlotHeatmapFlags(flags))

	label_idFin()
	valuesFin()
	label_fmtFin()
}

// PlotHeatmapS64PtrV parameter default value hint:
// scale_min: 0
// scale_max: 0
// label_fmt: "%.1f"
// bounds_min: ImPlotPoint(0,0)
// bounds_max: ImPlotPoint(1,1)
// flags: 0
func PlotHeatmapS64PtrV(label_id string, values []int64, rows int32, cols int32, scale_min float64, scale_max float64, label_fmt string, bounds_min PlotPoint, bounds_max PlotPoint, flags HeatmapFlags) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	label_fmtArg, label_fmtFin := internal.WrapString[C.char](label_fmt)
	C.ImPlot_PlotHeatmap_S64Ptr(label_idArg, (*C.longlong)(&(values[0])), C.int(rows), C.int(cols), C.double(scale_min), C.double(scale_max), label_fmtArg, internal.ReinterpretCast[C.ImPlotPoint](bounds_min.ToC()), internal.ReinterpretCast[C.ImPlotPoint](bounds_max.ToC()), C.ImPlotHeatmapFlags(flags))

	label_idFin()
	label_fmtFin()
}

// PlotHeatmapS8PtrV parameter default value hint:
// scale_min: 0
// scale_max: 0
// label_fmt: "%.1f"
// bounds_min: ImPlotPoint(0,0)
// bounds_max: ImPlotPoint(1,1)
// flags: 0
func PlotHeatmapS8PtrV(label_id string, values *int8, rows int32, cols int32, scale_min float64, scale_max float64, label_fmt string, bounds_min PlotPoint, bounds_max PlotPoint, flags HeatmapFlags) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS8, int8](values)
	label_fmtArg, label_fmtFin := internal.WrapString[C.char](label_fmt)
	C.ImPlot_PlotHeatmap_S8Ptr(label_idArg, valuesArg, C.int(rows), C.int(cols), C.double(scale_min), C.double(scale_max), label_fmtArg, internal.ReinterpretCast[C.ImPlotPoint](bounds_min.ToC()), internal.ReinterpretCast[C.ImPlotPoint](bounds_max.ToC()), C.ImPlotHeatmapFlags(flags))

	label_idFin()
	valuesFin()
	label_fmtFin()
}

// PlotHeatmapU16PtrV parameter default value hint:
// scale_min: 0
// scale_max: 0
// label_fmt: "%.1f"
// bounds_min: ImPlotPoint(0,0)
// bounds_max: ImPlotPoint(1,1)
// flags: 0
func PlotHeatmapU16PtrV(label_id string, values *uint16, rows int32, cols int32, scale_min float64, scale_max float64, label_fmt string, bounds_min PlotPoint, bounds_max PlotPoint, flags HeatmapFlags) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU16, uint16](values)
	label_fmtArg, label_fmtFin := internal.WrapString[C.char](label_fmt)
	C.ImPlot_PlotHeatmap_U16Ptr(label_idArg, valuesArg, C.int(rows), C.int(cols), C.double(scale_min), C.double(scale_max), label_fmtArg, internal.ReinterpretCast[C.ImPlotPoint](bounds_min.ToC()), internal.ReinterpretCast[C.ImPlotPoint](bounds_max.ToC()), C.ImPlotHeatmapFlags(flags))

	label_idFin()
	valuesFin()
	label_fmtFin()
}

// PlotHeatmapU32PtrV parameter default value hint:
// scale_min: 0
// scale_max: 0
// label_fmt: "%.1f"
// bounds_min: ImPlotPoint(0,0)
// bounds_max: ImPlotPoint(1,1)
// flags: 0
func PlotHeatmapU32PtrV(label_id string, values *uint32, rows int32, cols int32, scale_min float64, scale_max float64, label_fmt string, bounds_min PlotPoint, bounds_max PlotPoint, flags HeatmapFlags) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU32, uint32](values)
	label_fmtArg, label_fmtFin := internal.WrapString[C.char](label_fmt)
	C.ImPlot_PlotHeatmap_U32Ptr(label_idArg, valuesArg, C.int(rows), C.int(cols), C.double(scale_min), C.double(scale_max), label_fmtArg, internal.ReinterpretCast[C.ImPlotPoint](bounds_min.ToC()), internal.ReinterpretCast[C.ImPlotPoint](bounds_max.ToC()), C.ImPlotHeatmapFlags(flags))

	label_idFin()
	valuesFin()
	label_fmtFin()
}

// PlotHeatmapU64PtrV parameter default value hint:
// scale_min: 0
// scale_max: 0
// label_fmt: "%.1f"
// bounds_min: ImPlotPoint(0,0)
// bounds_max: ImPlotPoint(1,1)
// flags: 0
func PlotHeatmapU64PtrV(label_id string, values []uint64, rows int32, cols int32, scale_min float64, scale_max float64, label_fmt string, bounds_min PlotPoint, bounds_max PlotPoint, flags HeatmapFlags) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	label_fmtArg, label_fmtFin := internal.WrapString[C.char](label_fmt)
	C.ImPlot_PlotHeatmap_U64Ptr(label_idArg, (*C.ulonglong)(&(values[0])), C.int(rows), C.int(cols), C.double(scale_min), C.double(scale_max), label_fmtArg, internal.ReinterpretCast[C.ImPlotPoint](bounds_min.ToC()), internal.ReinterpretCast[C.ImPlotPoint](bounds_max.ToC()), C.ImPlotHeatmapFlags(flags))

	label_idFin()
	label_fmtFin()
}

// PlotHeatmapU8PtrV parameter default value hint:
// scale_min: 0
// scale_max: 0
// label_fmt: "%.1f"
// bounds_min: ImPlotPoint(0,0)
// bounds_max: ImPlotPoint(1,1)
// flags: 0
func PlotHeatmapU8PtrV(label_id string, values *byte, rows int32, cols int32, scale_min float64, scale_max float64, label_fmt string, bounds_min PlotPoint, bounds_max PlotPoint, flags HeatmapFlags) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU8, byte](values)
	label_fmtArg, label_fmtFin := internal.WrapString[C.char](label_fmt)
	C.ImPlot_PlotHeatmap_U8Ptr(label_idArg, valuesArg, C.int(rows), C.int(cols), C.double(scale_min), C.double(scale_max), label_fmtArg, internal.ReinterpretCast[C.ImPlotPoint](bounds_min.ToC()), internal.ReinterpretCast[C.ImPlotPoint](bounds_max.ToC()), C.ImPlotHeatmapFlags(flags))

	label_idFin()
	valuesFin()
	label_fmtFin()
}

// PlotHeatmapdoublePtrV parameter default value hint:
// scale_min: 0
// scale_max: 0
// label_fmt: "%.1f"
// bounds_min: ImPlotPoint(0,0)
// bounds_max: ImPlotPoint(1,1)
// flags: 0
func PlotHeatmapdoublePtrV(label_id string, values *float64, rows int32, cols int32, scale_min float64, scale_max float64, label_fmt string, bounds_min PlotPoint, bounds_max PlotPoint, flags HeatmapFlags) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.double, float64](values)
	label_fmtArg, label_fmtFin := internal.WrapString[C.char](label_fmt)
	C.ImPlot_PlotHeatmap_doublePtr(label_idArg, valuesArg, C.int(rows), C.int(cols), C.double(scale_min), C.double(scale_max), label_fmtArg, internal.ReinterpretCast[C.ImPlotPoint](bounds_min.ToC()), internal.ReinterpretCast[C.ImPlotPoint](bounds_max.ToC()), C.ImPlotHeatmapFlags(flags))

	label_idFin()
	valuesFin()
	label_fmtFin()
}

// PlotHistogram2DFloatPtrV parameter default value hint:
// x_bins: ImPlotBin_Sturges
// y_bins: ImPlotBin_Sturges
// flags: 0
func PlotHistogram2DFloatPtrV(label_id string, xs *float32, ys *float32, count int32, x_bins int32, y_bins int32, rangeArg Rect, flags HistogramFlags) float64 {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.float, float32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.float, float32](ys)
	rangeArgArg, rangeArgFin := rangeArg.C()

	defer func() {
		label_idFin()
		xsFin()
		ysFin()
		rangeArgFin()
	}()
	return float64(C.ImPlot_PlotHistogram2D_FloatPtr(label_idArg, xsArg, ysArg, C.int(count), C.int(x_bins), C.int(y_bins), internal.ReinterpretCast[C.ImPlotRect](rangeArgArg), C.ImPlotHistogramFlags(flags)))
}

// PlotHistogram2DS16PtrV parameter default value hint:
// x_bins: ImPlotBin_Sturges
// y_bins: ImPlotBin_Sturges
// flags: 0
func PlotHistogram2DS16PtrV(label_id string, xs *int16, ys *int16, count int32, x_bins int32, y_bins int32, rangeArg Rect, flags HistogramFlags) float64 {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS16, int16](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS16, int16](ys)
	rangeArgArg, rangeArgFin := rangeArg.C()

	defer func() {
		label_idFin()
		xsFin()
		ysFin()
		rangeArgFin()
	}()
	return float64(C.ImPlot_PlotHistogram2D_S16Ptr(label_idArg, xsArg, ysArg, C.int(count), C.int(x_bins), C.int(y_bins), internal.ReinterpretCast[C.ImPlotRect](rangeArgArg), C.ImPlotHistogramFlags(flags)))
}

// PlotHistogram2DS32PtrV parameter default value hint:
// x_bins: ImPlotBin_Sturges
// y_bins: ImPlotBin_Sturges
// flags: 0
func PlotHistogram2DS32PtrV(label_id string, xs *int32, ys *int32, count int32, x_bins int32, y_bins int32, rangeArg Rect, flags HistogramFlags) float64 {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS32, int32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS32, int32](ys)
	rangeArgArg, rangeArgFin := rangeArg.C()

	defer func() {
		label_idFin()
		xsFin()
		ysFin()
		rangeArgFin()
	}()
	return float64(C.ImPlot_PlotHistogram2D_S32Ptr(label_idArg, xsArg, ysArg, C.int(count), C.int(x_bins), C.int(y_bins), internal.ReinterpretCast[C.ImPlotRect](rangeArgArg), C.ImPlotHistogramFlags(flags)))
}

// PlotHistogram2DS64PtrV parameter default value hint:
// x_bins: ImPlotBin_Sturges
// y_bins: ImPlotBin_Sturges
// flags: 0
func PlotHistogram2DS64PtrV(label_id string, xs []int64, ys []int64, count int32, x_bins int32, y_bins int32, rangeArg Rect, flags HistogramFlags) float64 {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	rangeArgArg, rangeArgFin := rangeArg.C()

	defer func() {
		label_idFin()
		rangeArgFin()
	}()
	return float64(C.ImPlot_PlotHistogram2D_S64Ptr(label_idArg, (*C.longlong)(&(xs[0])), (*C.longlong)(&(ys[0])), C.int(count), C.int(x_bins), C.int(y_bins), internal.ReinterpretCast[C.ImPlotRect](rangeArgArg), C.ImPlotHistogramFlags(flags)))
}

// PlotHistogram2DS8PtrV parameter default value hint:
// x_bins: ImPlotBin_Sturges
// y_bins: ImPlotBin_Sturges
// flags: 0
func PlotHistogram2DS8PtrV(label_id string, xs *int8, ys *int8, count int32, x_bins int32, y_bins int32, rangeArg Rect, flags HistogramFlags) float64 {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS8, int8](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS8, int8](ys)
	rangeArgArg, rangeArgFin := rangeArg.C()

	defer func() {
		label_idFin()
		xsFin()
		ysFin()
		rangeArgFin()
	}()
	return float64(C.ImPlot_PlotHistogram2D_S8Ptr(label_idArg, xsArg, ysArg, C.int(count), C.int(x_bins), C.int(y_bins), internal.ReinterpretCast[C.ImPlotRect](rangeArgArg), C.ImPlotHistogramFlags(flags)))
}

// PlotHistogram2DU16PtrV parameter default value hint:
// x_bins: ImPlotBin_Sturges
// y_bins: ImPlotBin_Sturges
// flags: 0
func PlotHistogram2DU16PtrV(label_id string, xs *uint16, ys *uint16, count int32, x_bins int32, y_bins int32, rangeArg Rect, flags HistogramFlags) float64 {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU16, uint16](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU16, uint16](ys)
	rangeArgArg, rangeArgFin := rangeArg.C()

	defer func() {
		label_idFin()
		xsFin()
		ysFin()
		rangeArgFin()
	}()
	return float64(C.ImPlot_PlotHistogram2D_U16Ptr(label_idArg, xsArg, ysArg, C.int(count), C.int(x_bins), C.int(y_bins), internal.ReinterpretCast[C.ImPlotRect](rangeArgArg), C.ImPlotHistogramFlags(flags)))
}

// PlotHistogram2DU32PtrV parameter default value hint:
// x_bins: ImPlotBin_Sturges
// y_bins: ImPlotBin_Sturges
// flags: 0
func PlotHistogram2DU32PtrV(label_id string, xs *uint32, ys *uint32, count int32, x_bins int32, y_bins int32, rangeArg Rect, flags HistogramFlags) float64 {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU32, uint32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU32, uint32](ys)
	rangeArgArg, rangeArgFin := rangeArg.C()

	defer func() {
		label_idFin()
		xsFin()
		ysFin()
		rangeArgFin()
	}()
	return float64(C.ImPlot_PlotHistogram2D_U32Ptr(label_idArg, xsArg, ysArg, C.int(count), C.int(x_bins), C.int(y_bins), internal.ReinterpretCast[C.ImPlotRect](rangeArgArg), C.ImPlotHistogramFlags(flags)))
}

// PlotHistogram2DU64PtrV parameter default value hint:
// x_bins: ImPlotBin_Sturges
// y_bins: ImPlotBin_Sturges
// flags: 0
func PlotHistogram2DU64PtrV(label_id string, xs []uint64, ys []uint64, count int32, x_bins int32, y_bins int32, rangeArg Rect, flags HistogramFlags) float64 {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	rangeArgArg, rangeArgFin := rangeArg.C()

	defer func() {
		label_idFin()
		rangeArgFin()
	}()
	return float64(C.ImPlot_PlotHistogram2D_U64Ptr(label_idArg, (*C.ulonglong)(&(xs[0])), (*C.ulonglong)(&(ys[0])), C.int(count), C.int(x_bins), C.int(y_bins), internal.ReinterpretCast[C.ImPlotRect](rangeArgArg), C.ImPlotHistogramFlags(flags)))
}

// PlotHistogram2DU8PtrV parameter default value hint:
// x_bins: ImPlotBin_Sturges
// y_bins: ImPlotBin_Sturges
// flags: 0
func PlotHistogram2DU8PtrV(label_id string, xs *byte, ys *byte, count int32, x_bins int32, y_bins int32, rangeArg Rect, flags HistogramFlags) float64 {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU8, byte](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU8, byte](ys)
	rangeArgArg, rangeArgFin := rangeArg.C()

	defer func() {
		label_idFin()
		xsFin()
		ysFin()
		rangeArgFin()
	}()
	return float64(C.ImPlot_PlotHistogram2D_U8Ptr(label_idArg, xsArg, ysArg, C.int(count), C.int(x_bins), C.int(y_bins), internal.ReinterpretCast[C.ImPlotRect](rangeArgArg), C.ImPlotHistogramFlags(flags)))
}

// PlotHistogram2DdoublePtrV parameter default value hint:
// x_bins: ImPlotBin_Sturges
// y_bins: ImPlotBin_Sturges
// flags: 0
func PlotHistogram2DdoublePtrV(label_id string, xs *float64, ys *float64, count int32, x_bins int32, y_bins int32, rangeArg Rect, flags HistogramFlags) float64 {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.double, float64](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.double, float64](ys)
	rangeArgArg, rangeArgFin := rangeArg.C()

	defer func() {
		label_idFin()
		xsFin()
		ysFin()
		rangeArgFin()
	}()
	return float64(C.ImPlot_PlotHistogram2D_doublePtr(label_idArg, xsArg, ysArg, C.int(count), C.int(x_bins), C.int(y_bins), internal.ReinterpretCast[C.ImPlotRect](rangeArgArg), C.ImPlotHistogramFlags(flags)))
}

// PlotHistogramFloatPtrV parameter default value hint:
// bins: ImPlotBin_Sturges
// bar_scale: 1.0
// flags: 0
func PlotHistogramFloatPtrV(label_id string, values *float32, count int32, bins int32, bar_scale float64, rangeArg Range, flags HistogramFlags) float64 {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.float, float32](values)
	rangeArgArg, rangeArgFin := rangeArg.C()

	defer func() {
		label_idFin()
		valuesFin()
		rangeArgFin()
	}()
	return float64(C.ImPlot_PlotHistogram_FloatPtr(label_idArg, valuesArg, C.int(count), C.int(bins), C.double(bar_scale), internal.ReinterpretCast[C.ImPlotRange](rangeArgArg), C.ImPlotHistogramFlags(flags)))
}

// PlotHistogramS16PtrV parameter default value hint:
// bins: ImPlotBin_Sturges
// bar_scale: 1.0
// flags: 0
func PlotHistogramS16PtrV(label_id string, values *int16, count int32, bins int32, bar_scale float64, rangeArg Range, flags HistogramFlags) float64 {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS16, int16](values)
	rangeArgArg, rangeArgFin := rangeArg.C()

	defer func() {
		label_idFin()
		valuesFin()
		rangeArgFin()
	}()
	return float64(C.ImPlot_PlotHistogram_S16Ptr(label_idArg, valuesArg, C.int(count), C.int(bins), C.double(bar_scale), internal.ReinterpretCast[C.ImPlotRange](rangeArgArg), C.ImPlotHistogramFlags(flags)))
}

// PlotHistogramS32PtrV parameter default value hint:
// bins: ImPlotBin_Sturges
// bar_scale: 1.0
// flags: 0
func PlotHistogramS32PtrV(label_id string, values *int32, count int32, bins int32, bar_scale float64, rangeArg Range, flags HistogramFlags) float64 {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS32, int32](values)
	rangeArgArg, rangeArgFin := rangeArg.C()

	defer func() {
		label_idFin()
		valuesFin()
		rangeArgFin()
	}()
	return float64(C.ImPlot_PlotHistogram_S32Ptr(label_idArg, valuesArg, C.int(count), C.int(bins), C.double(bar_scale), internal.ReinterpretCast[C.ImPlotRange](rangeArgArg), C.ImPlotHistogramFlags(flags)))
}

// PlotHistogramS64PtrV parameter default value hint:
// bins: ImPlotBin_Sturges
// bar_scale: 1.0
// flags: 0
func PlotHistogramS64PtrV(label_id string, values []int64, count int32, bins int32, bar_scale float64, rangeArg Range, flags HistogramFlags) float64 {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	rangeArgArg, rangeArgFin := rangeArg.C()

	defer func() {
		label_idFin()
		rangeArgFin()
	}()
	return float64(C.ImPlot_PlotHistogram_S64Ptr(label_idArg, (*C.longlong)(&(values[0])), C.int(count), C.int(bins), C.double(bar_scale), internal.ReinterpretCast[C.ImPlotRange](rangeArgArg), C.ImPlotHistogramFlags(flags)))
}

// PlotHistogramS8PtrV parameter default value hint:
// bins: ImPlotBin_Sturges
// bar_scale: 1.0
// flags: 0
func PlotHistogramS8PtrV(label_id string, values *int8, count int32, bins int32, bar_scale float64, rangeArg Range, flags HistogramFlags) float64 {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS8, int8](values)
	rangeArgArg, rangeArgFin := rangeArg.C()

	defer func() {
		label_idFin()
		valuesFin()
		rangeArgFin()
	}()
	return float64(C.ImPlot_PlotHistogram_S8Ptr(label_idArg, valuesArg, C.int(count), C.int(bins), C.double(bar_scale), internal.ReinterpretCast[C.ImPlotRange](rangeArgArg), C.ImPlotHistogramFlags(flags)))
}

// PlotHistogramU16PtrV parameter default value hint:
// bins: ImPlotBin_Sturges
// bar_scale: 1.0
// flags: 0
func PlotHistogramU16PtrV(label_id string, values *uint16, count int32, bins int32, bar_scale float64, rangeArg Range, flags HistogramFlags) float64 {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU16, uint16](values)
	rangeArgArg, rangeArgFin := rangeArg.C()

	defer func() {
		label_idFin()
		valuesFin()
		rangeArgFin()
	}()
	return float64(C.ImPlot_PlotHistogram_U16Ptr(label_idArg, valuesArg, C.int(count), C.int(bins), C.double(bar_scale), internal.ReinterpretCast[C.ImPlotRange](rangeArgArg), C.ImPlotHistogramFlags(flags)))
}

// PlotHistogramU32PtrV parameter default value hint:
// bins: ImPlotBin_Sturges
// bar_scale: 1.0
// flags: 0
func PlotHistogramU32PtrV(label_id string, values *uint32, count int32, bins int32, bar_scale float64, rangeArg Range, flags HistogramFlags) float64 {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU32, uint32](values)
	rangeArgArg, rangeArgFin := rangeArg.C()

	defer func() {
		label_idFin()
		valuesFin()
		rangeArgFin()
	}()
	return float64(C.ImPlot_PlotHistogram_U32Ptr(label_idArg, valuesArg, C.int(count), C.int(bins), C.double(bar_scale), internal.ReinterpretCast[C.ImPlotRange](rangeArgArg), C.ImPlotHistogramFlags(flags)))
}

// PlotHistogramU64PtrV parameter default value hint:
// bins: ImPlotBin_Sturges
// bar_scale: 1.0
// flags: 0
func PlotHistogramU64PtrV(label_id string, values []uint64, count int32, bins int32, bar_scale float64, rangeArg Range, flags HistogramFlags) float64 {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	rangeArgArg, rangeArgFin := rangeArg.C()

	defer func() {
		label_idFin()
		rangeArgFin()
	}()
	return float64(C.ImPlot_PlotHistogram_U64Ptr(label_idArg, (*C.ulonglong)(&(values[0])), C.int(count), C.int(bins), C.double(bar_scale), internal.ReinterpretCast[C.ImPlotRange](rangeArgArg), C.ImPlotHistogramFlags(flags)))
}

// PlotHistogramU8PtrV parameter default value hint:
// bins: ImPlotBin_Sturges
// bar_scale: 1.0
// flags: 0
func PlotHistogramU8PtrV(label_id string, values *byte, count int32, bins int32, bar_scale float64, rangeArg Range, flags HistogramFlags) float64 {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU8, byte](values)
	rangeArgArg, rangeArgFin := rangeArg.C()

	defer func() {
		label_idFin()
		valuesFin()
		rangeArgFin()
	}()
	return float64(C.ImPlot_PlotHistogram_U8Ptr(label_idArg, valuesArg, C.int(count), C.int(bins), C.double(bar_scale), internal.ReinterpretCast[C.ImPlotRange](rangeArgArg), C.ImPlotHistogramFlags(flags)))
}

// PlotHistogramdoublePtrV parameter default value hint:
// bins: ImPlotBin_Sturges
// bar_scale: 1.0
// flags: 0
func PlotHistogramdoublePtrV(label_id string, values *float64, count int32, bins int32, bar_scale float64, rangeArg Range, flags HistogramFlags) float64 {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.double, float64](values)
	rangeArgArg, rangeArgFin := rangeArg.C()

	defer func() {
		label_idFin()
		valuesFin()
		rangeArgFin()
	}()
	return float64(C.ImPlot_PlotHistogram_doublePtr(label_idArg, valuesArg, C.int(count), C.int(bins), C.double(bar_scale), internal.ReinterpretCast[C.ImPlotRange](rangeArgArg), C.ImPlotHistogramFlags(flags)))
}

// PlotImageV parameter default value hint:
// uv0: ImVec2(0,0)
// uv1: ImVec2(1,1)
// tint_col: ImVec4(1,1,1,1)
// flags: 0
func PlotImageV(label_id string, user_texture_id imgui.TextureID, bounds_min PlotPoint, bounds_max PlotPoint, uv0 imgui.Vec2, uv1 imgui.Vec2, tint_col imgui.Vec4, flags ImageFlags) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	user_texture_idArg, user_texture_idFin := user_texture_id.C()
	C.ImPlot_PlotImage(label_idArg, internal.ReinterpretCast[C.ImTextureID](user_texture_idArg), internal.ReinterpretCast[C.ImPlotPoint](bounds_min.ToC()), internal.ReinterpretCast[C.ImPlotPoint](bounds_max.ToC()), internal.ReinterpretCast[C.ImVec2](uv0.ToC()), internal.ReinterpretCast[C.ImVec2](uv1.ToC()), internal.ReinterpretCast[C.ImVec4](tint_col.ToC()), C.ImPlotImageFlags(flags))

	label_idFin()
	user_texture_idFin()
}

// PlotInfLinesFloatPtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(float)
func PlotInfLinesFloatPtrV(label_id string, values *float32, count int32, flags InfLinesFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.float, float32](values)
	C.ImPlot_PlotInfLines_FloatPtr(label_idArg, valuesArg, C.int(count), C.ImPlotInfLinesFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotInfLinesS16PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImS16)
func PlotInfLinesS16PtrV(label_id string, values *int16, count int32, flags InfLinesFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS16, int16](values)
	C.ImPlot_PlotInfLines_S16Ptr(label_idArg, valuesArg, C.int(count), C.ImPlotInfLinesFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotInfLinesS32PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImS32)
func PlotInfLinesS32PtrV(label_id string, values *int32, count int32, flags InfLinesFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS32, int32](values)
	C.ImPlot_PlotInfLines_S32Ptr(label_idArg, valuesArg, C.int(count), C.ImPlotInfLinesFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotInfLinesS64PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImS64)
func PlotInfLinesS64PtrV(label_id string, values []int64, count int32, flags InfLinesFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.ImPlot_PlotInfLines_S64Ptr(label_idArg, (*C.longlong)(&(values[0])), C.int(count), C.ImPlotInfLinesFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
}

// PlotInfLinesS8PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImS8)
func PlotInfLinesS8PtrV(label_id string, values *int8, count int32, flags InfLinesFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS8, int8](values)
	C.ImPlot_PlotInfLines_S8Ptr(label_idArg, valuesArg, C.int(count), C.ImPlotInfLinesFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotInfLinesU16PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImU16)
func PlotInfLinesU16PtrV(label_id string, values *uint16, count int32, flags InfLinesFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU16, uint16](values)
	C.ImPlot_PlotInfLines_U16Ptr(label_idArg, valuesArg, C.int(count), C.ImPlotInfLinesFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotInfLinesU32PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImU32)
func PlotInfLinesU32PtrV(label_id string, values *uint32, count int32, flags InfLinesFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU32, uint32](values)
	C.ImPlot_PlotInfLines_U32Ptr(label_idArg, valuesArg, C.int(count), C.ImPlotInfLinesFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotInfLinesU64PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImU64)
func PlotInfLinesU64PtrV(label_id string, values []uint64, count int32, flags InfLinesFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.ImPlot_PlotInfLines_U64Ptr(label_idArg, (*C.ulonglong)(&(values[0])), C.int(count), C.ImPlotInfLinesFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
}

// PlotInfLinesU8PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImU8)
func PlotInfLinesU8PtrV(label_id string, values *byte, count int32, flags InfLinesFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU8, byte](values)
	C.ImPlot_PlotInfLines_U8Ptr(label_idArg, valuesArg, C.int(count), C.ImPlotInfLinesFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotInfLinesdoublePtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(double)
func PlotInfLinesdoublePtrV(label_id string, values *float64, count int32, flags InfLinesFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.double, float64](values)
	C.ImPlot_PlotInfLines_doublePtr(label_idArg, valuesArg, C.int(count), C.ImPlotInfLinesFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotLineFloatPtrFloatPtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(float)
func PlotLineFloatPtrFloatPtrV(label_id string, xs *float32, ys *float32, count int32, flags LineFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.float, float32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.float, float32](ys)
	C.ImPlot_PlotLine_FloatPtrFloatPtr(label_idArg, xsArg, ysArg, C.int(count), C.ImPlotLineFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotLineFloatPtrIntV parameter default value hint:
// xscale: 1
// xstart: 0
// flags: 0
// offset: 0
// stride: sizeof(float)
func PlotLineFloatPtrIntV(label_id string, values *float32, count int32, xscale float64, xstart float64, flags LineFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.float, float32](values)
	C.ImPlot_PlotLine_FloatPtrInt(label_idArg, valuesArg, C.int(count), C.double(xscale), C.double(xstart), C.ImPlotLineFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotLineS16PtrIntV parameter default value hint:
// xscale: 1
// xstart: 0
// flags: 0
// offset: 0
// stride: sizeof(ImS16)
func PlotLineS16PtrIntV(label_id string, values *int16, count int32, xscale float64, xstart float64, flags LineFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS16, int16](values)
	C.ImPlot_PlotLine_S16PtrInt(label_idArg, valuesArg, C.int(count), C.double(xscale), C.double(xstart), C.ImPlotLineFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotLineS16PtrS16PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImS16)
func PlotLineS16PtrS16PtrV(label_id string, xs *int16, ys *int16, count int32, flags LineFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS16, int16](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS16, int16](ys)
	C.ImPlot_PlotLine_S16PtrS16Ptr(label_idArg, xsArg, ysArg, C.int(count), C.ImPlotLineFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotLineS32PtrIntV parameter default value hint:
// xscale: 1
// xstart: 0
// flags: 0
// offset: 0
// stride: sizeof(ImS32)
func PlotLineS32PtrIntV(label_id string, values *int32, count int32, xscale float64, xstart float64, flags LineFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS32, int32](values)
	C.ImPlot_PlotLine_S32PtrInt(label_idArg, valuesArg, C.int(count), C.double(xscale), C.double(xstart), C.ImPlotLineFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotLineS32PtrS32PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImS32)
func PlotLineS32PtrS32PtrV(label_id string, xs *int32, ys *int32, count int32, flags LineFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS32, int32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS32, int32](ys)
	C.ImPlot_PlotLine_S32PtrS32Ptr(label_idArg, xsArg, ysArg, C.int(count), C.ImPlotLineFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotLineS64PtrIntV parameter default value hint:
// xscale: 1
// xstart: 0
// flags: 0
// offset: 0
// stride: sizeof(ImS64)
func PlotLineS64PtrIntV(label_id string, values []int64, count int32, xscale float64, xstart float64, flags LineFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.ImPlot_PlotLine_S64PtrInt(label_idArg, (*C.longlong)(&(values[0])), C.int(count), C.double(xscale), C.double(xstart), C.ImPlotLineFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
}

// PlotLineS64PtrS64PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImS64)
func PlotLineS64PtrS64PtrV(label_id string, xs []int64, ys []int64, count int32, flags LineFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.ImPlot_PlotLine_S64PtrS64Ptr(label_idArg, (*C.longlong)(&(xs[0])), (*C.longlong)(&(ys[0])), C.int(count), C.ImPlotLineFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
}

// PlotLineS8PtrIntV parameter default value hint:
// xscale: 1
// xstart: 0
// flags: 0
// offset: 0
// stride: sizeof(ImS8)
func PlotLineS8PtrIntV(label_id string, values *int8, count int32, xscale float64, xstart float64, flags LineFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS8, int8](values)
	C.ImPlot_PlotLine_S8PtrInt(label_idArg, valuesArg, C.int(count), C.double(xscale), C.double(xstart), C.ImPlotLineFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotLineS8PtrS8PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImS8)
func PlotLineS8PtrS8PtrV(label_id string, xs *int8, ys *int8, count int32, flags LineFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS8, int8](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS8, int8](ys)
	C.ImPlot_PlotLine_S8PtrS8Ptr(label_idArg, xsArg, ysArg, C.int(count), C.ImPlotLineFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotLineU16PtrIntV parameter default value hint:
// xscale: 1
// xstart: 0
// flags: 0
// offset: 0
// stride: sizeof(ImU16)
func PlotLineU16PtrIntV(label_id string, values *uint16, count int32, xscale float64, xstart float64, flags LineFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU16, uint16](values)
	C.ImPlot_PlotLine_U16PtrInt(label_idArg, valuesArg, C.int(count), C.double(xscale), C.double(xstart), C.ImPlotLineFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotLineU16PtrU16PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImU16)
func PlotLineU16PtrU16PtrV(label_id string, xs *uint16, ys *uint16, count int32, flags LineFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU16, uint16](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU16, uint16](ys)
	C.ImPlot_PlotLine_U16PtrU16Ptr(label_idArg, xsArg, ysArg, C.int(count), C.ImPlotLineFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotLineU32PtrIntV parameter default value hint:
// xscale: 1
// xstart: 0
// flags: 0
// offset: 0
// stride: sizeof(ImU32)
func PlotLineU32PtrIntV(label_id string, values *uint32, count int32, xscale float64, xstart float64, flags LineFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU32, uint32](values)
	C.ImPlot_PlotLine_U32PtrInt(label_idArg, valuesArg, C.int(count), C.double(xscale), C.double(xstart), C.ImPlotLineFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotLineU32PtrU32PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImU32)
func PlotLineU32PtrU32PtrV(label_id string, xs *uint32, ys *uint32, count int32, flags LineFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU32, uint32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU32, uint32](ys)
	C.ImPlot_PlotLine_U32PtrU32Ptr(label_idArg, xsArg, ysArg, C.int(count), C.ImPlotLineFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotLineU64PtrIntV parameter default value hint:
// xscale: 1
// xstart: 0
// flags: 0
// offset: 0
// stride: sizeof(ImU64)
func PlotLineU64PtrIntV(label_id string, values []uint64, count int32, xscale float64, xstart float64, flags LineFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.ImPlot_PlotLine_U64PtrInt(label_idArg, (*C.ulonglong)(&(values[0])), C.int(count), C.double(xscale), C.double(xstart), C.ImPlotLineFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
}

// PlotLineU64PtrU64PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImU64)
func PlotLineU64PtrU64PtrV(label_id string, xs []uint64, ys []uint64, count int32, flags LineFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.ImPlot_PlotLine_U64PtrU64Ptr(label_idArg, (*C.ulonglong)(&(xs[0])), (*C.ulonglong)(&(ys[0])), C.int(count), C.ImPlotLineFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
}

// PlotLineU8PtrIntV parameter default value hint:
// xscale: 1
// xstart: 0
// flags: 0
// offset: 0
// stride: sizeof(ImU8)
func PlotLineU8PtrIntV(label_id string, values *byte, count int32, xscale float64, xstart float64, flags LineFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU8, byte](values)
	C.ImPlot_PlotLine_U8PtrInt(label_idArg, valuesArg, C.int(count), C.double(xscale), C.double(xstart), C.ImPlotLineFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotLineU8PtrU8PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImU8)
func PlotLineU8PtrU8PtrV(label_id string, xs *byte, ys *byte, count int32, flags LineFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU8, byte](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU8, byte](ys)
	C.ImPlot_PlotLine_U8PtrU8Ptr(label_idArg, xsArg, ysArg, C.int(count), C.ImPlotLineFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotLinedoublePtrIntV parameter default value hint:
// xscale: 1
// xstart: 0
// flags: 0
// offset: 0
// stride: sizeof(double)
func PlotLinedoublePtrIntV(label_id string, values *float64, count int32, xscale float64, xstart float64, flags LineFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.double, float64](values)
	C.ImPlot_PlotLine_doublePtrInt(label_idArg, valuesArg, C.int(count), C.double(xscale), C.double(xstart), C.ImPlotLineFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotLinedoublePtrdoublePtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(double)
func PlotLinedoublePtrdoublePtrV(label_id string, xs *float64, ys *float64, count int32, flags LineFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.double, float64](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.double, float64](ys)
	C.ImPlot_PlotLine_doublePtrdoublePtr(label_idArg, xsArg, ysArg, C.int(count), C.ImPlotLineFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotPieChartFloatPtrPlotFormatterV parameter default value hint:
// fmt_data: nullptr
// angle0: 90
// flags: 0
func PlotPieChartFloatPtrPlotFormatterV(label_ids []string, values *float32, count int32, x float64, y float64, radius float64, fmt Formatter, fmt_data uintptr, angle0 float64, flags PieChartFlags) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.float, float32](values)
	fmtArg, fmtFin := fmt.C()
	C.wrap_ImPlot_PlotPieChart_FloatPtrPlotFormatterV(label_idsArg, valuesArg, C.int(count), C.double(x), C.double(y), C.double(radius), internal.ReinterpretCast[C.ImPlotFormatter](fmtArg), C.uintptr_t(fmt_data), C.double(angle0), C.ImPlotPieChartFlags(flags))

	label_idsFin()
	valuesFin()
	fmtFin()
}

// PlotPieChartFloatPtrStrV parameter default value hint:
// label_fmt: "%.1f"
// angle0: 90
// flags: 0
func PlotPieChartFloatPtrStrV(label_ids []string, values *float32, count int32, x float64, y float64, radius float64, label_fmt string, angle0 float64, flags PieChartFlags) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.float, float32](values)
	label_fmtArg, label_fmtFin := internal.WrapString[C.char](label_fmt)
	C.ImPlot_PlotPieChart_FloatPtrStr(label_idsArg, valuesArg, C.int(count), C.double(x), C.double(y), C.double(radius), label_fmtArg, C.double(angle0), C.ImPlotPieChartFlags(flags))

	label_idsFin()
	valuesFin()
	label_fmtFin()
}

// PlotPieChartS16PtrPlotFormatterV parameter default value hint:
// fmt_data: nullptr
// angle0: 90
// flags: 0
func PlotPieChartS16PtrPlotFormatterV(label_ids []string, values *int16, count int32, x float64, y float64, radius float64, fmt Formatter, fmt_data uintptr, angle0 float64, flags PieChartFlags) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS16, int16](values)
	fmtArg, fmtFin := fmt.C()
	C.wrap_ImPlot_PlotPieChart_S16PtrPlotFormatterV(label_idsArg, valuesArg, C.int(count), C.double(x), C.double(y), C.double(radius), internal.ReinterpretCast[C.ImPlotFormatter](fmtArg), C.uintptr_t(fmt_data), C.double(angle0), C.ImPlotPieChartFlags(flags))

	label_idsFin()
	valuesFin()
	fmtFin()
}

// PlotPieChartS16PtrStrV parameter default value hint:
// label_fmt: "%.1f"
// angle0: 90
// flags: 0
func PlotPieChartS16PtrStrV(label_ids []string, values *int16, count int32, x float64, y float64, radius float64, label_fmt string, angle0 float64, flags PieChartFlags) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS16, int16](values)
	label_fmtArg, label_fmtFin := internal.WrapString[C.char](label_fmt)
	C.ImPlot_PlotPieChart_S16PtrStr(label_idsArg, valuesArg, C.int(count), C.double(x), C.double(y), C.double(radius), label_fmtArg, C.double(angle0), C.ImPlotPieChartFlags(flags))

	label_idsFin()
	valuesFin()
	label_fmtFin()
}

// PlotPieChartS32PtrPlotFormatterV parameter default value hint:
// fmt_data: nullptr
// angle0: 90
// flags: 0
func PlotPieChartS32PtrPlotFormatterV(label_ids []string, values *int32, count int32, x float64, y float64, radius float64, fmt Formatter, fmt_data uintptr, angle0 float64, flags PieChartFlags) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS32, int32](values)
	fmtArg, fmtFin := fmt.C()
	C.wrap_ImPlot_PlotPieChart_S32PtrPlotFormatterV(label_idsArg, valuesArg, C.int(count), C.double(x), C.double(y), C.double(radius), internal.ReinterpretCast[C.ImPlotFormatter](fmtArg), C.uintptr_t(fmt_data), C.double(angle0), C.ImPlotPieChartFlags(flags))

	label_idsFin()
	valuesFin()
	fmtFin()
}

// PlotPieChartS32PtrStrV parameter default value hint:
// label_fmt: "%.1f"
// angle0: 90
// flags: 0
func PlotPieChartS32PtrStrV(label_ids []string, values *int32, count int32, x float64, y float64, radius float64, label_fmt string, angle0 float64, flags PieChartFlags) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS32, int32](values)
	label_fmtArg, label_fmtFin := internal.WrapString[C.char](label_fmt)
	C.ImPlot_PlotPieChart_S32PtrStr(label_idsArg, valuesArg, C.int(count), C.double(x), C.double(y), C.double(radius), label_fmtArg, C.double(angle0), C.ImPlotPieChartFlags(flags))

	label_idsFin()
	valuesFin()
	label_fmtFin()
}

// PlotPieChartS64PtrPlotFormatterV parameter default value hint:
// fmt_data: nullptr
// angle0: 90
// flags: 0
func PlotPieChartS64PtrPlotFormatterV(label_ids []string, values []int64, count int32, x float64, y float64, radius float64, fmt Formatter, fmt_data uintptr, angle0 float64, flags PieChartFlags) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	fmtArg, fmtFin := fmt.C()
	C.wrap_ImPlot_PlotPieChart_S64PtrPlotFormatterV(label_idsArg, (*C.longlong)(&(values[0])), C.int(count), C.double(x), C.double(y), C.double(radius), internal.ReinterpretCast[C.ImPlotFormatter](fmtArg), C.uintptr_t(fmt_data), C.double(angle0), C.ImPlotPieChartFlags(flags))

	label_idsFin()
	fmtFin()
}

// PlotPieChartS64PtrStrV parameter default value hint:
// label_fmt: "%.1f"
// angle0: 90
// flags: 0
func PlotPieChartS64PtrStrV(label_ids []string, values []int64, count int32, x float64, y float64, radius float64, label_fmt string, angle0 float64, flags PieChartFlags) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	label_fmtArg, label_fmtFin := internal.WrapString[C.char](label_fmt)
	C.ImPlot_PlotPieChart_S64PtrStr(label_idsArg, (*C.longlong)(&(values[0])), C.int(count), C.double(x), C.double(y), C.double(radius), label_fmtArg, C.double(angle0), C.ImPlotPieChartFlags(flags))

	label_idsFin()
	label_fmtFin()
}

// PlotPieChartS8PtrPlotFormatterV parameter default value hint:
// fmt_data: nullptr
// angle0: 90
// flags: 0
func PlotPieChartS8PtrPlotFormatterV(label_ids []string, values *int8, count int32, x float64, y float64, radius float64, fmt Formatter, fmt_data uintptr, angle0 float64, flags PieChartFlags) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS8, int8](values)
	fmtArg, fmtFin := fmt.C()
	C.wrap_ImPlot_PlotPieChart_S8PtrPlotFormatterV(label_idsArg, valuesArg, C.int(count), C.double(x), C.double(y), C.double(radius), internal.ReinterpretCast[C.ImPlotFormatter](fmtArg), C.uintptr_t(fmt_data), C.double(angle0), C.ImPlotPieChartFlags(flags))

	label_idsFin()
	valuesFin()
	fmtFin()
}

// PlotPieChartS8PtrStrV parameter default value hint:
// label_fmt: "%.1f"
// angle0: 90
// flags: 0
func PlotPieChartS8PtrStrV(label_ids []string, values *int8, count int32, x float64, y float64, radius float64, label_fmt string, angle0 float64, flags PieChartFlags) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS8, int8](values)
	label_fmtArg, label_fmtFin := internal.WrapString[C.char](label_fmt)
	C.ImPlot_PlotPieChart_S8PtrStr(label_idsArg, valuesArg, C.int(count), C.double(x), C.double(y), C.double(radius), label_fmtArg, C.double(angle0), C.ImPlotPieChartFlags(flags))

	label_idsFin()
	valuesFin()
	label_fmtFin()
}

// PlotPieChartU16PtrPlotFormatterV parameter default value hint:
// fmt_data: nullptr
// angle0: 90
// flags: 0
func PlotPieChartU16PtrPlotFormatterV(label_ids []string, values *uint16, count int32, x float64, y float64, radius float64, fmt Formatter, fmt_data uintptr, angle0 float64, flags PieChartFlags) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU16, uint16](values)
	fmtArg, fmtFin := fmt.C()
	C.wrap_ImPlot_PlotPieChart_U16PtrPlotFormatterV(label_idsArg, valuesArg, C.int(count), C.double(x), C.double(y), C.double(radius), internal.ReinterpretCast[C.ImPlotFormatter](fmtArg), C.uintptr_t(fmt_data), C.double(angle0), C.ImPlotPieChartFlags(flags))

	label_idsFin()
	valuesFin()
	fmtFin()
}

// PlotPieChartU16PtrStrV parameter default value hint:
// label_fmt: "%.1f"
// angle0: 90
// flags: 0
func PlotPieChartU16PtrStrV(label_ids []string, values *uint16, count int32, x float64, y float64, radius float64, label_fmt string, angle0 float64, flags PieChartFlags) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU16, uint16](values)
	label_fmtArg, label_fmtFin := internal.WrapString[C.char](label_fmt)
	C.ImPlot_PlotPieChart_U16PtrStr(label_idsArg, valuesArg, C.int(count), C.double(x), C.double(y), C.double(radius), label_fmtArg, C.double(angle0), C.ImPlotPieChartFlags(flags))

	label_idsFin()
	valuesFin()
	label_fmtFin()
}

// PlotPieChartU32PtrPlotFormatterV parameter default value hint:
// fmt_data: nullptr
// angle0: 90
// flags: 0
func PlotPieChartU32PtrPlotFormatterV(label_ids []string, values *uint32, count int32, x float64, y float64, radius float64, fmt Formatter, fmt_data uintptr, angle0 float64, flags PieChartFlags) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU32, uint32](values)
	fmtArg, fmtFin := fmt.C()
	C.wrap_ImPlot_PlotPieChart_U32PtrPlotFormatterV(label_idsArg, valuesArg, C.int(count), C.double(x), C.double(y), C.double(radius), internal.ReinterpretCast[C.ImPlotFormatter](fmtArg), C.uintptr_t(fmt_data), C.double(angle0), C.ImPlotPieChartFlags(flags))

	label_idsFin()
	valuesFin()
	fmtFin()
}

// PlotPieChartU32PtrStrV parameter default value hint:
// label_fmt: "%.1f"
// angle0: 90
// flags: 0
func PlotPieChartU32PtrStrV(label_ids []string, values *uint32, count int32, x float64, y float64, radius float64, label_fmt string, angle0 float64, flags PieChartFlags) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU32, uint32](values)
	label_fmtArg, label_fmtFin := internal.WrapString[C.char](label_fmt)
	C.ImPlot_PlotPieChart_U32PtrStr(label_idsArg, valuesArg, C.int(count), C.double(x), C.double(y), C.double(radius), label_fmtArg, C.double(angle0), C.ImPlotPieChartFlags(flags))

	label_idsFin()
	valuesFin()
	label_fmtFin()
}

// PlotPieChartU64PtrPlotFormatterV parameter default value hint:
// fmt_data: nullptr
// angle0: 90
// flags: 0
func PlotPieChartU64PtrPlotFormatterV(label_ids []string, values []uint64, count int32, x float64, y float64, radius float64, fmt Formatter, fmt_data uintptr, angle0 float64, flags PieChartFlags) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	fmtArg, fmtFin := fmt.C()
	C.wrap_ImPlot_PlotPieChart_U64PtrPlotFormatterV(label_idsArg, (*C.ulonglong)(&(values[0])), C.int(count), C.double(x), C.double(y), C.double(radius), internal.ReinterpretCast[C.ImPlotFormatter](fmtArg), C.uintptr_t(fmt_data), C.double(angle0), C.ImPlotPieChartFlags(flags))

	label_idsFin()
	fmtFin()
}

// PlotPieChartU64PtrStrV parameter default value hint:
// label_fmt: "%.1f"
// angle0: 90
// flags: 0
func PlotPieChartU64PtrStrV(label_ids []string, values []uint64, count int32, x float64, y float64, radius float64, label_fmt string, angle0 float64, flags PieChartFlags) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	label_fmtArg, label_fmtFin := internal.WrapString[C.char](label_fmt)
	C.ImPlot_PlotPieChart_U64PtrStr(label_idsArg, (*C.ulonglong)(&(values[0])), C.int(count), C.double(x), C.double(y), C.double(radius), label_fmtArg, C.double(angle0), C.ImPlotPieChartFlags(flags))

	label_idsFin()
	label_fmtFin()
}

// PlotPieChartU8PtrPlotFormatterV parameter default value hint:
// fmt_data: nullptr
// angle0: 90
// flags: 0
func PlotPieChartU8PtrPlotFormatterV(label_ids []string, values *byte, count int32, x float64, y float64, radius float64, fmt Formatter, fmt_data uintptr, angle0 float64, flags PieChartFlags) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU8, byte](values)
	fmtArg, fmtFin := fmt.C()
	C.wrap_ImPlot_PlotPieChart_U8PtrPlotFormatterV(label_idsArg, valuesArg, C.int(count), C.double(x), C.double(y), C.double(radius), internal.ReinterpretCast[C.ImPlotFormatter](fmtArg), C.uintptr_t(fmt_data), C.double(angle0), C.ImPlotPieChartFlags(flags))

	label_idsFin()
	valuesFin()
	fmtFin()
}

// PlotPieChartU8PtrStrV parameter default value hint:
// label_fmt: "%.1f"
// angle0: 90
// flags: 0
func PlotPieChartU8PtrStrV(label_ids []string, values *byte, count int32, x float64, y float64, radius float64, label_fmt string, angle0 float64, flags PieChartFlags) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU8, byte](values)
	label_fmtArg, label_fmtFin := internal.WrapString[C.char](label_fmt)
	C.ImPlot_PlotPieChart_U8PtrStr(label_idsArg, valuesArg, C.int(count), C.double(x), C.double(y), C.double(radius), label_fmtArg, C.double(angle0), C.ImPlotPieChartFlags(flags))

	label_idsFin()
	valuesFin()
	label_fmtFin()
}

// PlotPieChartdoublePtrPlotFormatterV parameter default value hint:
// fmt_data: nullptr
// angle0: 90
// flags: 0
func PlotPieChartdoublePtrPlotFormatterV(label_ids []string, values *float64, count int32, x float64, y float64, radius float64, fmt Formatter, fmt_data uintptr, angle0 float64, flags PieChartFlags) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.double, float64](values)
	fmtArg, fmtFin := fmt.C()
	C.wrap_ImPlot_PlotPieChart_doublePtrPlotFormatterV(label_idsArg, valuesArg, C.int(count), C.double(x), C.double(y), C.double(radius), internal.ReinterpretCast[C.ImPlotFormatter](fmtArg), C.uintptr_t(fmt_data), C.double(angle0), C.ImPlotPieChartFlags(flags))

	label_idsFin()
	valuesFin()
	fmtFin()
}

// PlotPieChartdoublePtrStrV parameter default value hint:
// label_fmt: "%.1f"
// angle0: 90
// flags: 0
func PlotPieChartdoublePtrStrV(label_ids []string, values *float64, count int32, x float64, y float64, radius float64, label_fmt string, angle0 float64, flags PieChartFlags) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.double, float64](values)
	label_fmtArg, label_fmtFin := internal.WrapString[C.char](label_fmt)
	C.ImPlot_PlotPieChart_doublePtrStr(label_idsArg, valuesArg, C.int(count), C.double(x), C.double(y), C.double(radius), label_fmtArg, C.double(angle0), C.ImPlotPieChartFlags(flags))

	label_idsFin()
	valuesFin()
	label_fmtFin()
}

// PlotScatterFloatPtrFloatPtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(float)
func PlotScatterFloatPtrFloatPtrV(label_id string, xs *float32, ys *float32, count int32, flags ScatterFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.float, float32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.float, float32](ys)
	C.ImPlot_PlotScatter_FloatPtrFloatPtr(label_idArg, xsArg, ysArg, C.int(count), C.ImPlotScatterFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotScatterFloatPtrIntV parameter default value hint:
// xscale: 1
// xstart: 0
// flags: 0
// offset: 0
// stride: sizeof(float)
func PlotScatterFloatPtrIntV(label_id string, values *float32, count int32, xscale float64, xstart float64, flags ScatterFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.float, float32](values)
	C.ImPlot_PlotScatter_FloatPtrInt(label_idArg, valuesArg, C.int(count), C.double(xscale), C.double(xstart), C.ImPlotScatterFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotScatterS16PtrIntV parameter default value hint:
// xscale: 1
// xstart: 0
// flags: 0
// offset: 0
// stride: sizeof(ImS16)
func PlotScatterS16PtrIntV(label_id string, values *int16, count int32, xscale float64, xstart float64, flags ScatterFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS16, int16](values)
	C.ImPlot_PlotScatter_S16PtrInt(label_idArg, valuesArg, C.int(count), C.double(xscale), C.double(xstart), C.ImPlotScatterFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotScatterS16PtrS16PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImS16)
func PlotScatterS16PtrS16PtrV(label_id string, xs *int16, ys *int16, count int32, flags ScatterFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS16, int16](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS16, int16](ys)
	C.ImPlot_PlotScatter_S16PtrS16Ptr(label_idArg, xsArg, ysArg, C.int(count), C.ImPlotScatterFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotScatterS32PtrIntV parameter default value hint:
// xscale: 1
// xstart: 0
// flags: 0
// offset: 0
// stride: sizeof(ImS32)
func PlotScatterS32PtrIntV(label_id string, values *int32, count int32, xscale float64, xstart float64, flags ScatterFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS32, int32](values)
	C.ImPlot_PlotScatter_S32PtrInt(label_idArg, valuesArg, C.int(count), C.double(xscale), C.double(xstart), C.ImPlotScatterFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotScatterS32PtrS32PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImS32)
func PlotScatterS32PtrS32PtrV(label_id string, xs *int32, ys *int32, count int32, flags ScatterFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS32, int32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS32, int32](ys)
	C.ImPlot_PlotScatter_S32PtrS32Ptr(label_idArg, xsArg, ysArg, C.int(count), C.ImPlotScatterFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotScatterS64PtrIntV parameter default value hint:
// xscale: 1
// xstart: 0
// flags: 0
// offset: 0
// stride: sizeof(ImS64)
func PlotScatterS64PtrIntV(label_id string, values []int64, count int32, xscale float64, xstart float64, flags ScatterFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.ImPlot_PlotScatter_S64PtrInt(label_idArg, (*C.longlong)(&(values[0])), C.int(count), C.double(xscale), C.double(xstart), C.ImPlotScatterFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
}

// PlotScatterS64PtrS64PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImS64)
func PlotScatterS64PtrS64PtrV(label_id string, xs []int64, ys []int64, count int32, flags ScatterFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.ImPlot_PlotScatter_S64PtrS64Ptr(label_idArg, (*C.longlong)(&(xs[0])), (*C.longlong)(&(ys[0])), C.int(count), C.ImPlotScatterFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
}

// PlotScatterS8PtrIntV parameter default value hint:
// xscale: 1
// xstart: 0
// flags: 0
// offset: 0
// stride: sizeof(ImS8)
func PlotScatterS8PtrIntV(label_id string, values *int8, count int32, xscale float64, xstart float64, flags ScatterFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS8, int8](values)
	C.ImPlot_PlotScatter_S8PtrInt(label_idArg, valuesArg, C.int(count), C.double(xscale), C.double(xstart), C.ImPlotScatterFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotScatterS8PtrS8PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImS8)
func PlotScatterS8PtrS8PtrV(label_id string, xs *int8, ys *int8, count int32, flags ScatterFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS8, int8](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS8, int8](ys)
	C.ImPlot_PlotScatter_S8PtrS8Ptr(label_idArg, xsArg, ysArg, C.int(count), C.ImPlotScatterFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotScatterU16PtrIntV parameter default value hint:
// xscale: 1
// xstart: 0
// flags: 0
// offset: 0
// stride: sizeof(ImU16)
func PlotScatterU16PtrIntV(label_id string, values *uint16, count int32, xscale float64, xstart float64, flags ScatterFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU16, uint16](values)
	C.ImPlot_PlotScatter_U16PtrInt(label_idArg, valuesArg, C.int(count), C.double(xscale), C.double(xstart), C.ImPlotScatterFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotScatterU16PtrU16PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImU16)
func PlotScatterU16PtrU16PtrV(label_id string, xs *uint16, ys *uint16, count int32, flags ScatterFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU16, uint16](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU16, uint16](ys)
	C.ImPlot_PlotScatter_U16PtrU16Ptr(label_idArg, xsArg, ysArg, C.int(count), C.ImPlotScatterFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotScatterU32PtrIntV parameter default value hint:
// xscale: 1
// xstart: 0
// flags: 0
// offset: 0
// stride: sizeof(ImU32)
func PlotScatterU32PtrIntV(label_id string, values *uint32, count int32, xscale float64, xstart float64, flags ScatterFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU32, uint32](values)
	C.ImPlot_PlotScatter_U32PtrInt(label_idArg, valuesArg, C.int(count), C.double(xscale), C.double(xstart), C.ImPlotScatterFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotScatterU32PtrU32PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImU32)
func PlotScatterU32PtrU32PtrV(label_id string, xs *uint32, ys *uint32, count int32, flags ScatterFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU32, uint32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU32, uint32](ys)
	C.ImPlot_PlotScatter_U32PtrU32Ptr(label_idArg, xsArg, ysArg, C.int(count), C.ImPlotScatterFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotScatterU64PtrIntV parameter default value hint:
// xscale: 1
// xstart: 0
// flags: 0
// offset: 0
// stride: sizeof(ImU64)
func PlotScatterU64PtrIntV(label_id string, values []uint64, count int32, xscale float64, xstart float64, flags ScatterFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.ImPlot_PlotScatter_U64PtrInt(label_idArg, (*C.ulonglong)(&(values[0])), C.int(count), C.double(xscale), C.double(xstart), C.ImPlotScatterFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
}

// PlotScatterU64PtrU64PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImU64)
func PlotScatterU64PtrU64PtrV(label_id string, xs []uint64, ys []uint64, count int32, flags ScatterFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.ImPlot_PlotScatter_U64PtrU64Ptr(label_idArg, (*C.ulonglong)(&(xs[0])), (*C.ulonglong)(&(ys[0])), C.int(count), C.ImPlotScatterFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
}

// PlotScatterU8PtrIntV parameter default value hint:
// xscale: 1
// xstart: 0
// flags: 0
// offset: 0
// stride: sizeof(ImU8)
func PlotScatterU8PtrIntV(label_id string, values *byte, count int32, xscale float64, xstart float64, flags ScatterFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU8, byte](values)
	C.ImPlot_PlotScatter_U8PtrInt(label_idArg, valuesArg, C.int(count), C.double(xscale), C.double(xstart), C.ImPlotScatterFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotScatterU8PtrU8PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImU8)
func PlotScatterU8PtrU8PtrV(label_id string, xs *byte, ys *byte, count int32, flags ScatterFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU8, byte](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU8, byte](ys)
	C.ImPlot_PlotScatter_U8PtrU8Ptr(label_idArg, xsArg, ysArg, C.int(count), C.ImPlotScatterFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotScatterdoublePtrIntV parameter default value hint:
// xscale: 1
// xstart: 0
// flags: 0
// offset: 0
// stride: sizeof(double)
func PlotScatterdoublePtrIntV(label_id string, values *float64, count int32, xscale float64, xstart float64, flags ScatterFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.double, float64](values)
	C.ImPlot_PlotScatter_doublePtrInt(label_idArg, valuesArg, C.int(count), C.double(xscale), C.double(xstart), C.ImPlotScatterFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotScatterdoublePtrdoublePtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(double)
func PlotScatterdoublePtrdoublePtrV(label_id string, xs *float64, ys *float64, count int32, flags ScatterFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.double, float64](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.double, float64](ys)
	C.ImPlot_PlotScatter_doublePtrdoublePtr(label_idArg, xsArg, ysArg, C.int(count), C.ImPlotScatterFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotShadedFloatPtrFloatPtrFloatPtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(float)
func PlotShadedFloatPtrFloatPtrFloatPtrV(label_id string, xs *float32, ys1 *float32, ys2 *float32, count int32, flags ShadedFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.float, float32](xs)
	ys1Arg, ys1Fin := internal.WrapNumberPtr[C.float, float32](ys1)
	ys2Arg, ys2Fin := internal.WrapNumberPtr[C.float, float32](ys2)
	C.ImPlot_PlotShaded_FloatPtrFloatPtrFloatPtr(label_idArg, xsArg, ys1Arg, ys2Arg, C.int(count), C.ImPlotShadedFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ys1Fin()
	ys2Fin()
}

// PlotShadedFloatPtrFloatPtrIntV parameter default value hint:
// yref: 0
// flags: 0
// offset: 0
// stride: sizeof(float)
func PlotShadedFloatPtrFloatPtrIntV(label_id string, xs *float32, ys *float32, count int32, yref float64, flags ShadedFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.float, float32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.float, float32](ys)
	C.ImPlot_PlotShaded_FloatPtrFloatPtrInt(label_idArg, xsArg, ysArg, C.int(count), C.double(yref), C.ImPlotShadedFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotShadedFloatPtrIntV parameter default value hint:
// yref: 0
// xscale: 1
// xstart: 0
// flags: 0
// offset: 0
// stride: sizeof(float)
func PlotShadedFloatPtrIntV(label_id string, values *float32, count int32, yref float64, xscale float64, xstart float64, flags ShadedFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.float, float32](values)
	C.ImPlot_PlotShaded_FloatPtrInt(label_idArg, valuesArg, C.int(count), C.double(yref), C.double(xscale), C.double(xstart), C.ImPlotShadedFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotShadedS16PtrIntV parameter default value hint:
// yref: 0
// xscale: 1
// xstart: 0
// flags: 0
// offset: 0
// stride: sizeof(ImS16)
func PlotShadedS16PtrIntV(label_id string, values *int16, count int32, yref float64, xscale float64, xstart float64, flags ShadedFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS16, int16](values)
	C.ImPlot_PlotShaded_S16PtrInt(label_idArg, valuesArg, C.int(count), C.double(yref), C.double(xscale), C.double(xstart), C.ImPlotShadedFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotShadedS16PtrS16PtrIntV parameter default value hint:
// yref: 0
// flags: 0
// offset: 0
// stride: sizeof(ImS16)
func PlotShadedS16PtrS16PtrIntV(label_id string, xs *int16, ys *int16, count int32, yref float64, flags ShadedFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS16, int16](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS16, int16](ys)
	C.ImPlot_PlotShaded_S16PtrS16PtrInt(label_idArg, xsArg, ysArg, C.int(count), C.double(yref), C.ImPlotShadedFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotShadedS16PtrS16PtrS16PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImS16)
func PlotShadedS16PtrS16PtrS16PtrV(label_id string, xs *int16, ys1 *int16, ys2 *int16, count int32, flags ShadedFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS16, int16](xs)
	ys1Arg, ys1Fin := internal.WrapNumberPtr[C.ImS16, int16](ys1)
	ys2Arg, ys2Fin := internal.WrapNumberPtr[C.ImS16, int16](ys2)
	C.ImPlot_PlotShaded_S16PtrS16PtrS16Ptr(label_idArg, xsArg, ys1Arg, ys2Arg, C.int(count), C.ImPlotShadedFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ys1Fin()
	ys2Fin()
}

// PlotShadedS32PtrIntV parameter default value hint:
// yref: 0
// xscale: 1
// xstart: 0
// flags: 0
// offset: 0
// stride: sizeof(ImS32)
func PlotShadedS32PtrIntV(label_id string, values *int32, count int32, yref float64, xscale float64, xstart float64, flags ShadedFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS32, int32](values)
	C.ImPlot_PlotShaded_S32PtrInt(label_idArg, valuesArg, C.int(count), C.double(yref), C.double(xscale), C.double(xstart), C.ImPlotShadedFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotShadedS32PtrS32PtrIntV parameter default value hint:
// yref: 0
// flags: 0
// offset: 0
// stride: sizeof(ImS32)
func PlotShadedS32PtrS32PtrIntV(label_id string, xs *int32, ys *int32, count int32, yref float64, flags ShadedFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS32, int32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS32, int32](ys)
	C.ImPlot_PlotShaded_S32PtrS32PtrInt(label_idArg, xsArg, ysArg, C.int(count), C.double(yref), C.ImPlotShadedFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotShadedS32PtrS32PtrS32PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImS32)
func PlotShadedS32PtrS32PtrS32PtrV(label_id string, xs *int32, ys1 *int32, ys2 *int32, count int32, flags ShadedFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS32, int32](xs)
	ys1Arg, ys1Fin := internal.WrapNumberPtr[C.ImS32, int32](ys1)
	ys2Arg, ys2Fin := internal.WrapNumberPtr[C.ImS32, int32](ys2)
	C.ImPlot_PlotShaded_S32PtrS32PtrS32Ptr(label_idArg, xsArg, ys1Arg, ys2Arg, C.int(count), C.ImPlotShadedFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ys1Fin()
	ys2Fin()
}

// PlotShadedS64PtrIntV parameter default value hint:
// yref: 0
// xscale: 1
// xstart: 0
// flags: 0
// offset: 0
// stride: sizeof(ImS64)
func PlotShadedS64PtrIntV(label_id string, values []int64, count int32, yref float64, xscale float64, xstart float64, flags ShadedFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.ImPlot_PlotShaded_S64PtrInt(label_idArg, (*C.longlong)(&(values[0])), C.int(count), C.double(yref), C.double(xscale), C.double(xstart), C.ImPlotShadedFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
}

// PlotShadedS64PtrS64PtrIntV parameter default value hint:
// yref: 0
// flags: 0
// offset: 0
// stride: sizeof(ImS64)
func PlotShadedS64PtrS64PtrIntV(label_id string, xs []int64, ys []int64, count int32, yref float64, flags ShadedFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.ImPlot_PlotShaded_S64PtrS64PtrInt(label_idArg, (*C.longlong)(&(xs[0])), (*C.longlong)(&(ys[0])), C.int(count), C.double(yref), C.ImPlotShadedFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
}

// PlotShadedS64PtrS64PtrS64PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImS64)
func PlotShadedS64PtrS64PtrS64PtrV(label_id string, xs []int64, ys1 []int64, ys2 []int64, count int32, flags ShadedFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.ImPlot_PlotShaded_S64PtrS64PtrS64Ptr(label_idArg, (*C.longlong)(&(xs[0])), (*C.longlong)(&(ys1[0])), (*C.longlong)(&(ys2[0])), C.int(count), C.ImPlotShadedFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
}

// PlotShadedS8PtrIntV parameter default value hint:
// yref: 0
// xscale: 1
// xstart: 0
// flags: 0
// offset: 0
// stride: sizeof(ImS8)
func PlotShadedS8PtrIntV(label_id string, values *int8, count int32, yref float64, xscale float64, xstart float64, flags ShadedFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS8, int8](values)
	C.ImPlot_PlotShaded_S8PtrInt(label_idArg, valuesArg, C.int(count), C.double(yref), C.double(xscale), C.double(xstart), C.ImPlotShadedFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotShadedS8PtrS8PtrIntV parameter default value hint:
// yref: 0
// flags: 0
// offset: 0
// stride: sizeof(ImS8)
func PlotShadedS8PtrS8PtrIntV(label_id string, xs *int8, ys *int8, count int32, yref float64, flags ShadedFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS8, int8](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS8, int8](ys)
	C.ImPlot_PlotShaded_S8PtrS8PtrInt(label_idArg, xsArg, ysArg, C.int(count), C.double(yref), C.ImPlotShadedFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotShadedS8PtrS8PtrS8PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImS8)
func PlotShadedS8PtrS8PtrS8PtrV(label_id string, xs *int8, ys1 *int8, ys2 *int8, count int32, flags ShadedFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS8, int8](xs)
	ys1Arg, ys1Fin := internal.WrapNumberPtr[C.ImS8, int8](ys1)
	ys2Arg, ys2Fin := internal.WrapNumberPtr[C.ImS8, int8](ys2)
	C.ImPlot_PlotShaded_S8PtrS8PtrS8Ptr(label_idArg, xsArg, ys1Arg, ys2Arg, C.int(count), C.ImPlotShadedFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ys1Fin()
	ys2Fin()
}

// PlotShadedU16PtrIntV parameter default value hint:
// yref: 0
// xscale: 1
// xstart: 0
// flags: 0
// offset: 0
// stride: sizeof(ImU16)
func PlotShadedU16PtrIntV(label_id string, values *uint16, count int32, yref float64, xscale float64, xstart float64, flags ShadedFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU16, uint16](values)
	C.ImPlot_PlotShaded_U16PtrInt(label_idArg, valuesArg, C.int(count), C.double(yref), C.double(xscale), C.double(xstart), C.ImPlotShadedFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotShadedU16PtrU16PtrIntV parameter default value hint:
// yref: 0
// flags: 0
// offset: 0
// stride: sizeof(ImU16)
func PlotShadedU16PtrU16PtrIntV(label_id string, xs *uint16, ys *uint16, count int32, yref float64, flags ShadedFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU16, uint16](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU16, uint16](ys)
	C.ImPlot_PlotShaded_U16PtrU16PtrInt(label_idArg, xsArg, ysArg, C.int(count), C.double(yref), C.ImPlotShadedFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotShadedU16PtrU16PtrU16PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImU16)
func PlotShadedU16PtrU16PtrU16PtrV(label_id string, xs *uint16, ys1 *uint16, ys2 *uint16, count int32, flags ShadedFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU16, uint16](xs)
	ys1Arg, ys1Fin := internal.WrapNumberPtr[C.ImU16, uint16](ys1)
	ys2Arg, ys2Fin := internal.WrapNumberPtr[C.ImU16, uint16](ys2)
	C.ImPlot_PlotShaded_U16PtrU16PtrU16Ptr(label_idArg, xsArg, ys1Arg, ys2Arg, C.int(count), C.ImPlotShadedFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ys1Fin()
	ys2Fin()
}

// PlotShadedU32PtrIntV parameter default value hint:
// yref: 0
// xscale: 1
// xstart: 0
// flags: 0
// offset: 0
// stride: sizeof(ImU32)
func PlotShadedU32PtrIntV(label_id string, values *uint32, count int32, yref float64, xscale float64, xstart float64, flags ShadedFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU32, uint32](values)
	C.ImPlot_PlotShaded_U32PtrInt(label_idArg, valuesArg, C.int(count), C.double(yref), C.double(xscale), C.double(xstart), C.ImPlotShadedFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotShadedU32PtrU32PtrIntV parameter default value hint:
// yref: 0
// flags: 0
// offset: 0
// stride: sizeof(ImU32)
func PlotShadedU32PtrU32PtrIntV(label_id string, xs *uint32, ys *uint32, count int32, yref float64, flags ShadedFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU32, uint32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU32, uint32](ys)
	C.ImPlot_PlotShaded_U32PtrU32PtrInt(label_idArg, xsArg, ysArg, C.int(count), C.double(yref), C.ImPlotShadedFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotShadedU32PtrU32PtrU32PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImU32)
func PlotShadedU32PtrU32PtrU32PtrV(label_id string, xs *uint32, ys1 *uint32, ys2 *uint32, count int32, flags ShadedFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU32, uint32](xs)
	ys1Arg, ys1Fin := internal.WrapNumberPtr[C.ImU32, uint32](ys1)
	ys2Arg, ys2Fin := internal.WrapNumberPtr[C.ImU32, uint32](ys2)
	C.ImPlot_PlotShaded_U32PtrU32PtrU32Ptr(label_idArg, xsArg, ys1Arg, ys2Arg, C.int(count), C.ImPlotShadedFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ys1Fin()
	ys2Fin()
}

// PlotShadedU64PtrIntV parameter default value hint:
// yref: 0
// xscale: 1
// xstart: 0
// flags: 0
// offset: 0
// stride: sizeof(ImU64)
func PlotShadedU64PtrIntV(label_id string, values []uint64, count int32, yref float64, xscale float64, xstart float64, flags ShadedFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.ImPlot_PlotShaded_U64PtrInt(label_idArg, (*C.ulonglong)(&(values[0])), C.int(count), C.double(yref), C.double(xscale), C.double(xstart), C.ImPlotShadedFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
}

// PlotShadedU64PtrU64PtrIntV parameter default value hint:
// yref: 0
// flags: 0
// offset: 0
// stride: sizeof(ImU64)
func PlotShadedU64PtrU64PtrIntV(label_id string, xs []uint64, ys []uint64, count int32, yref float64, flags ShadedFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.ImPlot_PlotShaded_U64PtrU64PtrInt(label_idArg, (*C.ulonglong)(&(xs[0])), (*C.ulonglong)(&(ys[0])), C.int(count), C.double(yref), C.ImPlotShadedFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
}

// PlotShadedU64PtrU64PtrU64PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImU64)
func PlotShadedU64PtrU64PtrU64PtrV(label_id string, xs []uint64, ys1 []uint64, ys2 []uint64, count int32, flags ShadedFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.ImPlot_PlotShaded_U64PtrU64PtrU64Ptr(label_idArg, (*C.ulonglong)(&(xs[0])), (*C.ulonglong)(&(ys1[0])), (*C.ulonglong)(&(ys2[0])), C.int(count), C.ImPlotShadedFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
}

// PlotShadedU8PtrIntV parameter default value hint:
// yref: 0
// xscale: 1
// xstart: 0
// flags: 0
// offset: 0
// stride: sizeof(ImU8)
func PlotShadedU8PtrIntV(label_id string, values *byte, count int32, yref float64, xscale float64, xstart float64, flags ShadedFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU8, byte](values)
	C.ImPlot_PlotShaded_U8PtrInt(label_idArg, valuesArg, C.int(count), C.double(yref), C.double(xscale), C.double(xstart), C.ImPlotShadedFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotShadedU8PtrU8PtrIntV parameter default value hint:
// yref: 0
// flags: 0
// offset: 0
// stride: sizeof(ImU8)
func PlotShadedU8PtrU8PtrIntV(label_id string, xs *byte, ys *byte, count int32, yref float64, flags ShadedFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU8, byte](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU8, byte](ys)
	C.ImPlot_PlotShaded_U8PtrU8PtrInt(label_idArg, xsArg, ysArg, C.int(count), C.double(yref), C.ImPlotShadedFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotShadedU8PtrU8PtrU8PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImU8)
func PlotShadedU8PtrU8PtrU8PtrV(label_id string, xs *byte, ys1 *byte, ys2 *byte, count int32, flags ShadedFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU8, byte](xs)
	ys1Arg, ys1Fin := internal.WrapNumberPtr[C.ImU8, byte](ys1)
	ys2Arg, ys2Fin := internal.WrapNumberPtr[C.ImU8, byte](ys2)
	C.ImPlot_PlotShaded_U8PtrU8PtrU8Ptr(label_idArg, xsArg, ys1Arg, ys2Arg, C.int(count), C.ImPlotShadedFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ys1Fin()
	ys2Fin()
}

// PlotShadeddoublePtrIntV parameter default value hint:
// yref: 0
// xscale: 1
// xstart: 0
// flags: 0
// offset: 0
// stride: sizeof(double)
func PlotShadeddoublePtrIntV(label_id string, values *float64, count int32, yref float64, xscale float64, xstart float64, flags ShadedFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.double, float64](values)
	C.ImPlot_PlotShaded_doublePtrInt(label_idArg, valuesArg, C.int(count), C.double(yref), C.double(xscale), C.double(xstart), C.ImPlotShadedFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotShadeddoublePtrdoublePtrIntV parameter default value hint:
// yref: 0
// flags: 0
// offset: 0
// stride: sizeof(double)
func PlotShadeddoublePtrdoublePtrIntV(label_id string, xs *float64, ys *float64, count int32, yref float64, flags ShadedFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.double, float64](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.double, float64](ys)
	C.ImPlot_PlotShaded_doublePtrdoublePtrInt(label_idArg, xsArg, ysArg, C.int(count), C.double(yref), C.ImPlotShadedFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotShadeddoublePtrdoublePtrdoublePtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(double)
func PlotShadeddoublePtrdoublePtrdoublePtrV(label_id string, xs *float64, ys1 *float64, ys2 *float64, count int32, flags ShadedFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.double, float64](xs)
	ys1Arg, ys1Fin := internal.WrapNumberPtr[C.double, float64](ys1)
	ys2Arg, ys2Fin := internal.WrapNumberPtr[C.double, float64](ys2)
	C.ImPlot_PlotShaded_doublePtrdoublePtrdoublePtr(label_idArg, xsArg, ys1Arg, ys2Arg, C.int(count), C.ImPlotShadedFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ys1Fin()
	ys2Fin()
}

// PlotStairsFloatPtrFloatPtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(float)
func PlotStairsFloatPtrFloatPtrV(label_id string, xs *float32, ys *float32, count int32, flags StairsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.float, float32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.float, float32](ys)
	C.ImPlot_PlotStairs_FloatPtrFloatPtr(label_idArg, xsArg, ysArg, C.int(count), C.ImPlotStairsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotStairsFloatPtrIntV parameter default value hint:
// xscale: 1
// xstart: 0
// flags: 0
// offset: 0
// stride: sizeof(float)
func PlotStairsFloatPtrIntV(label_id string, values *float32, count int32, xscale float64, xstart float64, flags StairsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.float, float32](values)
	C.ImPlot_PlotStairs_FloatPtrInt(label_idArg, valuesArg, C.int(count), C.double(xscale), C.double(xstart), C.ImPlotStairsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotStairsS16PtrIntV parameter default value hint:
// xscale: 1
// xstart: 0
// flags: 0
// offset: 0
// stride: sizeof(ImS16)
func PlotStairsS16PtrIntV(label_id string, values *int16, count int32, xscale float64, xstart float64, flags StairsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS16, int16](values)
	C.ImPlot_PlotStairs_S16PtrInt(label_idArg, valuesArg, C.int(count), C.double(xscale), C.double(xstart), C.ImPlotStairsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotStairsS16PtrS16PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImS16)
func PlotStairsS16PtrS16PtrV(label_id string, xs *int16, ys *int16, count int32, flags StairsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS16, int16](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS16, int16](ys)
	C.ImPlot_PlotStairs_S16PtrS16Ptr(label_idArg, xsArg, ysArg, C.int(count), C.ImPlotStairsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotStairsS32PtrIntV parameter default value hint:
// xscale: 1
// xstart: 0
// flags: 0
// offset: 0
// stride: sizeof(ImS32)
func PlotStairsS32PtrIntV(label_id string, values *int32, count int32, xscale float64, xstart float64, flags StairsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS32, int32](values)
	C.ImPlot_PlotStairs_S32PtrInt(label_idArg, valuesArg, C.int(count), C.double(xscale), C.double(xstart), C.ImPlotStairsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotStairsS32PtrS32PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImS32)
func PlotStairsS32PtrS32PtrV(label_id string, xs *int32, ys *int32, count int32, flags StairsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS32, int32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS32, int32](ys)
	C.ImPlot_PlotStairs_S32PtrS32Ptr(label_idArg, xsArg, ysArg, C.int(count), C.ImPlotStairsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotStairsS64PtrIntV parameter default value hint:
// xscale: 1
// xstart: 0
// flags: 0
// offset: 0
// stride: sizeof(ImS64)
func PlotStairsS64PtrIntV(label_id string, values []int64, count int32, xscale float64, xstart float64, flags StairsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.ImPlot_PlotStairs_S64PtrInt(label_idArg, (*C.longlong)(&(values[0])), C.int(count), C.double(xscale), C.double(xstart), C.ImPlotStairsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
}

// PlotStairsS64PtrS64PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImS64)
func PlotStairsS64PtrS64PtrV(label_id string, xs []int64, ys []int64, count int32, flags StairsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.ImPlot_PlotStairs_S64PtrS64Ptr(label_idArg, (*C.longlong)(&(xs[0])), (*C.longlong)(&(ys[0])), C.int(count), C.ImPlotStairsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
}

// PlotStairsS8PtrIntV parameter default value hint:
// xscale: 1
// xstart: 0
// flags: 0
// offset: 0
// stride: sizeof(ImS8)
func PlotStairsS8PtrIntV(label_id string, values *int8, count int32, xscale float64, xstart float64, flags StairsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS8, int8](values)
	C.ImPlot_PlotStairs_S8PtrInt(label_idArg, valuesArg, C.int(count), C.double(xscale), C.double(xstart), C.ImPlotStairsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotStairsS8PtrS8PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImS8)
func PlotStairsS8PtrS8PtrV(label_id string, xs *int8, ys *int8, count int32, flags StairsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS8, int8](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS8, int8](ys)
	C.ImPlot_PlotStairs_S8PtrS8Ptr(label_idArg, xsArg, ysArg, C.int(count), C.ImPlotStairsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotStairsU16PtrIntV parameter default value hint:
// xscale: 1
// xstart: 0
// flags: 0
// offset: 0
// stride: sizeof(ImU16)
func PlotStairsU16PtrIntV(label_id string, values *uint16, count int32, xscale float64, xstart float64, flags StairsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU16, uint16](values)
	C.ImPlot_PlotStairs_U16PtrInt(label_idArg, valuesArg, C.int(count), C.double(xscale), C.double(xstart), C.ImPlotStairsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotStairsU16PtrU16PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImU16)
func PlotStairsU16PtrU16PtrV(label_id string, xs *uint16, ys *uint16, count int32, flags StairsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU16, uint16](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU16, uint16](ys)
	C.ImPlot_PlotStairs_U16PtrU16Ptr(label_idArg, xsArg, ysArg, C.int(count), C.ImPlotStairsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotStairsU32PtrIntV parameter default value hint:
// xscale: 1
// xstart: 0
// flags: 0
// offset: 0
// stride: sizeof(ImU32)
func PlotStairsU32PtrIntV(label_id string, values *uint32, count int32, xscale float64, xstart float64, flags StairsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU32, uint32](values)
	C.ImPlot_PlotStairs_U32PtrInt(label_idArg, valuesArg, C.int(count), C.double(xscale), C.double(xstart), C.ImPlotStairsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotStairsU32PtrU32PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImU32)
func PlotStairsU32PtrU32PtrV(label_id string, xs *uint32, ys *uint32, count int32, flags StairsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU32, uint32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU32, uint32](ys)
	C.ImPlot_PlotStairs_U32PtrU32Ptr(label_idArg, xsArg, ysArg, C.int(count), C.ImPlotStairsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotStairsU64PtrIntV parameter default value hint:
// xscale: 1
// xstart: 0
// flags: 0
// offset: 0
// stride: sizeof(ImU64)
func PlotStairsU64PtrIntV(label_id string, values []uint64, count int32, xscale float64, xstart float64, flags StairsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.ImPlot_PlotStairs_U64PtrInt(label_idArg, (*C.ulonglong)(&(values[0])), C.int(count), C.double(xscale), C.double(xstart), C.ImPlotStairsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
}

// PlotStairsU64PtrU64PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImU64)
func PlotStairsU64PtrU64PtrV(label_id string, xs []uint64, ys []uint64, count int32, flags StairsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.ImPlot_PlotStairs_U64PtrU64Ptr(label_idArg, (*C.ulonglong)(&(xs[0])), (*C.ulonglong)(&(ys[0])), C.int(count), C.ImPlotStairsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
}

// PlotStairsU8PtrIntV parameter default value hint:
// xscale: 1
// xstart: 0
// flags: 0
// offset: 0
// stride: sizeof(ImU8)
func PlotStairsU8PtrIntV(label_id string, values *byte, count int32, xscale float64, xstart float64, flags StairsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU8, byte](values)
	C.ImPlot_PlotStairs_U8PtrInt(label_idArg, valuesArg, C.int(count), C.double(xscale), C.double(xstart), C.ImPlotStairsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotStairsU8PtrU8PtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(ImU8)
func PlotStairsU8PtrU8PtrV(label_id string, xs *byte, ys *byte, count int32, flags StairsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU8, byte](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU8, byte](ys)
	C.ImPlot_PlotStairs_U8PtrU8Ptr(label_idArg, xsArg, ysArg, C.int(count), C.ImPlotStairsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotStairsdoublePtrIntV parameter default value hint:
// xscale: 1
// xstart: 0
// flags: 0
// offset: 0
// stride: sizeof(double)
func PlotStairsdoublePtrIntV(label_id string, values *float64, count int32, xscale float64, xstart float64, flags StairsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.double, float64](values)
	C.ImPlot_PlotStairs_doublePtrInt(label_idArg, valuesArg, C.int(count), C.double(xscale), C.double(xstart), C.ImPlotStairsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotStairsdoublePtrdoublePtrV parameter default value hint:
// flags: 0
// offset: 0
// stride: sizeof(double)
func PlotStairsdoublePtrdoublePtrV(label_id string, xs *float64, ys *float64, count int32, flags StairsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.double, float64](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.double, float64](ys)
	C.ImPlot_PlotStairs_doublePtrdoublePtr(label_idArg, xsArg, ysArg, C.int(count), C.ImPlotStairsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotStemsFloatPtrFloatPtrV parameter default value hint:
// ref: 0
// flags: 0
// offset: 0
// stride: sizeof(float)
func PlotStemsFloatPtrFloatPtrV(label_id string, xs *float32, ys *float32, count int32, ref float64, flags StemsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.float, float32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.float, float32](ys)
	C.ImPlot_PlotStems_FloatPtrFloatPtr(label_idArg, xsArg, ysArg, C.int(count), C.double(ref), C.ImPlotStemsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotStemsFloatPtrIntV parameter default value hint:
// ref: 0
// scale: 1
// start: 0
// flags: 0
// offset: 0
// stride: sizeof(float)
func PlotStemsFloatPtrIntV(label_id string, values *float32, count int32, ref float64, scale float64, start float64, flags StemsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.float, float32](values)
	C.ImPlot_PlotStems_FloatPtrInt(label_idArg, valuesArg, C.int(count), C.double(ref), C.double(scale), C.double(start), C.ImPlotStemsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotStemsS16PtrIntV parameter default value hint:
// ref: 0
// scale: 1
// start: 0
// flags: 0
// offset: 0
// stride: sizeof(ImS16)
func PlotStemsS16PtrIntV(label_id string, values *int16, count int32, ref float64, scale float64, start float64, flags StemsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS16, int16](values)
	C.ImPlot_PlotStems_S16PtrInt(label_idArg, valuesArg, C.int(count), C.double(ref), C.double(scale), C.double(start), C.ImPlotStemsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotStemsS16PtrS16PtrV parameter default value hint:
// ref: 0
// flags: 0
// offset: 0
// stride: sizeof(ImS16)
func PlotStemsS16PtrS16PtrV(label_id string, xs *int16, ys *int16, count int32, ref float64, flags StemsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS16, int16](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS16, int16](ys)
	C.ImPlot_PlotStems_S16PtrS16Ptr(label_idArg, xsArg, ysArg, C.int(count), C.double(ref), C.ImPlotStemsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotStemsS32PtrIntV parameter default value hint:
// ref: 0
// scale: 1
// start: 0
// flags: 0
// offset: 0
// stride: sizeof(ImS32)
func PlotStemsS32PtrIntV(label_id string, values *int32, count int32, ref float64, scale float64, start float64, flags StemsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS32, int32](values)
	C.ImPlot_PlotStems_S32PtrInt(label_idArg, valuesArg, C.int(count), C.double(ref), C.double(scale), C.double(start), C.ImPlotStemsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotStemsS32PtrS32PtrV parameter default value hint:
// ref: 0
// flags: 0
// offset: 0
// stride: sizeof(ImS32)
func PlotStemsS32PtrS32PtrV(label_id string, xs *int32, ys *int32, count int32, ref float64, flags StemsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS32, int32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS32, int32](ys)
	C.ImPlot_PlotStems_S32PtrS32Ptr(label_idArg, xsArg, ysArg, C.int(count), C.double(ref), C.ImPlotStemsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotStemsS64PtrIntV parameter default value hint:
// ref: 0
// scale: 1
// start: 0
// flags: 0
// offset: 0
// stride: sizeof(ImS64)
func PlotStemsS64PtrIntV(label_id string, values []int64, count int32, ref float64, scale float64, start float64, flags StemsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.ImPlot_PlotStems_S64PtrInt(label_idArg, (*C.longlong)(&(values[0])), C.int(count), C.double(ref), C.double(scale), C.double(start), C.ImPlotStemsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
}

// PlotStemsS64PtrS64PtrV parameter default value hint:
// ref: 0
// flags: 0
// offset: 0
// stride: sizeof(ImS64)
func PlotStemsS64PtrS64PtrV(label_id string, xs []int64, ys []int64, count int32, ref float64, flags StemsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.ImPlot_PlotStems_S64PtrS64Ptr(label_idArg, (*C.longlong)(&(xs[0])), (*C.longlong)(&(ys[0])), C.int(count), C.double(ref), C.ImPlotStemsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
}

// PlotStemsS8PtrIntV parameter default value hint:
// ref: 0
// scale: 1
// start: 0
// flags: 0
// offset: 0
// stride: sizeof(ImS8)
func PlotStemsS8PtrIntV(label_id string, values *int8, count int32, ref float64, scale float64, start float64, flags StemsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS8, int8](values)
	C.ImPlot_PlotStems_S8PtrInt(label_idArg, valuesArg, C.int(count), C.double(ref), C.double(scale), C.double(start), C.ImPlotStemsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotStemsS8PtrS8PtrV parameter default value hint:
// ref: 0
// flags: 0
// offset: 0
// stride: sizeof(ImS8)
func PlotStemsS8PtrS8PtrV(label_id string, xs *int8, ys *int8, count int32, ref float64, flags StemsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS8, int8](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS8, int8](ys)
	C.ImPlot_PlotStems_S8PtrS8Ptr(label_idArg, xsArg, ysArg, C.int(count), C.double(ref), C.ImPlotStemsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotStemsU16PtrIntV parameter default value hint:
// ref: 0
// scale: 1
// start: 0
// flags: 0
// offset: 0
// stride: sizeof(ImU16)
func PlotStemsU16PtrIntV(label_id string, values *uint16, count int32, ref float64, scale float64, start float64, flags StemsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU16, uint16](values)
	C.ImPlot_PlotStems_U16PtrInt(label_idArg, valuesArg, C.int(count), C.double(ref), C.double(scale), C.double(start), C.ImPlotStemsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotStemsU16PtrU16PtrV parameter default value hint:
// ref: 0
// flags: 0
// offset: 0
// stride: sizeof(ImU16)
func PlotStemsU16PtrU16PtrV(label_id string, xs *uint16, ys *uint16, count int32, ref float64, flags StemsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU16, uint16](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU16, uint16](ys)
	C.ImPlot_PlotStems_U16PtrU16Ptr(label_idArg, xsArg, ysArg, C.int(count), C.double(ref), C.ImPlotStemsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotStemsU32PtrIntV parameter default value hint:
// ref: 0
// scale: 1
// start: 0
// flags: 0
// offset: 0
// stride: sizeof(ImU32)
func PlotStemsU32PtrIntV(label_id string, values *uint32, count int32, ref float64, scale float64, start float64, flags StemsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU32, uint32](values)
	C.ImPlot_PlotStems_U32PtrInt(label_idArg, valuesArg, C.int(count), C.double(ref), C.double(scale), C.double(start), C.ImPlotStemsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotStemsU32PtrU32PtrV parameter default value hint:
// ref: 0
// flags: 0
// offset: 0
// stride: sizeof(ImU32)
func PlotStemsU32PtrU32PtrV(label_id string, xs *uint32, ys *uint32, count int32, ref float64, flags StemsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU32, uint32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU32, uint32](ys)
	C.ImPlot_PlotStems_U32PtrU32Ptr(label_idArg, xsArg, ysArg, C.int(count), C.double(ref), C.ImPlotStemsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotStemsU64PtrIntV parameter default value hint:
// ref: 0
// scale: 1
// start: 0
// flags: 0
// offset: 0
// stride: sizeof(ImU64)
func PlotStemsU64PtrIntV(label_id string, values []uint64, count int32, ref float64, scale float64, start float64, flags StemsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.ImPlot_PlotStems_U64PtrInt(label_idArg, (*C.ulonglong)(&(values[0])), C.int(count), C.double(ref), C.double(scale), C.double(start), C.ImPlotStemsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
}

// PlotStemsU64PtrU64PtrV parameter default value hint:
// ref: 0
// flags: 0
// offset: 0
// stride: sizeof(ImU64)
func PlotStemsU64PtrU64PtrV(label_id string, xs []uint64, ys []uint64, count int32, ref float64, flags StemsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.ImPlot_PlotStems_U64PtrU64Ptr(label_idArg, (*C.ulonglong)(&(xs[0])), (*C.ulonglong)(&(ys[0])), C.int(count), C.double(ref), C.ImPlotStemsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
}

// PlotStemsU8PtrIntV parameter default value hint:
// ref: 0
// scale: 1
// start: 0
// flags: 0
// offset: 0
// stride: sizeof(ImU8)
func PlotStemsU8PtrIntV(label_id string, values *byte, count int32, ref float64, scale float64, start float64, flags StemsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU8, byte](values)
	C.ImPlot_PlotStems_U8PtrInt(label_idArg, valuesArg, C.int(count), C.double(ref), C.double(scale), C.double(start), C.ImPlotStemsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotStemsU8PtrU8PtrV parameter default value hint:
// ref: 0
// flags: 0
// offset: 0
// stride: sizeof(ImU8)
func PlotStemsU8PtrU8PtrV(label_id string, xs *byte, ys *byte, count int32, ref float64, flags StemsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU8, byte](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU8, byte](ys)
	C.ImPlot_PlotStems_U8PtrU8Ptr(label_idArg, xsArg, ysArg, C.int(count), C.double(ref), C.ImPlotStemsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotStemsdoublePtrIntV parameter default value hint:
// ref: 0
// scale: 1
// start: 0
// flags: 0
// offset: 0
// stride: sizeof(double)
func PlotStemsdoublePtrIntV(label_id string, values *float64, count int32, ref float64, scale float64, start float64, flags StemsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.double, float64](values)
	C.ImPlot_PlotStems_doublePtrInt(label_idArg, valuesArg, C.int(count), C.double(ref), C.double(scale), C.double(start), C.ImPlotStemsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	valuesFin()
}

// PlotStemsdoublePtrdoublePtrV parameter default value hint:
// ref: 0
// flags: 0
// offset: 0
// stride: sizeof(double)
func PlotStemsdoublePtrdoublePtrV(label_id string, xs *float64, ys *float64, count int32, ref float64, flags StemsFlags, offset int32, stride int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.double, float64](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.double, float64](ys)
	C.ImPlot_PlotStems_doublePtrdoublePtr(label_idArg, xsArg, ysArg, C.int(count), C.double(ref), C.ImPlotStemsFlags(flags), C.int(offset), C.int(stride))

	label_idFin()
	xsFin()
	ysFin()
}

// PlotTextV parameter default value hint:
// pix_offset: ImVec2(0,0)
// flags: 0
func PlotTextV(text string, x float64, y float64, pix_offset imgui.Vec2, flags TextFlags) {
	textArg, textFin := internal.WrapString[C.char](text)
	C.ImPlot_PlotText(textArg, C.double(x), C.double(y), internal.ReinterpretCast[C.ImVec2](pix_offset.ToC()), C.ImPlotTextFlags(flags))

	textFin()
}

// PlotToPixelsPlotPoIntV parameter default value hint:
// x_axis: -1
// y_axis: -1
func PlotToPixelsPlotPoIntV(plt PlotPoint, x_axis AxisEnum, y_axis AxisEnum) imgui.Vec2 {
	pOut := new(imgui.Vec2)
	pOutArg, pOutFin := internal.Wrap(pOut)

	C.ImPlot_PlotToPixels_PlotPoInt(internal.ReinterpretCast[*C.ImVec2](pOutArg), internal.ReinterpretCast[C.ImPlotPoint](plt.ToC()), C.ImAxis(x_axis), C.ImAxis(y_axis))

	pOutFin()

	return *pOut
}

// PlotToPixelsdoubleV parameter default value hint:
// x_axis: -1
// y_axis: -1
func PlotToPixelsdoubleV(x float64, y float64, x_axis AxisEnum, y_axis AxisEnum) imgui.Vec2 {
	pOut := new(imgui.Vec2)
	pOutArg, pOutFin := internal.Wrap(pOut)

	C.ImPlot_PlotToPixels_double(internal.ReinterpretCast[*C.ImVec2](pOutArg), C.double(x), C.double(y), C.ImAxis(x_axis), C.ImAxis(y_axis))

	pOutFin()

	return *pOut
}

// PopColormapV parameter default value hint:
// count: 1
func PopColormapV(count int32) {
	C.ImPlot_PopColormap(C.int(count))
}

func PopPlotClipRect() {
	C.ImPlot_PopPlotClipRect()
}

// PopStyleColorV parameter default value hint:
// count: 1
func PopStyleColorV(count int32) {
	C.ImPlot_PopStyleColor(C.int(count))
}

// PopStyleVarV parameter default value hint:
// count: 1
func PopStyleVarV(count int32) {
	C.ImPlot_PopStyleVar(C.int(count))
}

func Precision(val float64) int32 {
	return int32(C.ImPlot_Precision(C.double(val)))
}

func PushColormapPlotColormap(cmap Colormap) {
	C.ImPlot_PushColormap_PlotColormap(C.ImPlotColormap(cmap))
}

func PushColormapStr(name string) {
	nameArg, nameFin := internal.WrapString[C.char](name)
	C.ImPlot_PushColormap_Str(nameArg)

	nameFin()
}

// PushPlotClipRectV parameter default value hint:
// expand: 0
func PushPlotClipRectV(expand float32) {
	C.ImPlot_PushPlotClipRect(C.float(expand))
}

func PushStyleColorU32(idx Col, col uint32) {
	C.ImPlot_PushStyleColor_U32(C.ImPlotCol(idx), C.ImU32(col))
}

func PushStyleColorVec4(idx Col, col imgui.Vec4) {
	C.ImPlot_PushStyleColor_Vec4(C.ImPlotCol(idx), internal.ReinterpretCast[C.ImVec4](col.ToC()))
}

func PushStyleVarFloat(idx StyleVar, val float32) {
	C.ImPlot_PushStyleVar_Float(C.ImPlotStyleVar(idx), C.float(val))
}

func PushStyleVarInt(idx StyleVar, val int32) {
	C.ImPlot_PushStyleVar_Int(C.ImPlotStyleVar(idx), C.int(val))
}

func PushStyleVarVec2(idx StyleVar, val imgui.Vec2) {
	C.ImPlot_PushStyleVar_Vec2(C.ImPlotStyleVar(idx), internal.ReinterpretCast[C.ImVec2](val.ToC()))
}

func RangesOverlap(r1 Range, r2 Range) bool {
	r1Arg, r1Fin := r1.C()
	r2Arg, r2Fin := r2.C()

	defer func() {
		r1Fin()
		r2Fin()
	}()
	return C.ImPlot_RangesOverlap(internal.ReinterpretCast[C.ImPlotRange](r1Arg), internal.ReinterpretCast[C.ImPlotRange](r2Arg)) == C.bool(true)
}

// RegisterOrGetItemV parameter default value hint:
// just_created: nullptr
func RegisterOrGetItemV(label_id string, flags ItemFlags, just_created *bool) *Item {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	just_createdArg, just_createdFin := internal.WrapNumberPtr[C.bool, bool](just_created)

	defer func() {
		label_idFin()
		just_createdFin()
	}()
	return NewItemFromC(C.ImPlot_RegisterOrGetItem(label_idArg, C.ImPlotItemFlags(flags), just_createdArg))
}

func RenderColorBar(colors *uint32, size int32, DrawList *imgui.DrawList, bounds imgui.Rect, vert bool, reversed bool, continuous bool) {
	colorsArg, colorsFin := internal.WrapNumberPtr[C.ImU32, uint32](colors)
	DrawListArg, DrawListFin := DrawList.Handle()
	C.ImPlot_RenderColorBar(colorsArg, C.int(size), internal.ReinterpretCast[*C.ImDrawList](DrawListArg), internal.ReinterpretCast[C.ImRect](bounds.ToC()), C.bool(vert), C.bool(reversed), C.bool(continuous))

	colorsFin()
	DrawListFin()
}

func ResetCtxForNextAlignedPlots(ctx *Context) {
	ctxArg, ctxFin := ctx.Handle()
	C.ImPlot_ResetCtxForNextAlignedPlots(internal.ReinterpretCast[*C.ImPlotContext](ctxArg))

	ctxFin()
}

func ResetCtxForNextPlot(ctx *Context) {
	ctxArg, ctxFin := ctx.Handle()
	C.ImPlot_ResetCtxForNextPlot(internal.ReinterpretCast[*C.ImPlotContext](ctxArg))

	ctxFin()
}

func ResetCtxForNextSubplot(ctx *Context) {
	ctxArg, ctxFin := ctx.Handle()
	C.ImPlot_ResetCtxForNextSubplot(internal.ReinterpretCast[*C.ImPlotContext](ctxArg))

	ctxFin()
}

func RoundTime(t PlotTime, unit TimeUnit) PlotTime {
	pOut := new(PlotTime)
	pOutArg, pOutFin := internal.Wrap(pOut)

	C.ImPlot_RoundTime(internal.ReinterpretCast[*C.ImPlotTime](pOutArg), internal.ReinterpretCast[C.ImPlotTime](t.ToC()), C.ImPlotTimeUnit(unit))

	pOutFin()

	return *pOut
}

func RoundTo(val float64, prec int32) float64 {
	return float64(C.ImPlot_RoundTo(C.double(val), C.int(prec)))
}

// SampleColormapV parameter default value hint:
// cmap: -1
func SampleColormapV(t float32, cmap Colormap) imgui.Vec4 {
	pOut := new(imgui.Vec4)
	pOutArg, pOutFin := internal.Wrap(pOut)

	C.ImPlot_SampleColormap(internal.ReinterpretCast[*C.ImVec4](pOutArg), C.float(t), C.ImPlotColormap(cmap))

	pOutFin()

	return *pOut
}

func SampleColormapU32(t float32, cmap Colormap) uint32 {
	return uint32(C.ImPlot_SampleColormapU32(C.float(t), C.ImPlotColormap(cmap)))
}

func SetAxes(x_axis AxisEnum, y_axis AxisEnum) {
	C.ImPlot_SetAxes(C.ImAxis(x_axis), C.ImAxis(y_axis))
}

func SetAxis(axis AxisEnum) {
	C.ImPlot_SetAxis(C.ImAxis(axis))
}

func SetCurrentContext(ctx *Context) {
	ctxArg, ctxFin := ctx.Handle()
	C.ImPlot_SetCurrentContext(internal.ReinterpretCast[*C.ImPlotContext](ctxArg))

	ctxFin()
}

func SetImGuiContext(ctx *imgui.Context) {
	ctxArg, ctxFin := ctx.Handle()
	C.ImPlot_SetImGuiContext(internal.ReinterpretCast[*C.ImGuiContext](ctxArg))

	ctxFin()
}

// SetNextAxesLimitsV parameter default value hint:
// cond: ImPlotCond_Once
func SetNextAxesLimitsV(x_min float64, x_max float64, y_min float64, y_max float64, cond Cond) {
	C.ImPlot_SetNextAxesLimits(C.double(x_min), C.double(x_max), C.double(y_min), C.double(y_max), C.ImPlotCond(cond))
}

func SetNextAxesToFit() {
	C.ImPlot_SetNextAxesToFit()
}

// SetNextAxisLimitsV parameter default value hint:
// cond: ImPlotCond_Once
func SetNextAxisLimitsV(axis AxisEnum, v_min float64, v_max float64, cond Cond) {
	C.ImPlot_SetNextAxisLimits(C.ImAxis(axis), C.double(v_min), C.double(v_max), C.ImPlotCond(cond))
}

func SetNextAxisLinks(axis AxisEnum, link_min *float64, link_max *float64) {
	link_minArg, link_minFin := internal.WrapNumberPtr[C.double, float64](link_min)
	link_maxArg, link_maxFin := internal.WrapNumberPtr[C.double, float64](link_max)
	C.ImPlot_SetNextAxisLinks(C.ImAxis(axis), link_minArg, link_maxArg)

	link_minFin()
	link_maxFin()
}

func SetNextAxisToFit(axis AxisEnum) {
	C.ImPlot_SetNextAxisToFit(C.ImAxis(axis))
}

// SetNextErrorBarStyleV parameter default value hint:
// col: ImVec4(0,0,0,-1)
// size: -1
// weight: -1
func SetNextErrorBarStyleV(col imgui.Vec4, size float32, weight float32) {
	C.ImPlot_SetNextErrorBarStyle(internal.ReinterpretCast[C.ImVec4](col.ToC()), C.float(size), C.float(weight))
}

// SetNextFillStyleV parameter default value hint:
// col: ImVec4(0,0,0,-1)
// alpha_mod: -1
func SetNextFillStyleV(col imgui.Vec4, alpha_mod float32) {
	C.ImPlot_SetNextFillStyle(internal.ReinterpretCast[C.ImVec4](col.ToC()), C.float(alpha_mod))
}

// SetNextLineStyleV parameter default value hint:
// col: ImVec4(0,0,0,-1)
// weight: -1
func SetNextLineStyleV(col imgui.Vec4, weight float32) {
	C.ImPlot_SetNextLineStyle(internal.ReinterpretCast[C.ImVec4](col.ToC()), C.float(weight))
}

// SetNextMarkerStyleV parameter default value hint:
// marker: -1
// size: -1
// fill: ImVec4(0,0,0,-1)
// weight: -1
// outline: ImVec4(0,0,0,-1)
func SetNextMarkerStyleV(marker Marker, size float32, fill imgui.Vec4, weight float32, outline imgui.Vec4) {
	C.ImPlot_SetNextMarkerStyle(C.ImPlotMarker(marker), C.float(size), internal.ReinterpretCast[C.ImVec4](fill.ToC()), C.float(weight), internal.ReinterpretCast[C.ImVec4](outline.ToC()))
}

// SetupAxesV parameter default value hint:
// x_flags: 0
// y_flags: 0
func SetupAxesV(x_label string, y_label string, x_flags AxisFlags, y_flags AxisFlags) {
	x_labelArg, x_labelFin := internal.WrapString[C.char](x_label)
	y_labelArg, y_labelFin := internal.WrapString[C.char](y_label)
	C.ImPlot_SetupAxes(x_labelArg, y_labelArg, C.ImPlotAxisFlags(x_flags), C.ImPlotAxisFlags(y_flags))

	x_labelFin()
	y_labelFin()
}

// SetupAxesLimitsV parameter default value hint:
// cond: ImPlotCond_Once
func SetupAxesLimitsV(x_min float64, x_max float64, y_min float64, y_max float64, cond Cond) {
	C.ImPlot_SetupAxesLimits(C.double(x_min), C.double(x_max), C.double(y_min), C.double(y_max), C.ImPlotCond(cond))
}

// SetupAxisV parameter default value hint:
// label: nullptr
// flags: 0
func SetupAxisV(axis AxisEnum, label string, flags AxisFlags) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.ImPlot_SetupAxis(C.ImAxis(axis), labelArg, C.ImPlotAxisFlags(flags))

	labelFin()
}

// SetupAxisFormatPlotFormatterV parameter default value hint:
// data: nullptr
func SetupAxisFormatPlotFormatterV(axis AxisEnum, formatter Formatter, data uintptr) {
	formatterArg, formatterFin := formatter.C()
	C.wrap_ImPlot_SetupAxisFormat_PlotFormatterV(C.ImAxis(axis), internal.ReinterpretCast[C.ImPlotFormatter](formatterArg), C.uintptr_t(data))

	formatterFin()
}

func SetupAxisFormatStr(axis AxisEnum, fmt string) {
	fmtArg, fmtFin := internal.WrapString[C.char](fmt)
	C.ImPlot_SetupAxisFormat_Str(C.ImAxis(axis), fmtArg)

	fmtFin()
}

// SetupAxisLimitsV parameter default value hint:
// cond: ImPlotCond_Once
func SetupAxisLimitsV(axis AxisEnum, v_min float64, v_max float64, cond Cond) {
	C.ImPlot_SetupAxisLimits(C.ImAxis(axis), C.double(v_min), C.double(v_max), C.ImPlotCond(cond))
}

func SetupAxisLimitsConstraints(axis AxisEnum, v_min float64, v_max float64) {
	C.ImPlot_SetupAxisLimitsConstraints(C.ImAxis(axis), C.double(v_min), C.double(v_max))
}

func SetupAxisLinks(axis AxisEnum, link_min *float64, link_max *float64) {
	link_minArg, link_minFin := internal.WrapNumberPtr[C.double, float64](link_min)
	link_maxArg, link_maxFin := internal.WrapNumberPtr[C.double, float64](link_max)
	C.ImPlot_SetupAxisLinks(C.ImAxis(axis), link_minArg, link_maxArg)

	link_minFin()
	link_maxFin()
}

func SetupAxisScalePlotScale(axis AxisEnum, scale Scale) {
	C.ImPlot_SetupAxisScale_PlotScale(C.ImAxis(axis), C.ImPlotScale(scale))
}

// SetupAxisScalePlotTransformV parameter default value hint:
// data: nullptr
func SetupAxisScalePlotTransformV(axis AxisEnum, forward Transform, inverse Transform, data uintptr) {
	forwardArg, forwardFin := forward.C()
	inverseArg, inverseFin := inverse.C()
	C.wrap_ImPlot_SetupAxisScale_PlotTransformV(C.ImAxis(axis), internal.ReinterpretCast[C.ImPlotTransform](forwardArg), internal.ReinterpretCast[C.ImPlotTransform](inverseArg), C.uintptr_t(data))

	forwardFin()
	inverseFin()
}

// SetupAxisTicksdoubleV parameter default value hint:
// labels: nullptr
// keep_default: false
func SetupAxisTicksdoubleV(axis AxisEnum, v_min float64, v_max float64, n_ticks int32, labels []string, keep_default bool) {
	labelsArg, labelsFin := internal.WrapStringList[C.char](labels)
	C.ImPlot_SetupAxisTicks_double(C.ImAxis(axis), C.double(v_min), C.double(v_max), C.int(n_ticks), labelsArg, C.bool(keep_default))

	labelsFin()
}

// SetupAxisTicksdoublePtrV parameter default value hint:
// labels: nullptr
// keep_default: false
func SetupAxisTicksdoublePtrV(axis AxisEnum, values *float64, n_ticks int32, labels []string, keep_default bool) {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.double, float64](values)
	labelsArg, labelsFin := internal.WrapStringList[C.char](labels)
	C.ImPlot_SetupAxisTicks_doublePtr(C.ImAxis(axis), valuesArg, C.int(n_ticks), labelsArg, C.bool(keep_default))

	valuesFin()
	labelsFin()
}

func SetupAxisZoomConstraints(axis AxisEnum, z_min float64, z_max float64) {
	C.ImPlot_SetupAxisZoomConstraints(C.ImAxis(axis), C.double(z_min), C.double(z_max))
}

func SetupFinish() {
	C.ImPlot_SetupFinish()
}

// SetupLegendV parameter default value hint:
// flags: 0
func SetupLegendV(location Location, flags LegendFlags) {
	C.ImPlot_SetupLegend(C.ImPlotLocation(location), C.ImPlotLegendFlags(flags))
}

func SetupLock() {
	C.ImPlot_SetupLock()
}

// SetupMouseTextV parameter default value hint:
// flags: 0
func SetupMouseTextV(location Location, flags MouseTextFlags) {
	C.ImPlot_SetupMouseText(C.ImPlotLocation(location), C.ImPlotMouseTextFlags(flags))
}

// ShowAltLegendV parameter default value hint:
// vertical: true
// size: ImVec2(0,0)
// interactable: true
func ShowAltLegendV(title_id string, vertical bool, size imgui.Vec2, interactable bool) {
	title_idArg, title_idFin := internal.WrapString[C.char](title_id)
	C.ImPlot_ShowAltLegend(title_idArg, C.bool(vertical), internal.ReinterpretCast[C.ImVec2](size.ToC()), C.bool(interactable))

	title_idFin()
}

// ShowAxisContextMenuV parameter default value hint:
// time_allowed: false
func ShowAxisContextMenuV(axis *Axis, equal_axis *Axis, time_allowed bool) {
	axisArg, axisFin := axis.Handle()
	equal_axisArg, equal_axisFin := equal_axis.Handle()
	C.ImPlot_ShowAxisContextMenu(internal.ReinterpretCast[*C.ImPlotAxis](axisArg), internal.ReinterpretCast[*C.ImPlotAxis](equal_axisArg), C.bool(time_allowed))

	axisFin()
	equal_axisFin()
}

func ShowColormapSelector(label string) bool {
	labelArg, labelFin := internal.WrapString[C.char](label)

	defer func() {
		labelFin()
	}()
	return C.ImPlot_ShowColormapSelector(labelArg) == C.bool(true)
}

// ShowDatePickerV parameter default value hint:
// t1: nullptr
// t2: nullptr
func ShowDatePickerV(id string, level *int32, t *PlotTime, t1 *PlotTime, t2 *PlotTime) bool {
	idArg, idFin := internal.WrapString[C.char](id)
	levelArg, levelFin := internal.WrapNumberPtr[C.int, int32](level)
	tArg, tFin := internal.Wrap(t)
	t1Arg, t1Fin := internal.Wrap(t1)
	t2Arg, t2Fin := internal.Wrap(t2)

	defer func() {
		idFin()
		levelFin()
		tFin()
		t1Fin()
		t2Fin()
	}()
	return C.ImPlot_ShowDatePicker(idArg, levelArg, internal.ReinterpretCast[*C.ImPlotTime](tArg), internal.ReinterpretCast[*C.ImPlotTime](t1Arg), internal.ReinterpretCast[*C.ImPlotTime](t2Arg)) == C.bool(true)
}

// ShowDemoWindowV parameter default value hint:
// p_open: nullptr
func ShowDemoWindowV(p_open *bool) {
	p_openArg, p_openFin := internal.WrapNumberPtr[C.bool, bool](p_open)
	C.ImPlot_ShowDemoWindow(p_openArg)

	p_openFin()
}

func ShowInputMapSelector(label string) bool {
	labelArg, labelFin := internal.WrapString[C.char](label)

	defer func() {
		labelFin()
	}()
	return C.ImPlot_ShowInputMapSelector(labelArg) == C.bool(true)
}

func ShowLegendContextMenu(legend *Legend, visible bool) bool {
	legendArg, legendFin := legend.Handle()

	defer func() {
		legendFin()
	}()
	return C.ImPlot_ShowLegendContextMenu(internal.ReinterpretCast[*C.ImPlotLegend](legendArg), C.bool(visible)) == C.bool(true)
}

func ShowLegendEntries(items *ItemGroup, legend_bb imgui.Rect, interactable bool, pad imgui.Vec2, spacing imgui.Vec2, vertical bool, DrawList *imgui.DrawList) bool {
	itemsArg, itemsFin := items.Handle()
	DrawListArg, DrawListFin := DrawList.Handle()

	defer func() {
		itemsFin()
		DrawListFin()
	}()
	return C.ImPlot_ShowLegendEntries(internal.ReinterpretCast[*C.ImPlotItemGroup](itemsArg), internal.ReinterpretCast[C.ImRect](legend_bb.ToC()), C.bool(interactable), internal.ReinterpretCast[C.ImVec2](pad.ToC()), internal.ReinterpretCast[C.ImVec2](spacing.ToC()), C.bool(vertical), internal.ReinterpretCast[*C.ImDrawList](DrawListArg)) == C.bool(true)
}

// ShowMetricsWindowV parameter default value hint:
// p_popen: nullptr
func ShowMetricsWindowV(p_popen *bool) {
	p_popenArg, p_popenFin := internal.WrapNumberPtr[C.bool, bool](p_popen)
	C.ImPlot_ShowMetricsWindow(p_popenArg)

	p_popenFin()
}

func ShowPlotContextMenu(plot *Plot) {
	plotArg, plotFin := plot.Handle()
	C.ImPlot_ShowPlotContextMenu(internal.ReinterpretCast[*C.ImPlotPlot](plotArg))

	plotFin()
}

// ShowStyleEditorV parameter default value hint:
// ref: nullptr
func ShowStyleEditorV(ref *Style) {
	refArg, refFin := ref.Handle()
	C.ImPlot_ShowStyleEditor(internal.ReinterpretCast[*C.ImPlotStyle](refArg))

	refFin()
}

func ShowStyleSelector(label string) bool {
	labelArg, labelFin := internal.WrapString[C.char](label)

	defer func() {
		labelFin()
	}()
	return C.ImPlot_ShowStyleSelector(labelArg) == C.bool(true)
}

func ShowSubplotsContextMenu(subplot *Subplot) {
	subplotArg, subplotFin := subplot.Handle()
	C.ImPlot_ShowSubplotsContextMenu(internal.ReinterpretCast[*C.ImPlotSubplot](subplotArg))

	subplotFin()
}

func ShowTimePicker(id string, t *PlotTime) bool {
	idArg, idFin := internal.WrapString[C.char](id)
	tArg, tFin := internal.Wrap(t)

	defer func() {
		idFin()
		tFin()
	}()
	return C.ImPlot_ShowTimePicker(idArg, internal.ReinterpretCast[*C.ImPlotTime](tArg)) == C.bool(true)
}

func ShowUserGuide() {
	C.ImPlot_ShowUserGuide()
}

// StyleColorsAutoV parameter default value hint:
// dst: nullptr
func StyleColorsAutoV(dst *Style) {
	dstArg, dstFin := dst.Handle()
	C.ImPlot_StyleColorsAuto(internal.ReinterpretCast[*C.ImPlotStyle](dstArg))

	dstFin()
}

// StyleColorsClassicV parameter default value hint:
// dst: nullptr
func StyleColorsClassicV(dst *Style) {
	dstArg, dstFin := dst.Handle()
	C.ImPlot_StyleColorsClassic(internal.ReinterpretCast[*C.ImPlotStyle](dstArg))

	dstFin()
}

// StyleColorsDarkV parameter default value hint:
// dst: nullptr
func StyleColorsDarkV(dst *Style) {
	dstArg, dstFin := dst.Handle()
	C.ImPlot_StyleColorsDark(internal.ReinterpretCast[*C.ImPlotStyle](dstArg))

	dstFin()
}

// StyleColorsLightV parameter default value hint:
// dst: nullptr
func StyleColorsLightV(dst *Style) {
	dstArg, dstFin := dst.Handle()
	C.ImPlot_StyleColorsLight(internal.ReinterpretCast[*C.ImPlotStyle](dstArg))

	dstFin()
}

func SubplotNextCell() {
	C.ImPlot_SubplotNextCell()
}

// TagXBoolV parameter default value hint:
// round: false
func TagXBoolV(x float64, col imgui.Vec4, round bool) {
	C.ImPlot_TagX_Bool(C.double(x), internal.ReinterpretCast[C.ImVec4](col.ToC()), C.bool(round))
}

func TagXStr(x float64, col imgui.Vec4, fmt string) {
	fmtArg, fmtFin := internal.WrapString[C.char](fmt)
	C.wrap_ImPlot_TagX_Str(C.double(x), internal.ReinterpretCast[C.ImVec4](col.ToC()), fmtArg)

	fmtFin()
}

// TagYBoolV parameter default value hint:
// round: false
func TagYBoolV(y float64, col imgui.Vec4, round bool) {
	C.ImPlot_TagY_Bool(C.double(y), internal.ReinterpretCast[C.ImVec4](col.ToC()), C.bool(round))
}

func TagYStr(y float64, col imgui.Vec4, fmt string) {
	fmtArg, fmtFin := internal.WrapString[C.char](fmt)
	C.wrap_ImPlot_TagY_Str(C.double(y), internal.ReinterpretCast[C.ImVec4](col.ToC()), fmtArg)

	fmtFin()
}

func TransformForwardLog10(v float64, noname1 uintptr) float64 {
	return float64(C.wrap_ImPlot_TransformForward_Log10(C.double(v), C.uintptr_t(noname1)))
}

func TransformForwardLogit(v float64, noname1 uintptr) float64 {
	return float64(C.wrap_ImPlot_TransformForward_Logit(C.double(v), C.uintptr_t(noname1)))
}

func TransformForwardSymLog(v float64, noname1 uintptr) float64 {
	return float64(C.wrap_ImPlot_TransformForward_SymLog(C.double(v), C.uintptr_t(noname1)))
}

func TransformInverseLog10(v float64, noname1 uintptr) float64 {
	return float64(C.wrap_ImPlot_TransformInverse_Log10(C.double(v), C.uintptr_t(noname1)))
}

func TransformInverseLogit(v float64, noname1 uintptr) float64 {
	return float64(C.wrap_ImPlot_TransformInverse_Logit(C.double(v), C.uintptr_t(noname1)))
}

func TransformInverseSymLog(v float64, noname1 uintptr) float64 {
	return float64(C.wrap_ImPlot_TransformInverse_SymLog(C.double(v), C.uintptr_t(noname1)))
}

func (self *Axis) SetMax(_max float64) bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.wrap_ImPlotAxis_SetMax(internal.ReinterpretCast[*C.ImPlotAxis](selfArg), C.double(_max)) == C.bool(true)
}

func (self *Axis) SetMin(_min float64) bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.wrap_ImPlotAxis_SetMin(internal.ReinterpretCast[*C.ImPlotAxis](selfArg), C.double(_min)) == C.bool(true)
}

func AddColormapU32Ptr(name string, cols *uint32, size int32) Colormap {
	nameArg, nameFin := internal.WrapString[C.char](name)
	colsArg, colsFin := internal.WrapNumberPtr[C.ImU32, uint32](cols)

	defer func() {
		nameFin()
		colsFin()
	}()
	return Colormap(C.wrap_ImPlot_AddColormap_U32Ptr(nameArg, colsArg, C.int(size)))
}

func AddColormapVec4Ptr(name string, cols *imgui.Vec4, size int32) Colormap {
	nameArg, nameFin := internal.WrapString[C.char](name)
	colsArg, colsFin := internal.Wrap(cols)

	defer func() {
		nameFin()
		colsFin()
	}()
	return Colormap(C.wrap_ImPlot_AddColormap_Vec4Ptr(nameArg, internal.ReinterpretCast[*C.ImVec4](colsArg), C.int(size)))
}

func AddTextCentered(DrawList *imgui.DrawList, top_center imgui.Vec2, col uint32, text_begin string) {
	DrawListArg, DrawListFin := DrawList.Handle()
	text_beginArg, text_beginFin := internal.WrapString[C.char](text_begin)
	C.wrap_ImPlot_AddTextCentered(internal.ReinterpretCast[*C.ImDrawList](DrawListArg), internal.ReinterpretCast[C.ImVec2](top_center.ToC()), C.ImU32(col), text_beginArg)

	DrawListFin()
	text_beginFin()
}

func AddTextVertical(DrawList *imgui.DrawList, pos imgui.Vec2, col uint32, text_begin string) {
	DrawListArg, DrawListFin := DrawList.Handle()
	text_beginArg, text_beginFin := internal.WrapString[C.char](text_begin)
	C.wrap_ImPlot_AddTextVertical(internal.ReinterpretCast[*C.ImDrawList](DrawListArg), internal.ReinterpretCast[C.ImVec2](pos.ToC()), C.ImU32(col), text_beginArg)

	DrawListFin()
	text_beginFin()
}

func AnnotationBool(x float64, y float64, col imgui.Vec4, pix_offset imgui.Vec2, clamp bool) {
	C.wrap_ImPlot_Annotation_Bool(C.double(x), C.double(y), internal.ReinterpretCast[C.ImVec4](col.ToC()), internal.ReinterpretCast[C.ImVec2](pix_offset.ToC()), C.bool(clamp))
}

func BeginAlignedPlots(group_id string) bool {
	group_idArg, group_idFin := internal.WrapString[C.char](group_id)

	defer func() {
		group_idFin()
	}()
	return C.wrap_ImPlot_BeginAlignedPlots(group_idArg) == C.bool(true)
}

func BeginDragDropSourceAxis(axis AxisEnum) bool {
	return C.wrap_ImPlot_BeginDragDropSourceAxis(C.ImAxis(axis)) == C.bool(true)
}

func BeginDragDropSourceItem(label_id string) bool {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)

	defer func() {
		label_idFin()
	}()
	return C.wrap_ImPlot_BeginDragDropSourceItem(label_idArg) == C.bool(true)
}

func BeginDragDropSourcePlot() bool {
	return C.wrap_ImPlot_BeginDragDropSourcePlot() == C.bool(true)
}

func BeginItem(label_id string) bool {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)

	defer func() {
		label_idFin()
	}()
	return C.wrap_ImPlot_BeginItem(label_idArg) == C.bool(true)
}

func BeginLegendPopup(label_id string) bool {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)

	defer func() {
		label_idFin()
	}()
	return C.wrap_ImPlot_BeginLegendPopup(label_idArg) == C.bool(true)
}

func BeginPlot(title_id string) bool {
	title_idArg, title_idFin := internal.WrapString[C.char](title_id)

	defer func() {
		title_idFin()
	}()
	return C.wrap_ImPlot_BeginPlot(title_idArg) == C.bool(true)
}

func BeginSubplots(title_id string, rows int32, cols int32, size imgui.Vec2) bool {
	title_idArg, title_idFin := internal.WrapString[C.char](title_id)

	defer func() {
		title_idFin()
	}()
	return C.wrap_ImPlot_BeginSubplots(title_idArg, C.int(rows), C.int(cols), internal.ReinterpretCast[C.ImVec2](size.ToC())) == C.bool(true)
}

func BustColorCache() {
	C.wrap_ImPlot_BustColorCache()
}

func ColormapButton(label string) bool {
	labelArg, labelFin := internal.WrapString[C.char](label)

	defer func() {
		labelFin()
	}()
	return C.wrap_ImPlot_ColormapButton(labelArg) == C.bool(true)
}

func ColormapScale(label string, scale_min float64, scale_max float64) {
	labelArg, labelFin := internal.WrapString[C.char](label)
	C.wrap_ImPlot_ColormapScale(labelArg, C.double(scale_min), C.double(scale_max))

	labelFin()
}

func ColormapSlider(label string, t *float32) bool {
	labelArg, labelFin := internal.WrapString[C.char](label)
	tArg, tFin := internal.WrapNumberPtr[C.float, float32](t)

	defer func() {
		labelFin()
		tFin()
	}()
	return C.wrap_ImPlot_ColormapSlider(labelArg, tArg) == C.bool(true)
}

func DestroyContext() {
	C.wrap_ImPlot_DestroyContext()
}

func DragLineX(id int32, x *float64, col imgui.Vec4) bool {
	xArg, xFin := internal.WrapNumberPtr[C.double, float64](x)

	defer func() {
		xFin()
	}()
	return C.wrap_ImPlot_DragLineX(C.int(id), xArg, internal.ReinterpretCast[C.ImVec4](col.ToC())) == C.bool(true)
}

func DragLineY(id int32, y *float64, col imgui.Vec4) bool {
	yArg, yFin := internal.WrapNumberPtr[C.double, float64](y)

	defer func() {
		yFin()
	}()
	return C.wrap_ImPlot_DragLineY(C.int(id), yArg, internal.ReinterpretCast[C.ImVec4](col.ToC())) == C.bool(true)
}

func DragPoint(id int32, x *float64, y *float64, col imgui.Vec4) bool {
	xArg, xFin := internal.WrapNumberPtr[C.double, float64](x)
	yArg, yFin := internal.WrapNumberPtr[C.double, float64](y)

	defer func() {
		xFin()
		yFin()
	}()
	return C.wrap_ImPlot_DragPoint(C.int(id), xArg, yArg, internal.ReinterpretCast[C.ImVec4](col.ToC())) == C.bool(true)
}

func DragRect(id int32, x1 *float64, y1 *float64, x2 *float64, y2 *float64, col imgui.Vec4) bool {
	x1Arg, x1Fin := internal.WrapNumberPtr[C.double, float64](x1)
	y1Arg, y1Fin := internal.WrapNumberPtr[C.double, float64](y1)
	x2Arg, x2Fin := internal.WrapNumberPtr[C.double, float64](x2)
	y2Arg, y2Fin := internal.WrapNumberPtr[C.double, float64](y2)

	defer func() {
		x1Fin()
		y1Fin()
		x2Fin()
		y2Fin()
	}()
	return C.wrap_ImPlot_DragRect(C.int(id), x1Arg, y1Arg, x2Arg, y2Arg, internal.ReinterpretCast[C.ImVec4](col.ToC())) == C.bool(true)
}

func GetColormapColor(idx int32) imgui.Vec4 {
	pOut := new(imgui.Vec4)
	pOutArg, pOutFin := internal.Wrap(pOut)

	C.wrap_ImPlot_GetColormapColor(internal.ReinterpretCast[*C.ImVec4](pOutArg), C.int(idx))

	pOutFin()

	return *pOut
}

func GetColormapSize() int32 {
	return int32(C.wrap_ImPlot_GetColormapSize())
}

func GetLocationPos(outer_rect imgui.Rect, inner_size imgui.Vec2, location Location) imgui.Vec2 {
	pOut := new(imgui.Vec2)
	pOutArg, pOutFin := internal.Wrap(pOut)

	C.wrap_ImPlot_GetLocationPos(internal.ReinterpretCast[*C.ImVec2](pOutArg), internal.ReinterpretCast[C.ImRect](outer_rect.ToC()), internal.ReinterpretCast[C.ImVec2](inner_size.ToC()), C.ImPlotLocation(location))

	pOutFin()

	return *pOut
}

func GetPlotLimits() Rect {
	pOut := new(Rect)
	pOutArg, pOutFin := pOut.Handle()

	C.wrap_ImPlot_GetPlotLimits(internal.ReinterpretCast[*C.ImPlotRect](pOutArg))

	pOutFin()

	return *pOut
}

func GetPlotMousePos() PlotPoint {
	pOut := new(PlotPoint)
	pOutArg, pOutFin := internal.Wrap(pOut)

	C.wrap_ImPlot_GetPlotMousePos(internal.ReinterpretCast[*C.ImPlotPoint](pOutArg))

	pOutFin()

	return *pOut
}

func GetPlotSelection() Rect {
	pOut := new(Rect)
	pOutArg, pOutFin := pOut.Handle()

	C.wrap_ImPlot_GetPlotSelection(internal.ReinterpretCast[*C.ImPlotRect](pOutArg))

	pOutFin()

	return *pOut
}

func HideNextItem() {
	C.wrap_ImPlot_HideNextItem()
}

func ImAlmostEqual(v1 float64, v2 float64) bool {
	return C.wrap_ImPlot_ImAlmostEqual(C.double(v1), C.double(v2)) == C.bool(true)
}

func LabelAxisValue(axis Axis, value float64, buff string, size int32) {
	axisArg, axisFin := axis.C()
	buffArg, buffFin := internal.WrapString[C.char](buff)
	C.wrap_ImPlot_LabelAxisValue(internal.ReinterpretCast[C.ImPlotAxis](axisArg), C.double(value), buffArg, C.int(size))

	axisFin()
	buffFin()
}

func MakeTime(year int32) PlotTime {
	pOut := new(PlotTime)
	pOutArg, pOutFin := internal.Wrap(pOut)

	C.wrap_ImPlot_MakeTime(internal.ReinterpretCast[*C.ImPlotTime](pOutArg), C.int(year))

	pOutFin()

	return *pOut
}

func MapInputDefault() {
	C.wrap_ImPlot_MapInputDefault()
}

func MapInputReverse() {
	C.wrap_ImPlot_MapInputReverse()
}

func PixelsToPlotFloat(x float32, y float32) PlotPoint {
	pOut := new(PlotPoint)
	pOutArg, pOutFin := internal.Wrap(pOut)

	C.wrap_ImPlot_PixelsToPlot_Float(internal.ReinterpretCast[*C.ImPlotPoint](pOutArg), C.float(x), C.float(y))

	pOutFin()

	return *pOut
}

func PixelsToPlotVec2(pix imgui.Vec2) PlotPoint {
	pOut := new(PlotPoint)
	pOutArg, pOutFin := internal.Wrap(pOut)

	C.wrap_ImPlot_PixelsToPlot_Vec2(internal.ReinterpretCast[*C.ImPlotPoint](pOutArg), internal.ReinterpretCast[C.ImVec2](pix.ToC()))

	pOutFin()

	return *pOut
}

func PlotBarGroupsFloatPtr(label_ids []string, values *float32, item_count int32, group_count int32) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.float, float32](values)
	C.wrap_ImPlot_PlotBarGroups_FloatPtr(label_idsArg, valuesArg, C.int(item_count), C.int(group_count))

	label_idsFin()
	valuesFin()
}

func PlotBarGroupsS16Ptr(label_ids []string, values *int16, item_count int32, group_count int32) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS16, int16](values)
	C.wrap_ImPlot_PlotBarGroups_S16Ptr(label_idsArg, valuesArg, C.int(item_count), C.int(group_count))

	label_idsFin()
	valuesFin()
}

func PlotBarGroupsS32Ptr(label_ids []string, values *int32, item_count int32, group_count int32) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS32, int32](values)
	C.wrap_ImPlot_PlotBarGroups_S32Ptr(label_idsArg, valuesArg, C.int(item_count), C.int(group_count))

	label_idsFin()
	valuesFin()
}

func PlotBarGroupsS64Ptr(label_ids []string, values []int64, item_count int32, group_count int32) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	C.wrap_ImPlot_PlotBarGroups_S64Ptr(label_idsArg, (*C.longlong)(&(values[0])), C.int(item_count), C.int(group_count))

	label_idsFin()
}

func PlotBarGroupsS8Ptr(label_ids []string, values *int8, item_count int32, group_count int32) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS8, int8](values)
	C.wrap_ImPlot_PlotBarGroups_S8Ptr(label_idsArg, valuesArg, C.int(item_count), C.int(group_count))

	label_idsFin()
	valuesFin()
}

func PlotBarGroupsU16Ptr(label_ids []string, values *uint16, item_count int32, group_count int32) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU16, uint16](values)
	C.wrap_ImPlot_PlotBarGroups_U16Ptr(label_idsArg, valuesArg, C.int(item_count), C.int(group_count))

	label_idsFin()
	valuesFin()
}

func PlotBarGroupsU32Ptr(label_ids []string, values *uint32, item_count int32, group_count int32) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU32, uint32](values)
	C.wrap_ImPlot_PlotBarGroups_U32Ptr(label_idsArg, valuesArg, C.int(item_count), C.int(group_count))

	label_idsFin()
	valuesFin()
}

func PlotBarGroupsU64Ptr(label_ids []string, values []uint64, item_count int32, group_count int32) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	C.wrap_ImPlot_PlotBarGroups_U64Ptr(label_idsArg, (*C.ulonglong)(&(values[0])), C.int(item_count), C.int(group_count))

	label_idsFin()
}

func PlotBarGroupsU8Ptr(label_ids []string, values *byte, item_count int32, group_count int32) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU8, byte](values)
	C.wrap_ImPlot_PlotBarGroups_U8Ptr(label_idsArg, valuesArg, C.int(item_count), C.int(group_count))

	label_idsFin()
	valuesFin()
}

func PlotBarGroupsdoublePtr(label_ids []string, values *float64, item_count int32, group_count int32) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.double, float64](values)
	C.wrap_ImPlot_PlotBarGroups_doublePtr(label_idsArg, valuesArg, C.int(item_count), C.int(group_count))

	label_idsFin()
	valuesFin()
}

func PlotBarsFloatPtrFloatPtr(label_id string, xs *float32, ys *float32, count int32, bar_size float64) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.float, float32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.float, float32](ys)
	C.wrap_ImPlot_PlotBars_FloatPtrFloatPtr(label_idArg, xsArg, ysArg, C.int(count), C.double(bar_size))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotBarsFloatPtrInt(label_id string, values *float32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.float, float32](values)
	C.wrap_ImPlot_PlotBars_FloatPtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotBarsS16PtrInt(label_id string, values *int16, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS16, int16](values)
	C.wrap_ImPlot_PlotBars_S16PtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotBarsS16PtrS16Ptr(label_id string, xs *int16, ys *int16, count int32, bar_size float64) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS16, int16](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS16, int16](ys)
	C.wrap_ImPlot_PlotBars_S16PtrS16Ptr(label_idArg, xsArg, ysArg, C.int(count), C.double(bar_size))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotBarsS32PtrInt(label_id string, values *int32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS32, int32](values)
	C.wrap_ImPlot_PlotBars_S32PtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotBarsS32PtrS32Ptr(label_id string, xs *int32, ys *int32, count int32, bar_size float64) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS32, int32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS32, int32](ys)
	C.wrap_ImPlot_PlotBars_S32PtrS32Ptr(label_idArg, xsArg, ysArg, C.int(count), C.double(bar_size))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotBarsS64PtrInt(label_id string, values []int64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.wrap_ImPlot_PlotBars_S64PtrInt(label_idArg, (*C.longlong)(&(values[0])), C.int(count))

	label_idFin()
}

func PlotBarsS64PtrS64Ptr(label_id string, xs []int64, ys []int64, count int32, bar_size float64) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.wrap_ImPlot_PlotBars_S64PtrS64Ptr(label_idArg, (*C.longlong)(&(xs[0])), (*C.longlong)(&(ys[0])), C.int(count), C.double(bar_size))

	label_idFin()
}

func PlotBarsS8PtrInt(label_id string, values *int8, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS8, int8](values)
	C.wrap_ImPlot_PlotBars_S8PtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotBarsS8PtrS8Ptr(label_id string, xs *int8, ys *int8, count int32, bar_size float64) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS8, int8](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS8, int8](ys)
	C.wrap_ImPlot_PlotBars_S8PtrS8Ptr(label_idArg, xsArg, ysArg, C.int(count), C.double(bar_size))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotBarsU16PtrInt(label_id string, values *uint16, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU16, uint16](values)
	C.wrap_ImPlot_PlotBars_U16PtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotBarsU16PtrU16Ptr(label_id string, xs *uint16, ys *uint16, count int32, bar_size float64) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU16, uint16](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU16, uint16](ys)
	C.wrap_ImPlot_PlotBars_U16PtrU16Ptr(label_idArg, xsArg, ysArg, C.int(count), C.double(bar_size))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotBarsU32PtrInt(label_id string, values *uint32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU32, uint32](values)
	C.wrap_ImPlot_PlotBars_U32PtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotBarsU32PtrU32Ptr(label_id string, xs *uint32, ys *uint32, count int32, bar_size float64) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU32, uint32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU32, uint32](ys)
	C.wrap_ImPlot_PlotBars_U32PtrU32Ptr(label_idArg, xsArg, ysArg, C.int(count), C.double(bar_size))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotBarsU64PtrInt(label_id string, values []uint64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.wrap_ImPlot_PlotBars_U64PtrInt(label_idArg, (*C.ulonglong)(&(values[0])), C.int(count))

	label_idFin()
}

func PlotBarsU64PtrU64Ptr(label_id string, xs []uint64, ys []uint64, count int32, bar_size float64) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.wrap_ImPlot_PlotBars_U64PtrU64Ptr(label_idArg, (*C.ulonglong)(&(xs[0])), (*C.ulonglong)(&(ys[0])), C.int(count), C.double(bar_size))

	label_idFin()
}

func PlotBarsU8PtrInt(label_id string, values *byte, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU8, byte](values)
	C.wrap_ImPlot_PlotBars_U8PtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotBarsU8PtrU8Ptr(label_id string, xs *byte, ys *byte, count int32, bar_size float64) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU8, byte](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU8, byte](ys)
	C.wrap_ImPlot_PlotBars_U8PtrU8Ptr(label_idArg, xsArg, ysArg, C.int(count), C.double(bar_size))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotBarsdoublePtrInt(label_id string, values *float64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.double, float64](values)
	C.wrap_ImPlot_PlotBars_doublePtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotBarsdoublePtrdoublePtr(label_id string, xs *float64, ys *float64, count int32, bar_size float64) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.double, float64](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.double, float64](ys)
	C.wrap_ImPlot_PlotBars_doublePtrdoublePtr(label_idArg, xsArg, ysArg, C.int(count), C.double(bar_size))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotDigitalFloatPtr(label_id string, xs *float32, ys *float32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.float, float32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.float, float32](ys)
	C.wrap_ImPlot_PlotDigital_FloatPtr(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotDigitalS16Ptr(label_id string, xs *int16, ys *int16, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS16, int16](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS16, int16](ys)
	C.wrap_ImPlot_PlotDigital_S16Ptr(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotDigitalS32Ptr(label_id string, xs *int32, ys *int32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS32, int32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS32, int32](ys)
	C.wrap_ImPlot_PlotDigital_S32Ptr(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotDigitalS64Ptr(label_id string, xs []int64, ys []int64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.wrap_ImPlot_PlotDigital_S64Ptr(label_idArg, (*C.longlong)(&(xs[0])), (*C.longlong)(&(ys[0])), C.int(count))

	label_idFin()
}

func PlotDigitalS8Ptr(label_id string, xs *int8, ys *int8, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS8, int8](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS8, int8](ys)
	C.wrap_ImPlot_PlotDigital_S8Ptr(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotDigitalU16Ptr(label_id string, xs *uint16, ys *uint16, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU16, uint16](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU16, uint16](ys)
	C.wrap_ImPlot_PlotDigital_U16Ptr(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotDigitalU32Ptr(label_id string, xs *uint32, ys *uint32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU32, uint32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU32, uint32](ys)
	C.wrap_ImPlot_PlotDigital_U32Ptr(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotDigitalU64Ptr(label_id string, xs []uint64, ys []uint64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.wrap_ImPlot_PlotDigital_U64Ptr(label_idArg, (*C.ulonglong)(&(xs[0])), (*C.ulonglong)(&(ys[0])), C.int(count))

	label_idFin()
}

func PlotDigitalU8Ptr(label_id string, xs *byte, ys *byte, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU8, byte](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU8, byte](ys)
	C.wrap_ImPlot_PlotDigital_U8Ptr(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotDigitaldoublePtr(label_id string, xs *float64, ys *float64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.double, float64](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.double, float64](ys)
	C.wrap_ImPlot_PlotDigital_doublePtr(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotDummy(label_id string) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.wrap_ImPlot_PlotDummy(label_idArg)

	label_idFin()
}

func PlotErrorBarsFloatPtrFloatPtrFloatPtrFloatPtr(label_id string, xs *float32, ys *float32, neg *float32, pos *float32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.float, float32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.float, float32](ys)
	negArg, negFin := internal.WrapNumberPtr[C.float, float32](neg)
	posArg, posFin := internal.WrapNumberPtr[C.float, float32](pos)
	C.wrap_ImPlot_PlotErrorBars_FloatPtrFloatPtrFloatPtrFloatPtr(label_idArg, xsArg, ysArg, negArg, posArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
	negFin()
	posFin()
}

func PlotErrorBarsFloatPtrFloatPtrFloatPtrInt(label_id string, xs *float32, ys *float32, err *float32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.float, float32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.float, float32](ys)
	errArg, errFin := internal.WrapNumberPtr[C.float, float32](err)
	C.wrap_ImPlot_PlotErrorBars_FloatPtrFloatPtrFloatPtrInt(label_idArg, xsArg, ysArg, errArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
	errFin()
}

func PlotErrorBarsS16PtrS16PtrS16PtrInt(label_id string, xs *int16, ys *int16, err *int16, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS16, int16](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS16, int16](ys)
	errArg, errFin := internal.WrapNumberPtr[C.ImS16, int16](err)
	C.wrap_ImPlot_PlotErrorBars_S16PtrS16PtrS16PtrInt(label_idArg, xsArg, ysArg, errArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
	errFin()
}

func PlotErrorBarsS16PtrS16PtrS16PtrS16Ptr(label_id string, xs *int16, ys *int16, neg *int16, pos *int16, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS16, int16](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS16, int16](ys)
	negArg, negFin := internal.WrapNumberPtr[C.ImS16, int16](neg)
	posArg, posFin := internal.WrapNumberPtr[C.ImS16, int16](pos)
	C.wrap_ImPlot_PlotErrorBars_S16PtrS16PtrS16PtrS16Ptr(label_idArg, xsArg, ysArg, negArg, posArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
	negFin()
	posFin()
}

func PlotErrorBarsS32PtrS32PtrS32PtrInt(label_id string, xs *int32, ys *int32, err *int32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS32, int32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS32, int32](ys)
	errArg, errFin := internal.WrapNumberPtr[C.ImS32, int32](err)
	C.wrap_ImPlot_PlotErrorBars_S32PtrS32PtrS32PtrInt(label_idArg, xsArg, ysArg, errArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
	errFin()
}

func PlotErrorBarsS32PtrS32PtrS32PtrS32Ptr(label_id string, xs *int32, ys *int32, neg *int32, pos *int32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS32, int32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS32, int32](ys)
	negArg, negFin := internal.WrapNumberPtr[C.ImS32, int32](neg)
	posArg, posFin := internal.WrapNumberPtr[C.ImS32, int32](pos)
	C.wrap_ImPlot_PlotErrorBars_S32PtrS32PtrS32PtrS32Ptr(label_idArg, xsArg, ysArg, negArg, posArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
	negFin()
	posFin()
}

func PlotErrorBarsS64PtrS64PtrS64PtrInt(label_id string, xs []int64, ys []int64, err []int64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.wrap_ImPlot_PlotErrorBars_S64PtrS64PtrS64PtrInt(label_idArg, (*C.longlong)(&(xs[0])), (*C.longlong)(&(ys[0])), (*C.longlong)(&(err[0])), C.int(count))

	label_idFin()
}

func PlotErrorBarsS64PtrS64PtrS64PtrS64Ptr(label_id string, xs []int64, ys []int64, neg []int64, pos []int64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.wrap_ImPlot_PlotErrorBars_S64PtrS64PtrS64PtrS64Ptr(label_idArg, (*C.longlong)(&(xs[0])), (*C.longlong)(&(ys[0])), (*C.longlong)(&(neg[0])), (*C.longlong)(&(pos[0])), C.int(count))

	label_idFin()
}

func PlotErrorBarsS8PtrS8PtrS8PtrInt(label_id string, xs *int8, ys *int8, err *int8, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS8, int8](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS8, int8](ys)
	errArg, errFin := internal.WrapNumberPtr[C.ImS8, int8](err)
	C.wrap_ImPlot_PlotErrorBars_S8PtrS8PtrS8PtrInt(label_idArg, xsArg, ysArg, errArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
	errFin()
}

func PlotErrorBarsS8PtrS8PtrS8PtrS8Ptr(label_id string, xs *int8, ys *int8, neg *int8, pos *int8, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS8, int8](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS8, int8](ys)
	negArg, negFin := internal.WrapNumberPtr[C.ImS8, int8](neg)
	posArg, posFin := internal.WrapNumberPtr[C.ImS8, int8](pos)
	C.wrap_ImPlot_PlotErrorBars_S8PtrS8PtrS8PtrS8Ptr(label_idArg, xsArg, ysArg, negArg, posArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
	negFin()
	posFin()
}

func PlotErrorBarsU16PtrU16PtrU16PtrInt(label_id string, xs *uint16, ys *uint16, err *uint16, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU16, uint16](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU16, uint16](ys)
	errArg, errFin := internal.WrapNumberPtr[C.ImU16, uint16](err)
	C.wrap_ImPlot_PlotErrorBars_U16PtrU16PtrU16PtrInt(label_idArg, xsArg, ysArg, errArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
	errFin()
}

func PlotErrorBarsU16PtrU16PtrU16PtrU16Ptr(label_id string, xs *uint16, ys *uint16, neg *uint16, pos *uint16, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU16, uint16](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU16, uint16](ys)
	negArg, negFin := internal.WrapNumberPtr[C.ImU16, uint16](neg)
	posArg, posFin := internal.WrapNumberPtr[C.ImU16, uint16](pos)
	C.wrap_ImPlot_PlotErrorBars_U16PtrU16PtrU16PtrU16Ptr(label_idArg, xsArg, ysArg, negArg, posArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
	negFin()
	posFin()
}

func PlotErrorBarsU32PtrU32PtrU32PtrInt(label_id string, xs *uint32, ys *uint32, err *uint32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU32, uint32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU32, uint32](ys)
	errArg, errFin := internal.WrapNumberPtr[C.ImU32, uint32](err)
	C.wrap_ImPlot_PlotErrorBars_U32PtrU32PtrU32PtrInt(label_idArg, xsArg, ysArg, errArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
	errFin()
}

func PlotErrorBarsU32PtrU32PtrU32PtrU32Ptr(label_id string, xs *uint32, ys *uint32, neg *uint32, pos *uint32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU32, uint32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU32, uint32](ys)
	negArg, negFin := internal.WrapNumberPtr[C.ImU32, uint32](neg)
	posArg, posFin := internal.WrapNumberPtr[C.ImU32, uint32](pos)
	C.wrap_ImPlot_PlotErrorBars_U32PtrU32PtrU32PtrU32Ptr(label_idArg, xsArg, ysArg, negArg, posArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
	negFin()
	posFin()
}

func PlotErrorBarsU64PtrU64PtrU64PtrInt(label_id string, xs []uint64, ys []uint64, err []uint64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.wrap_ImPlot_PlotErrorBars_U64PtrU64PtrU64PtrInt(label_idArg, (*C.ulonglong)(&(xs[0])), (*C.ulonglong)(&(ys[0])), (*C.ulonglong)(&(err[0])), C.int(count))

	label_idFin()
}

func PlotErrorBarsU64PtrU64PtrU64PtrU64Ptr(label_id string, xs []uint64, ys []uint64, neg []uint64, pos []uint64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.wrap_ImPlot_PlotErrorBars_U64PtrU64PtrU64PtrU64Ptr(label_idArg, (*C.ulonglong)(&(xs[0])), (*C.ulonglong)(&(ys[0])), (*C.ulonglong)(&(neg[0])), (*C.ulonglong)(&(pos[0])), C.int(count))

	label_idFin()
}

func PlotErrorBarsU8PtrU8PtrU8PtrInt(label_id string, xs *byte, ys *byte, err *byte, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU8, byte](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU8, byte](ys)
	errArg, errFin := internal.WrapNumberPtr[C.ImU8, byte](err)
	C.wrap_ImPlot_PlotErrorBars_U8PtrU8PtrU8PtrInt(label_idArg, xsArg, ysArg, errArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
	errFin()
}

func PlotErrorBarsU8PtrU8PtrU8PtrU8Ptr(label_id string, xs *byte, ys *byte, neg *byte, pos *byte, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU8, byte](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU8, byte](ys)
	negArg, negFin := internal.WrapNumberPtr[C.ImU8, byte](neg)
	posArg, posFin := internal.WrapNumberPtr[C.ImU8, byte](pos)
	C.wrap_ImPlot_PlotErrorBars_U8PtrU8PtrU8PtrU8Ptr(label_idArg, xsArg, ysArg, negArg, posArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
	negFin()
	posFin()
}

func PlotErrorBarsdoublePtrdoublePtrdoublePtrInt(label_id string, xs *float64, ys *float64, err *float64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.double, float64](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.double, float64](ys)
	errArg, errFin := internal.WrapNumberPtr[C.double, float64](err)
	C.wrap_ImPlot_PlotErrorBars_doublePtrdoublePtrdoublePtrInt(label_idArg, xsArg, ysArg, errArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
	errFin()
}

func PlotErrorBarsdoublePtrdoublePtrdoublePtrdoublePtr(label_id string, xs *float64, ys *float64, neg *float64, pos *float64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.double, float64](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.double, float64](ys)
	negArg, negFin := internal.WrapNumberPtr[C.double, float64](neg)
	posArg, posFin := internal.WrapNumberPtr[C.double, float64](pos)
	C.wrap_ImPlot_PlotErrorBars_doublePtrdoublePtrdoublePtrdoublePtr(label_idArg, xsArg, ysArg, negArg, posArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
	negFin()
	posFin()
}

func PlotHeatmapFloatPtr(label_id string, values *float32, rows int32, cols int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.float, float32](values)
	C.wrap_ImPlot_PlotHeatmap_FloatPtr(label_idArg, valuesArg, C.int(rows), C.int(cols))

	label_idFin()
	valuesFin()
}

func PlotHeatmapS16Ptr(label_id string, values *int16, rows int32, cols int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS16, int16](values)
	C.wrap_ImPlot_PlotHeatmap_S16Ptr(label_idArg, valuesArg, C.int(rows), C.int(cols))

	label_idFin()
	valuesFin()
}

func PlotHeatmapS32Ptr(label_id string, values *int32, rows int32, cols int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS32, int32](values)
	C.wrap_ImPlot_PlotHeatmap_S32Ptr(label_idArg, valuesArg, C.int(rows), C.int(cols))

	label_idFin()
	valuesFin()
}

func PlotHeatmapS64Ptr(label_id string, values []int64, rows int32, cols int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.wrap_ImPlot_PlotHeatmap_S64Ptr(label_idArg, (*C.longlong)(&(values[0])), C.int(rows), C.int(cols))

	label_idFin()
}

func PlotHeatmapS8Ptr(label_id string, values *int8, rows int32, cols int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS8, int8](values)
	C.wrap_ImPlot_PlotHeatmap_S8Ptr(label_idArg, valuesArg, C.int(rows), C.int(cols))

	label_idFin()
	valuesFin()
}

func PlotHeatmapU16Ptr(label_id string, values *uint16, rows int32, cols int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU16, uint16](values)
	C.wrap_ImPlot_PlotHeatmap_U16Ptr(label_idArg, valuesArg, C.int(rows), C.int(cols))

	label_idFin()
	valuesFin()
}

func PlotHeatmapU32Ptr(label_id string, values *uint32, rows int32, cols int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU32, uint32](values)
	C.wrap_ImPlot_PlotHeatmap_U32Ptr(label_idArg, valuesArg, C.int(rows), C.int(cols))

	label_idFin()
	valuesFin()
}

func PlotHeatmapU64Ptr(label_id string, values []uint64, rows int32, cols int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.wrap_ImPlot_PlotHeatmap_U64Ptr(label_idArg, (*C.ulonglong)(&(values[0])), C.int(rows), C.int(cols))

	label_idFin()
}

func PlotHeatmapU8Ptr(label_id string, values *byte, rows int32, cols int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU8, byte](values)
	C.wrap_ImPlot_PlotHeatmap_U8Ptr(label_idArg, valuesArg, C.int(rows), C.int(cols))

	label_idFin()
	valuesFin()
}

func PlotHeatmapdoublePtr(label_id string, values *float64, rows int32, cols int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.double, float64](values)
	C.wrap_ImPlot_PlotHeatmap_doublePtr(label_idArg, valuesArg, C.int(rows), C.int(cols))

	label_idFin()
	valuesFin()
}

func PlotHistogram2DFloatPtr(label_id string, xs *float32, ys *float32, count int32) float64 {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.float, float32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.float, float32](ys)

	defer func() {
		label_idFin()
		xsFin()
		ysFin()
	}()
	return float64(C.wrap_ImPlot_PlotHistogram2D_FloatPtr(label_idArg, xsArg, ysArg, C.int(count)))
}

func PlotHistogram2DS16Ptr(label_id string, xs *int16, ys *int16, count int32) float64 {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS16, int16](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS16, int16](ys)

	defer func() {
		label_idFin()
		xsFin()
		ysFin()
	}()
	return float64(C.wrap_ImPlot_PlotHistogram2D_S16Ptr(label_idArg, xsArg, ysArg, C.int(count)))
}

func PlotHistogram2DS32Ptr(label_id string, xs *int32, ys *int32, count int32) float64 {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS32, int32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS32, int32](ys)

	defer func() {
		label_idFin()
		xsFin()
		ysFin()
	}()
	return float64(C.wrap_ImPlot_PlotHistogram2D_S32Ptr(label_idArg, xsArg, ysArg, C.int(count)))
}

func PlotHistogram2DS64Ptr(label_id string, xs []int64, ys []int64, count int32) float64 {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)

	defer func() {
		label_idFin()
	}()
	return float64(C.wrap_ImPlot_PlotHistogram2D_S64Ptr(label_idArg, (*C.longlong)(&(xs[0])), (*C.longlong)(&(ys[0])), C.int(count)))
}

func PlotHistogram2DS8Ptr(label_id string, xs *int8, ys *int8, count int32) float64 {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS8, int8](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS8, int8](ys)

	defer func() {
		label_idFin()
		xsFin()
		ysFin()
	}()
	return float64(C.wrap_ImPlot_PlotHistogram2D_S8Ptr(label_idArg, xsArg, ysArg, C.int(count)))
}

func PlotHistogram2DU16Ptr(label_id string, xs *uint16, ys *uint16, count int32) float64 {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU16, uint16](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU16, uint16](ys)

	defer func() {
		label_idFin()
		xsFin()
		ysFin()
	}()
	return float64(C.wrap_ImPlot_PlotHistogram2D_U16Ptr(label_idArg, xsArg, ysArg, C.int(count)))
}

func PlotHistogram2DU32Ptr(label_id string, xs *uint32, ys *uint32, count int32) float64 {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU32, uint32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU32, uint32](ys)

	defer func() {
		label_idFin()
		xsFin()
		ysFin()
	}()
	return float64(C.wrap_ImPlot_PlotHistogram2D_U32Ptr(label_idArg, xsArg, ysArg, C.int(count)))
}

func PlotHistogram2DU64Ptr(label_id string, xs []uint64, ys []uint64, count int32) float64 {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)

	defer func() {
		label_idFin()
	}()
	return float64(C.wrap_ImPlot_PlotHistogram2D_U64Ptr(label_idArg, (*C.ulonglong)(&(xs[0])), (*C.ulonglong)(&(ys[0])), C.int(count)))
}

func PlotHistogram2DU8Ptr(label_id string, xs *byte, ys *byte, count int32) float64 {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU8, byte](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU8, byte](ys)

	defer func() {
		label_idFin()
		xsFin()
		ysFin()
	}()
	return float64(C.wrap_ImPlot_PlotHistogram2D_U8Ptr(label_idArg, xsArg, ysArg, C.int(count)))
}

func PlotHistogram2DdoublePtr(label_id string, xs *float64, ys *float64, count int32) float64 {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.double, float64](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.double, float64](ys)

	defer func() {
		label_idFin()
		xsFin()
		ysFin()
	}()
	return float64(C.wrap_ImPlot_PlotHistogram2D_doublePtr(label_idArg, xsArg, ysArg, C.int(count)))
}

func PlotHistogramFloatPtr(label_id string, values *float32, count int32) float64 {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.float, float32](values)

	defer func() {
		label_idFin()
		valuesFin()
	}()
	return float64(C.wrap_ImPlot_PlotHistogram_FloatPtr(label_idArg, valuesArg, C.int(count)))
}

func PlotHistogramS16Ptr(label_id string, values *int16, count int32) float64 {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS16, int16](values)

	defer func() {
		label_idFin()
		valuesFin()
	}()
	return float64(C.wrap_ImPlot_PlotHistogram_S16Ptr(label_idArg, valuesArg, C.int(count)))
}

func PlotHistogramS32Ptr(label_id string, values *int32, count int32) float64 {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS32, int32](values)

	defer func() {
		label_idFin()
		valuesFin()
	}()
	return float64(C.wrap_ImPlot_PlotHistogram_S32Ptr(label_idArg, valuesArg, C.int(count)))
}

func PlotHistogramS64Ptr(label_id string, values []int64, count int32) float64 {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)

	defer func() {
		label_idFin()
	}()
	return float64(C.wrap_ImPlot_PlotHistogram_S64Ptr(label_idArg, (*C.longlong)(&(values[0])), C.int(count)))
}

func PlotHistogramS8Ptr(label_id string, values *int8, count int32) float64 {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS8, int8](values)

	defer func() {
		label_idFin()
		valuesFin()
	}()
	return float64(C.wrap_ImPlot_PlotHistogram_S8Ptr(label_idArg, valuesArg, C.int(count)))
}

func PlotHistogramU16Ptr(label_id string, values *uint16, count int32) float64 {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU16, uint16](values)

	defer func() {
		label_idFin()
		valuesFin()
	}()
	return float64(C.wrap_ImPlot_PlotHistogram_U16Ptr(label_idArg, valuesArg, C.int(count)))
}

func PlotHistogramU32Ptr(label_id string, values *uint32, count int32) float64 {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU32, uint32](values)

	defer func() {
		label_idFin()
		valuesFin()
	}()
	return float64(C.wrap_ImPlot_PlotHistogram_U32Ptr(label_idArg, valuesArg, C.int(count)))
}

func PlotHistogramU64Ptr(label_id string, values []uint64, count int32) float64 {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)

	defer func() {
		label_idFin()
	}()
	return float64(C.wrap_ImPlot_PlotHistogram_U64Ptr(label_idArg, (*C.ulonglong)(&(values[0])), C.int(count)))
}

func PlotHistogramU8Ptr(label_id string, values *byte, count int32) float64 {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU8, byte](values)

	defer func() {
		label_idFin()
		valuesFin()
	}()
	return float64(C.wrap_ImPlot_PlotHistogram_U8Ptr(label_idArg, valuesArg, C.int(count)))
}

func PlotHistogramdoublePtr(label_id string, values *float64, count int32) float64 {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.double, float64](values)

	defer func() {
		label_idFin()
		valuesFin()
	}()
	return float64(C.wrap_ImPlot_PlotHistogram_doublePtr(label_idArg, valuesArg, C.int(count)))
}

func PlotImage(label_id string, user_texture_id imgui.TextureID, bounds_min PlotPoint, bounds_max PlotPoint) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	user_texture_idArg, user_texture_idFin := user_texture_id.C()
	C.wrap_ImPlot_PlotImage(label_idArg, internal.ReinterpretCast[C.ImTextureID](user_texture_idArg), internal.ReinterpretCast[C.ImPlotPoint](bounds_min.ToC()), internal.ReinterpretCast[C.ImPlotPoint](bounds_max.ToC()))

	label_idFin()
	user_texture_idFin()
}

func PlotInfLinesFloatPtr(label_id string, values *float32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.float, float32](values)
	C.wrap_ImPlot_PlotInfLines_FloatPtr(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotInfLinesS16Ptr(label_id string, values *int16, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS16, int16](values)
	C.wrap_ImPlot_PlotInfLines_S16Ptr(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotInfLinesS32Ptr(label_id string, values *int32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS32, int32](values)
	C.wrap_ImPlot_PlotInfLines_S32Ptr(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotInfLinesS64Ptr(label_id string, values []int64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.wrap_ImPlot_PlotInfLines_S64Ptr(label_idArg, (*C.longlong)(&(values[0])), C.int(count))

	label_idFin()
}

func PlotInfLinesS8Ptr(label_id string, values *int8, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS8, int8](values)
	C.wrap_ImPlot_PlotInfLines_S8Ptr(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotInfLinesU16Ptr(label_id string, values *uint16, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU16, uint16](values)
	C.wrap_ImPlot_PlotInfLines_U16Ptr(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotInfLinesU32Ptr(label_id string, values *uint32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU32, uint32](values)
	C.wrap_ImPlot_PlotInfLines_U32Ptr(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotInfLinesU64Ptr(label_id string, values []uint64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.wrap_ImPlot_PlotInfLines_U64Ptr(label_idArg, (*C.ulonglong)(&(values[0])), C.int(count))

	label_idFin()
}

func PlotInfLinesU8Ptr(label_id string, values *byte, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU8, byte](values)
	C.wrap_ImPlot_PlotInfLines_U8Ptr(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotInfLinesdoublePtr(label_id string, values *float64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.double, float64](values)
	C.wrap_ImPlot_PlotInfLines_doublePtr(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotLineFloatPtrFloatPtr(label_id string, xs *float32, ys *float32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.float, float32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.float, float32](ys)
	C.wrap_ImPlot_PlotLine_FloatPtrFloatPtr(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotLineFloatPtrInt(label_id string, values *float32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.float, float32](values)
	C.wrap_ImPlot_PlotLine_FloatPtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotLineS16PtrInt(label_id string, values *int16, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS16, int16](values)
	C.wrap_ImPlot_PlotLine_S16PtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotLineS16PtrS16Ptr(label_id string, xs *int16, ys *int16, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS16, int16](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS16, int16](ys)
	C.wrap_ImPlot_PlotLine_S16PtrS16Ptr(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotLineS32PtrInt(label_id string, values *int32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS32, int32](values)
	C.wrap_ImPlot_PlotLine_S32PtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotLineS32PtrS32Ptr(label_id string, xs *int32, ys *int32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS32, int32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS32, int32](ys)
	C.wrap_ImPlot_PlotLine_S32PtrS32Ptr(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotLineS64PtrInt(label_id string, values []int64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.wrap_ImPlot_PlotLine_S64PtrInt(label_idArg, (*C.longlong)(&(values[0])), C.int(count))

	label_idFin()
}

func PlotLineS64PtrS64Ptr(label_id string, xs []int64, ys []int64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.wrap_ImPlot_PlotLine_S64PtrS64Ptr(label_idArg, (*C.longlong)(&(xs[0])), (*C.longlong)(&(ys[0])), C.int(count))

	label_idFin()
}

func PlotLineS8PtrInt(label_id string, values *int8, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS8, int8](values)
	C.wrap_ImPlot_PlotLine_S8PtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotLineS8PtrS8Ptr(label_id string, xs *int8, ys *int8, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS8, int8](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS8, int8](ys)
	C.wrap_ImPlot_PlotLine_S8PtrS8Ptr(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotLineU16PtrInt(label_id string, values *uint16, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU16, uint16](values)
	C.wrap_ImPlot_PlotLine_U16PtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotLineU16PtrU16Ptr(label_id string, xs *uint16, ys *uint16, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU16, uint16](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU16, uint16](ys)
	C.wrap_ImPlot_PlotLine_U16PtrU16Ptr(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotLineU32PtrInt(label_id string, values *uint32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU32, uint32](values)
	C.wrap_ImPlot_PlotLine_U32PtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotLineU32PtrU32Ptr(label_id string, xs *uint32, ys *uint32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU32, uint32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU32, uint32](ys)
	C.wrap_ImPlot_PlotLine_U32PtrU32Ptr(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotLineU64PtrInt(label_id string, values []uint64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.wrap_ImPlot_PlotLine_U64PtrInt(label_idArg, (*C.ulonglong)(&(values[0])), C.int(count))

	label_idFin()
}

func PlotLineU64PtrU64Ptr(label_id string, xs []uint64, ys []uint64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.wrap_ImPlot_PlotLine_U64PtrU64Ptr(label_idArg, (*C.ulonglong)(&(xs[0])), (*C.ulonglong)(&(ys[0])), C.int(count))

	label_idFin()
}

func PlotLineU8PtrInt(label_id string, values *byte, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU8, byte](values)
	C.wrap_ImPlot_PlotLine_U8PtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotLineU8PtrU8Ptr(label_id string, xs *byte, ys *byte, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU8, byte](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU8, byte](ys)
	C.wrap_ImPlot_PlotLine_U8PtrU8Ptr(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotLinedoublePtrInt(label_id string, values *float64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.double, float64](values)
	C.wrap_ImPlot_PlotLine_doublePtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotLinedoublePtrdoublePtr(label_id string, xs *float64, ys *float64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.double, float64](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.double, float64](ys)
	C.wrap_ImPlot_PlotLine_doublePtrdoublePtr(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotPieChartFloatPtrPlotFormatter(label_ids []string, values *float32, count int32, x float64, y float64, radius float64, fmt Formatter) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.float, float32](values)
	fmtArg, fmtFin := fmt.C()
	C.wrap_ImPlot_PlotPieChart_FloatPtrPlotFormatter(label_idsArg, valuesArg, C.int(count), C.double(x), C.double(y), C.double(radius), internal.ReinterpretCast[C.ImPlotFormatter](fmtArg))

	label_idsFin()
	valuesFin()
	fmtFin()
}

func PlotPieChartFloatPtrStr(label_ids []string, values *float32, count int32, x float64, y float64, radius float64) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.float, float32](values)
	C.wrap_ImPlot_PlotPieChart_FloatPtrStr(label_idsArg, valuesArg, C.int(count), C.double(x), C.double(y), C.double(radius))

	label_idsFin()
	valuesFin()
}

func PlotPieChartS16PtrPlotFormatter(label_ids []string, values *int16, count int32, x float64, y float64, radius float64, fmt Formatter) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS16, int16](values)
	fmtArg, fmtFin := fmt.C()
	C.wrap_ImPlot_PlotPieChart_S16PtrPlotFormatter(label_idsArg, valuesArg, C.int(count), C.double(x), C.double(y), C.double(radius), internal.ReinterpretCast[C.ImPlotFormatter](fmtArg))

	label_idsFin()
	valuesFin()
	fmtFin()
}

func PlotPieChartS16PtrStr(label_ids []string, values *int16, count int32, x float64, y float64, radius float64) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS16, int16](values)
	C.wrap_ImPlot_PlotPieChart_S16PtrStr(label_idsArg, valuesArg, C.int(count), C.double(x), C.double(y), C.double(radius))

	label_idsFin()
	valuesFin()
}

func PlotPieChartS32PtrPlotFormatter(label_ids []string, values *int32, count int32, x float64, y float64, radius float64, fmt Formatter) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS32, int32](values)
	fmtArg, fmtFin := fmt.C()
	C.wrap_ImPlot_PlotPieChart_S32PtrPlotFormatter(label_idsArg, valuesArg, C.int(count), C.double(x), C.double(y), C.double(radius), internal.ReinterpretCast[C.ImPlotFormatter](fmtArg))

	label_idsFin()
	valuesFin()
	fmtFin()
}

func PlotPieChartS32PtrStr(label_ids []string, values *int32, count int32, x float64, y float64, radius float64) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS32, int32](values)
	C.wrap_ImPlot_PlotPieChart_S32PtrStr(label_idsArg, valuesArg, C.int(count), C.double(x), C.double(y), C.double(radius))

	label_idsFin()
	valuesFin()
}

func PlotPieChartS64PtrPlotFormatter(label_ids []string, values []int64, count int32, x float64, y float64, radius float64, fmt Formatter) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	fmtArg, fmtFin := fmt.C()
	C.wrap_ImPlot_PlotPieChart_S64PtrPlotFormatter(label_idsArg, (*C.longlong)(&(values[0])), C.int(count), C.double(x), C.double(y), C.double(radius), internal.ReinterpretCast[C.ImPlotFormatter](fmtArg))

	label_idsFin()
	fmtFin()
}

func PlotPieChartS64PtrStr(label_ids []string, values []int64, count int32, x float64, y float64, radius float64) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	C.wrap_ImPlot_PlotPieChart_S64PtrStr(label_idsArg, (*C.longlong)(&(values[0])), C.int(count), C.double(x), C.double(y), C.double(radius))

	label_idsFin()
}

func PlotPieChartS8PtrPlotFormatter(label_ids []string, values *int8, count int32, x float64, y float64, radius float64, fmt Formatter) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS8, int8](values)
	fmtArg, fmtFin := fmt.C()
	C.wrap_ImPlot_PlotPieChart_S8PtrPlotFormatter(label_idsArg, valuesArg, C.int(count), C.double(x), C.double(y), C.double(radius), internal.ReinterpretCast[C.ImPlotFormatter](fmtArg))

	label_idsFin()
	valuesFin()
	fmtFin()
}

func PlotPieChartS8PtrStr(label_ids []string, values *int8, count int32, x float64, y float64, radius float64) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS8, int8](values)
	C.wrap_ImPlot_PlotPieChart_S8PtrStr(label_idsArg, valuesArg, C.int(count), C.double(x), C.double(y), C.double(radius))

	label_idsFin()
	valuesFin()
}

func PlotPieChartU16PtrPlotFormatter(label_ids []string, values *uint16, count int32, x float64, y float64, radius float64, fmt Formatter) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU16, uint16](values)
	fmtArg, fmtFin := fmt.C()
	C.wrap_ImPlot_PlotPieChart_U16PtrPlotFormatter(label_idsArg, valuesArg, C.int(count), C.double(x), C.double(y), C.double(radius), internal.ReinterpretCast[C.ImPlotFormatter](fmtArg))

	label_idsFin()
	valuesFin()
	fmtFin()
}

func PlotPieChartU16PtrStr(label_ids []string, values *uint16, count int32, x float64, y float64, radius float64) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU16, uint16](values)
	C.wrap_ImPlot_PlotPieChart_U16PtrStr(label_idsArg, valuesArg, C.int(count), C.double(x), C.double(y), C.double(radius))

	label_idsFin()
	valuesFin()
}

func PlotPieChartU32PtrPlotFormatter(label_ids []string, values *uint32, count int32, x float64, y float64, radius float64, fmt Formatter) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU32, uint32](values)
	fmtArg, fmtFin := fmt.C()
	C.wrap_ImPlot_PlotPieChart_U32PtrPlotFormatter(label_idsArg, valuesArg, C.int(count), C.double(x), C.double(y), C.double(radius), internal.ReinterpretCast[C.ImPlotFormatter](fmtArg))

	label_idsFin()
	valuesFin()
	fmtFin()
}

func PlotPieChartU32PtrStr(label_ids []string, values *uint32, count int32, x float64, y float64, radius float64) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU32, uint32](values)
	C.wrap_ImPlot_PlotPieChart_U32PtrStr(label_idsArg, valuesArg, C.int(count), C.double(x), C.double(y), C.double(radius))

	label_idsFin()
	valuesFin()
}

func PlotPieChartU64PtrPlotFormatter(label_ids []string, values []uint64, count int32, x float64, y float64, radius float64, fmt Formatter) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	fmtArg, fmtFin := fmt.C()
	C.wrap_ImPlot_PlotPieChart_U64PtrPlotFormatter(label_idsArg, (*C.ulonglong)(&(values[0])), C.int(count), C.double(x), C.double(y), C.double(radius), internal.ReinterpretCast[C.ImPlotFormatter](fmtArg))

	label_idsFin()
	fmtFin()
}

func PlotPieChartU64PtrStr(label_ids []string, values []uint64, count int32, x float64, y float64, radius float64) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	C.wrap_ImPlot_PlotPieChart_U64PtrStr(label_idsArg, (*C.ulonglong)(&(values[0])), C.int(count), C.double(x), C.double(y), C.double(radius))

	label_idsFin()
}

func PlotPieChartU8PtrPlotFormatter(label_ids []string, values *byte, count int32, x float64, y float64, radius float64, fmt Formatter) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU8, byte](values)
	fmtArg, fmtFin := fmt.C()
	C.wrap_ImPlot_PlotPieChart_U8PtrPlotFormatter(label_idsArg, valuesArg, C.int(count), C.double(x), C.double(y), C.double(radius), internal.ReinterpretCast[C.ImPlotFormatter](fmtArg))

	label_idsFin()
	valuesFin()
	fmtFin()
}

func PlotPieChartU8PtrStr(label_ids []string, values *byte, count int32, x float64, y float64, radius float64) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU8, byte](values)
	C.wrap_ImPlot_PlotPieChart_U8PtrStr(label_idsArg, valuesArg, C.int(count), C.double(x), C.double(y), C.double(radius))

	label_idsFin()
	valuesFin()
}

func PlotPieChartdoublePtrPlotFormatter(label_ids []string, values *float64, count int32, x float64, y float64, radius float64, fmt Formatter) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.double, float64](values)
	fmtArg, fmtFin := fmt.C()
	C.wrap_ImPlot_PlotPieChart_doublePtrPlotFormatter(label_idsArg, valuesArg, C.int(count), C.double(x), C.double(y), C.double(radius), internal.ReinterpretCast[C.ImPlotFormatter](fmtArg))

	label_idsFin()
	valuesFin()
	fmtFin()
}

func PlotPieChartdoublePtrStr(label_ids []string, values *float64, count int32, x float64, y float64, radius float64) {
	label_idsArg, label_idsFin := internal.WrapStringList[C.char](label_ids)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.double, float64](values)
	C.wrap_ImPlot_PlotPieChart_doublePtrStr(label_idsArg, valuesArg, C.int(count), C.double(x), C.double(y), C.double(radius))

	label_idsFin()
	valuesFin()
}

func PlotScatterFloatPtrFloatPtr(label_id string, xs *float32, ys *float32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.float, float32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.float, float32](ys)
	C.wrap_ImPlot_PlotScatter_FloatPtrFloatPtr(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotScatterFloatPtrInt(label_id string, values *float32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.float, float32](values)
	C.wrap_ImPlot_PlotScatter_FloatPtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotScatterS16PtrInt(label_id string, values *int16, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS16, int16](values)
	C.wrap_ImPlot_PlotScatter_S16PtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotScatterS16PtrS16Ptr(label_id string, xs *int16, ys *int16, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS16, int16](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS16, int16](ys)
	C.wrap_ImPlot_PlotScatter_S16PtrS16Ptr(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotScatterS32PtrInt(label_id string, values *int32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS32, int32](values)
	C.wrap_ImPlot_PlotScatter_S32PtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotScatterS32PtrS32Ptr(label_id string, xs *int32, ys *int32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS32, int32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS32, int32](ys)
	C.wrap_ImPlot_PlotScatter_S32PtrS32Ptr(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotScatterS64PtrInt(label_id string, values []int64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.wrap_ImPlot_PlotScatter_S64PtrInt(label_idArg, (*C.longlong)(&(values[0])), C.int(count))

	label_idFin()
}

func PlotScatterS64PtrS64Ptr(label_id string, xs []int64, ys []int64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.wrap_ImPlot_PlotScatter_S64PtrS64Ptr(label_idArg, (*C.longlong)(&(xs[0])), (*C.longlong)(&(ys[0])), C.int(count))

	label_idFin()
}

func PlotScatterS8PtrInt(label_id string, values *int8, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS8, int8](values)
	C.wrap_ImPlot_PlotScatter_S8PtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotScatterS8PtrS8Ptr(label_id string, xs *int8, ys *int8, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS8, int8](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS8, int8](ys)
	C.wrap_ImPlot_PlotScatter_S8PtrS8Ptr(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotScatterU16PtrInt(label_id string, values *uint16, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU16, uint16](values)
	C.wrap_ImPlot_PlotScatter_U16PtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotScatterU16PtrU16Ptr(label_id string, xs *uint16, ys *uint16, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU16, uint16](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU16, uint16](ys)
	C.wrap_ImPlot_PlotScatter_U16PtrU16Ptr(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotScatterU32PtrInt(label_id string, values *uint32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU32, uint32](values)
	C.wrap_ImPlot_PlotScatter_U32PtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotScatterU32PtrU32Ptr(label_id string, xs *uint32, ys *uint32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU32, uint32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU32, uint32](ys)
	C.wrap_ImPlot_PlotScatter_U32PtrU32Ptr(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotScatterU64PtrInt(label_id string, values []uint64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.wrap_ImPlot_PlotScatter_U64PtrInt(label_idArg, (*C.ulonglong)(&(values[0])), C.int(count))

	label_idFin()
}

func PlotScatterU64PtrU64Ptr(label_id string, xs []uint64, ys []uint64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.wrap_ImPlot_PlotScatter_U64PtrU64Ptr(label_idArg, (*C.ulonglong)(&(xs[0])), (*C.ulonglong)(&(ys[0])), C.int(count))

	label_idFin()
}

func PlotScatterU8PtrInt(label_id string, values *byte, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU8, byte](values)
	C.wrap_ImPlot_PlotScatter_U8PtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotScatterU8PtrU8Ptr(label_id string, xs *byte, ys *byte, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU8, byte](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU8, byte](ys)
	C.wrap_ImPlot_PlotScatter_U8PtrU8Ptr(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotScatterdoublePtrInt(label_id string, values *float64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.double, float64](values)
	C.wrap_ImPlot_PlotScatter_doublePtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotScatterdoublePtrdoublePtr(label_id string, xs *float64, ys *float64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.double, float64](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.double, float64](ys)
	C.wrap_ImPlot_PlotScatter_doublePtrdoublePtr(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotShadedFloatPtrFloatPtrFloatPtr(label_id string, xs *float32, ys1 *float32, ys2 *float32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.float, float32](xs)
	ys1Arg, ys1Fin := internal.WrapNumberPtr[C.float, float32](ys1)
	ys2Arg, ys2Fin := internal.WrapNumberPtr[C.float, float32](ys2)
	C.wrap_ImPlot_PlotShaded_FloatPtrFloatPtrFloatPtr(label_idArg, xsArg, ys1Arg, ys2Arg, C.int(count))

	label_idFin()
	xsFin()
	ys1Fin()
	ys2Fin()
}

func PlotShadedFloatPtrFloatPtrInt(label_id string, xs *float32, ys *float32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.float, float32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.float, float32](ys)
	C.wrap_ImPlot_PlotShaded_FloatPtrFloatPtrInt(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotShadedFloatPtrInt(label_id string, values *float32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.float, float32](values)
	C.wrap_ImPlot_PlotShaded_FloatPtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotShadedS16PtrInt(label_id string, values *int16, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS16, int16](values)
	C.wrap_ImPlot_PlotShaded_S16PtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotShadedS16PtrS16PtrInt(label_id string, xs *int16, ys *int16, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS16, int16](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS16, int16](ys)
	C.wrap_ImPlot_PlotShaded_S16PtrS16PtrInt(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotShadedS16PtrS16PtrS16Ptr(label_id string, xs *int16, ys1 *int16, ys2 *int16, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS16, int16](xs)
	ys1Arg, ys1Fin := internal.WrapNumberPtr[C.ImS16, int16](ys1)
	ys2Arg, ys2Fin := internal.WrapNumberPtr[C.ImS16, int16](ys2)
	C.wrap_ImPlot_PlotShaded_S16PtrS16PtrS16Ptr(label_idArg, xsArg, ys1Arg, ys2Arg, C.int(count))

	label_idFin()
	xsFin()
	ys1Fin()
	ys2Fin()
}

func PlotShadedS32PtrInt(label_id string, values *int32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS32, int32](values)
	C.wrap_ImPlot_PlotShaded_S32PtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotShadedS32PtrS32PtrInt(label_id string, xs *int32, ys *int32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS32, int32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS32, int32](ys)
	C.wrap_ImPlot_PlotShaded_S32PtrS32PtrInt(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotShadedS32PtrS32PtrS32Ptr(label_id string, xs *int32, ys1 *int32, ys2 *int32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS32, int32](xs)
	ys1Arg, ys1Fin := internal.WrapNumberPtr[C.ImS32, int32](ys1)
	ys2Arg, ys2Fin := internal.WrapNumberPtr[C.ImS32, int32](ys2)
	C.wrap_ImPlot_PlotShaded_S32PtrS32PtrS32Ptr(label_idArg, xsArg, ys1Arg, ys2Arg, C.int(count))

	label_idFin()
	xsFin()
	ys1Fin()
	ys2Fin()
}

func PlotShadedS64PtrInt(label_id string, values []int64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.wrap_ImPlot_PlotShaded_S64PtrInt(label_idArg, (*C.longlong)(&(values[0])), C.int(count))

	label_idFin()
}

func PlotShadedS64PtrS64PtrInt(label_id string, xs []int64, ys []int64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.wrap_ImPlot_PlotShaded_S64PtrS64PtrInt(label_idArg, (*C.longlong)(&(xs[0])), (*C.longlong)(&(ys[0])), C.int(count))

	label_idFin()
}

func PlotShadedS64PtrS64PtrS64Ptr(label_id string, xs []int64, ys1 []int64, ys2 []int64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.wrap_ImPlot_PlotShaded_S64PtrS64PtrS64Ptr(label_idArg, (*C.longlong)(&(xs[0])), (*C.longlong)(&(ys1[0])), (*C.longlong)(&(ys2[0])), C.int(count))

	label_idFin()
}

func PlotShadedS8PtrInt(label_id string, values *int8, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS8, int8](values)
	C.wrap_ImPlot_PlotShaded_S8PtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotShadedS8PtrS8PtrInt(label_id string, xs *int8, ys *int8, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS8, int8](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS8, int8](ys)
	C.wrap_ImPlot_PlotShaded_S8PtrS8PtrInt(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotShadedS8PtrS8PtrS8Ptr(label_id string, xs *int8, ys1 *int8, ys2 *int8, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS8, int8](xs)
	ys1Arg, ys1Fin := internal.WrapNumberPtr[C.ImS8, int8](ys1)
	ys2Arg, ys2Fin := internal.WrapNumberPtr[C.ImS8, int8](ys2)
	C.wrap_ImPlot_PlotShaded_S8PtrS8PtrS8Ptr(label_idArg, xsArg, ys1Arg, ys2Arg, C.int(count))

	label_idFin()
	xsFin()
	ys1Fin()
	ys2Fin()
}

func PlotShadedU16PtrInt(label_id string, values *uint16, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU16, uint16](values)
	C.wrap_ImPlot_PlotShaded_U16PtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotShadedU16PtrU16PtrInt(label_id string, xs *uint16, ys *uint16, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU16, uint16](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU16, uint16](ys)
	C.wrap_ImPlot_PlotShaded_U16PtrU16PtrInt(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotShadedU16PtrU16PtrU16Ptr(label_id string, xs *uint16, ys1 *uint16, ys2 *uint16, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU16, uint16](xs)
	ys1Arg, ys1Fin := internal.WrapNumberPtr[C.ImU16, uint16](ys1)
	ys2Arg, ys2Fin := internal.WrapNumberPtr[C.ImU16, uint16](ys2)
	C.wrap_ImPlot_PlotShaded_U16PtrU16PtrU16Ptr(label_idArg, xsArg, ys1Arg, ys2Arg, C.int(count))

	label_idFin()
	xsFin()
	ys1Fin()
	ys2Fin()
}

func PlotShadedU32PtrInt(label_id string, values *uint32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU32, uint32](values)
	C.wrap_ImPlot_PlotShaded_U32PtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotShadedU32PtrU32PtrInt(label_id string, xs *uint32, ys *uint32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU32, uint32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU32, uint32](ys)
	C.wrap_ImPlot_PlotShaded_U32PtrU32PtrInt(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotShadedU32PtrU32PtrU32Ptr(label_id string, xs *uint32, ys1 *uint32, ys2 *uint32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU32, uint32](xs)
	ys1Arg, ys1Fin := internal.WrapNumberPtr[C.ImU32, uint32](ys1)
	ys2Arg, ys2Fin := internal.WrapNumberPtr[C.ImU32, uint32](ys2)
	C.wrap_ImPlot_PlotShaded_U32PtrU32PtrU32Ptr(label_idArg, xsArg, ys1Arg, ys2Arg, C.int(count))

	label_idFin()
	xsFin()
	ys1Fin()
	ys2Fin()
}

func PlotShadedU64PtrInt(label_id string, values []uint64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.wrap_ImPlot_PlotShaded_U64PtrInt(label_idArg, (*C.ulonglong)(&(values[0])), C.int(count))

	label_idFin()
}

func PlotShadedU64PtrU64PtrInt(label_id string, xs []uint64, ys []uint64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.wrap_ImPlot_PlotShaded_U64PtrU64PtrInt(label_idArg, (*C.ulonglong)(&(xs[0])), (*C.ulonglong)(&(ys[0])), C.int(count))

	label_idFin()
}

func PlotShadedU64PtrU64PtrU64Ptr(label_id string, xs []uint64, ys1 []uint64, ys2 []uint64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.wrap_ImPlot_PlotShaded_U64PtrU64PtrU64Ptr(label_idArg, (*C.ulonglong)(&(xs[0])), (*C.ulonglong)(&(ys1[0])), (*C.ulonglong)(&(ys2[0])), C.int(count))

	label_idFin()
}

func PlotShadedU8PtrInt(label_id string, values *byte, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU8, byte](values)
	C.wrap_ImPlot_PlotShaded_U8PtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotShadedU8PtrU8PtrInt(label_id string, xs *byte, ys *byte, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU8, byte](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU8, byte](ys)
	C.wrap_ImPlot_PlotShaded_U8PtrU8PtrInt(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotShadedU8PtrU8PtrU8Ptr(label_id string, xs *byte, ys1 *byte, ys2 *byte, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU8, byte](xs)
	ys1Arg, ys1Fin := internal.WrapNumberPtr[C.ImU8, byte](ys1)
	ys2Arg, ys2Fin := internal.WrapNumberPtr[C.ImU8, byte](ys2)
	C.wrap_ImPlot_PlotShaded_U8PtrU8PtrU8Ptr(label_idArg, xsArg, ys1Arg, ys2Arg, C.int(count))

	label_idFin()
	xsFin()
	ys1Fin()
	ys2Fin()
}

func PlotShadeddoublePtrInt(label_id string, values *float64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.double, float64](values)
	C.wrap_ImPlot_PlotShaded_doublePtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotShadeddoublePtrdoublePtrInt(label_id string, xs *float64, ys *float64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.double, float64](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.double, float64](ys)
	C.wrap_ImPlot_PlotShaded_doublePtrdoublePtrInt(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotShadeddoublePtrdoublePtrdoublePtr(label_id string, xs *float64, ys1 *float64, ys2 *float64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.double, float64](xs)
	ys1Arg, ys1Fin := internal.WrapNumberPtr[C.double, float64](ys1)
	ys2Arg, ys2Fin := internal.WrapNumberPtr[C.double, float64](ys2)
	C.wrap_ImPlot_PlotShaded_doublePtrdoublePtrdoublePtr(label_idArg, xsArg, ys1Arg, ys2Arg, C.int(count))

	label_idFin()
	xsFin()
	ys1Fin()
	ys2Fin()
}

func PlotStairsFloatPtrFloatPtr(label_id string, xs *float32, ys *float32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.float, float32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.float, float32](ys)
	C.wrap_ImPlot_PlotStairs_FloatPtrFloatPtr(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotStairsFloatPtrInt(label_id string, values *float32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.float, float32](values)
	C.wrap_ImPlot_PlotStairs_FloatPtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotStairsS16PtrInt(label_id string, values *int16, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS16, int16](values)
	C.wrap_ImPlot_PlotStairs_S16PtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotStairsS16PtrS16Ptr(label_id string, xs *int16, ys *int16, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS16, int16](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS16, int16](ys)
	C.wrap_ImPlot_PlotStairs_S16PtrS16Ptr(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotStairsS32PtrInt(label_id string, values *int32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS32, int32](values)
	C.wrap_ImPlot_PlotStairs_S32PtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotStairsS32PtrS32Ptr(label_id string, xs *int32, ys *int32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS32, int32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS32, int32](ys)
	C.wrap_ImPlot_PlotStairs_S32PtrS32Ptr(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotStairsS64PtrInt(label_id string, values []int64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.wrap_ImPlot_PlotStairs_S64PtrInt(label_idArg, (*C.longlong)(&(values[0])), C.int(count))

	label_idFin()
}

func PlotStairsS64PtrS64Ptr(label_id string, xs []int64, ys []int64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.wrap_ImPlot_PlotStairs_S64PtrS64Ptr(label_idArg, (*C.longlong)(&(xs[0])), (*C.longlong)(&(ys[0])), C.int(count))

	label_idFin()
}

func PlotStairsS8PtrInt(label_id string, values *int8, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS8, int8](values)
	C.wrap_ImPlot_PlotStairs_S8PtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotStairsS8PtrS8Ptr(label_id string, xs *int8, ys *int8, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS8, int8](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS8, int8](ys)
	C.wrap_ImPlot_PlotStairs_S8PtrS8Ptr(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotStairsU16PtrInt(label_id string, values *uint16, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU16, uint16](values)
	C.wrap_ImPlot_PlotStairs_U16PtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotStairsU16PtrU16Ptr(label_id string, xs *uint16, ys *uint16, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU16, uint16](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU16, uint16](ys)
	C.wrap_ImPlot_PlotStairs_U16PtrU16Ptr(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotStairsU32PtrInt(label_id string, values *uint32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU32, uint32](values)
	C.wrap_ImPlot_PlotStairs_U32PtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotStairsU32PtrU32Ptr(label_id string, xs *uint32, ys *uint32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU32, uint32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU32, uint32](ys)
	C.wrap_ImPlot_PlotStairs_U32PtrU32Ptr(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotStairsU64PtrInt(label_id string, values []uint64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.wrap_ImPlot_PlotStairs_U64PtrInt(label_idArg, (*C.ulonglong)(&(values[0])), C.int(count))

	label_idFin()
}

func PlotStairsU64PtrU64Ptr(label_id string, xs []uint64, ys []uint64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.wrap_ImPlot_PlotStairs_U64PtrU64Ptr(label_idArg, (*C.ulonglong)(&(xs[0])), (*C.ulonglong)(&(ys[0])), C.int(count))

	label_idFin()
}

func PlotStairsU8PtrInt(label_id string, values *byte, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU8, byte](values)
	C.wrap_ImPlot_PlotStairs_U8PtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotStairsU8PtrU8Ptr(label_id string, xs *byte, ys *byte, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU8, byte](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU8, byte](ys)
	C.wrap_ImPlot_PlotStairs_U8PtrU8Ptr(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotStairsdoublePtrInt(label_id string, values *float64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.double, float64](values)
	C.wrap_ImPlot_PlotStairs_doublePtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotStairsdoublePtrdoublePtr(label_id string, xs *float64, ys *float64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.double, float64](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.double, float64](ys)
	C.wrap_ImPlot_PlotStairs_doublePtrdoublePtr(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotStemsFloatPtrFloatPtr(label_id string, xs *float32, ys *float32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.float, float32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.float, float32](ys)
	C.wrap_ImPlot_PlotStems_FloatPtrFloatPtr(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotStemsFloatPtrInt(label_id string, values *float32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.float, float32](values)
	C.wrap_ImPlot_PlotStems_FloatPtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotStemsS16PtrInt(label_id string, values *int16, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS16, int16](values)
	C.wrap_ImPlot_PlotStems_S16PtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotStemsS16PtrS16Ptr(label_id string, xs *int16, ys *int16, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS16, int16](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS16, int16](ys)
	C.wrap_ImPlot_PlotStems_S16PtrS16Ptr(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotStemsS32PtrInt(label_id string, values *int32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS32, int32](values)
	C.wrap_ImPlot_PlotStems_S32PtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotStemsS32PtrS32Ptr(label_id string, xs *int32, ys *int32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS32, int32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS32, int32](ys)
	C.wrap_ImPlot_PlotStems_S32PtrS32Ptr(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotStemsS64PtrInt(label_id string, values []int64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.wrap_ImPlot_PlotStems_S64PtrInt(label_idArg, (*C.longlong)(&(values[0])), C.int(count))

	label_idFin()
}

func PlotStemsS64PtrS64Ptr(label_id string, xs []int64, ys []int64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.wrap_ImPlot_PlotStems_S64PtrS64Ptr(label_idArg, (*C.longlong)(&(xs[0])), (*C.longlong)(&(ys[0])), C.int(count))

	label_idFin()
}

func PlotStemsS8PtrInt(label_id string, values *int8, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImS8, int8](values)
	C.wrap_ImPlot_PlotStems_S8PtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotStemsS8PtrS8Ptr(label_id string, xs *int8, ys *int8, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImS8, int8](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImS8, int8](ys)
	C.wrap_ImPlot_PlotStems_S8PtrS8Ptr(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotStemsU16PtrInt(label_id string, values *uint16, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU16, uint16](values)
	C.wrap_ImPlot_PlotStems_U16PtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotStemsU16PtrU16Ptr(label_id string, xs *uint16, ys *uint16, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU16, uint16](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU16, uint16](ys)
	C.wrap_ImPlot_PlotStems_U16PtrU16Ptr(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotStemsU32PtrInt(label_id string, values *uint32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU32, uint32](values)
	C.wrap_ImPlot_PlotStems_U32PtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotStemsU32PtrU32Ptr(label_id string, xs *uint32, ys *uint32, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU32, uint32](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU32, uint32](ys)
	C.wrap_ImPlot_PlotStems_U32PtrU32Ptr(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotStemsU64PtrInt(label_id string, values []uint64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.wrap_ImPlot_PlotStems_U64PtrInt(label_idArg, (*C.ulonglong)(&(values[0])), C.int(count))

	label_idFin()
}

func PlotStemsU64PtrU64Ptr(label_id string, xs []uint64, ys []uint64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	C.wrap_ImPlot_PlotStems_U64PtrU64Ptr(label_idArg, (*C.ulonglong)(&(xs[0])), (*C.ulonglong)(&(ys[0])), C.int(count))

	label_idFin()
}

func PlotStemsU8PtrInt(label_id string, values *byte, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.ImU8, byte](values)
	C.wrap_ImPlot_PlotStems_U8PtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotStemsU8PtrU8Ptr(label_id string, xs *byte, ys *byte, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.ImU8, byte](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.ImU8, byte](ys)
	C.wrap_ImPlot_PlotStems_U8PtrU8Ptr(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotStemsdoublePtrInt(label_id string, values *float64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	valuesArg, valuesFin := internal.WrapNumberPtr[C.double, float64](values)
	C.wrap_ImPlot_PlotStems_doublePtrInt(label_idArg, valuesArg, C.int(count))

	label_idFin()
	valuesFin()
}

func PlotStemsdoublePtrdoublePtr(label_id string, xs *float64, ys *float64, count int32) {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)
	xsArg, xsFin := internal.WrapNumberPtr[C.double, float64](xs)
	ysArg, ysFin := internal.WrapNumberPtr[C.double, float64](ys)
	C.wrap_ImPlot_PlotStems_doublePtrdoublePtr(label_idArg, xsArg, ysArg, C.int(count))

	label_idFin()
	xsFin()
	ysFin()
}

func PlotText(text string, x float64, y float64) {
	textArg, textFin := internal.WrapString[C.char](text)
	C.wrap_ImPlot_PlotText(textArg, C.double(x), C.double(y))

	textFin()
}

func PlotToPixelsPlotPoInt(plt PlotPoint) imgui.Vec2 {
	pOut := new(imgui.Vec2)
	pOutArg, pOutFin := internal.Wrap(pOut)

	C.wrap_ImPlot_PlotToPixels_PlotPoInt(internal.ReinterpretCast[*C.ImVec2](pOutArg), internal.ReinterpretCast[C.ImPlotPoint](plt.ToC()))

	pOutFin()

	return *pOut
}

func PlotToPixelsdouble(x float64, y float64) imgui.Vec2 {
	pOut := new(imgui.Vec2)
	pOutArg, pOutFin := internal.Wrap(pOut)

	C.wrap_ImPlot_PlotToPixels_double(internal.ReinterpretCast[*C.ImVec2](pOutArg), C.double(x), C.double(y))

	pOutFin()

	return *pOut
}

func PopColormap() {
	C.wrap_ImPlot_PopColormap()
}

func PopStyleColor() {
	C.wrap_ImPlot_PopStyleColor()
}

func PopStyleVar() {
	C.wrap_ImPlot_PopStyleVar()
}

func PushPlotClipRect() {
	C.wrap_ImPlot_PushPlotClipRect()
}

func RegisterOrGetItem(label_id string, flags ItemFlags) *Item {
	label_idArg, label_idFin := internal.WrapString[C.char](label_id)

	defer func() {
		label_idFin()
	}()
	return NewItemFromC(C.wrap_ImPlot_RegisterOrGetItem(label_idArg, C.ImPlotItemFlags(flags)))
}

func SampleColormap(t float32) imgui.Vec4 {
	pOut := new(imgui.Vec4)
	pOutArg, pOutFin := internal.Wrap(pOut)

	C.wrap_ImPlot_SampleColormap(internal.ReinterpretCast[*C.ImVec4](pOutArg), C.float(t))

	pOutFin()

	return *pOut
}

func SetNextAxesLimits(x_min float64, x_max float64, y_min float64, y_max float64) {
	C.wrap_ImPlot_SetNextAxesLimits(C.double(x_min), C.double(x_max), C.double(y_min), C.double(y_max))
}

func SetNextAxisLimits(axis AxisEnum, v_min float64, v_max float64) {
	C.wrap_ImPlot_SetNextAxisLimits(C.ImAxis(axis), C.double(v_min), C.double(v_max))
}

func SetNextErrorBarStyle() {
	C.wrap_ImPlot_SetNextErrorBarStyle()
}

func SetNextFillStyle() {
	C.wrap_ImPlot_SetNextFillStyle()
}

func SetNextLineStyle() {
	C.wrap_ImPlot_SetNextLineStyle()
}

func SetNextMarkerStyle() {
	C.wrap_ImPlot_SetNextMarkerStyle()
}

func SetupAxes(x_label string, y_label string) {
	x_labelArg, x_labelFin := internal.WrapString[C.char](x_label)
	y_labelArg, y_labelFin := internal.WrapString[C.char](y_label)
	C.wrap_ImPlot_SetupAxes(x_labelArg, y_labelArg)

	x_labelFin()
	y_labelFin()
}

func SetupAxesLimits(x_min float64, x_max float64, y_min float64, y_max float64) {
	C.wrap_ImPlot_SetupAxesLimits(C.double(x_min), C.double(x_max), C.double(y_min), C.double(y_max))
}

func SetupAxis(axis AxisEnum) {
	C.wrap_ImPlot_SetupAxis(C.ImAxis(axis))
}

func SetupAxisFormatPlotFormatter(axis AxisEnum, formatter Formatter) {
	formatterArg, formatterFin := formatter.C()
	C.wrap_ImPlot_SetupAxisFormat_PlotFormatter(C.ImAxis(axis), internal.ReinterpretCast[C.ImPlotFormatter](formatterArg))

	formatterFin()
}

func SetupAxisLimits(axis AxisEnum, v_min float64, v_max float64) {
	C.wrap_ImPlot_SetupAxisLimits(C.ImAxis(axis), C.double(v_min), C.double(v_max))
}

func SetupAxisScalePlotTransform(axis AxisEnum, forward Transform, inverse Transform) {
	forwardArg, forwardFin := forward.C()
	inverseArg, inverseFin := inverse.C()
	C.wrap_ImPlot_SetupAxisScale_PlotTransform(C.ImAxis(axis), internal.ReinterpretCast[C.ImPlotTransform](forwardArg), internal.ReinterpretCast[C.ImPlotTransform](inverseArg))

	forwardFin()
	inverseFin()
}

func SetupAxisTicksdouble(axis AxisEnum, v_min float64, v_max float64, n_ticks int32) {
	C.wrap_ImPlot_SetupAxisTicks_double(C.ImAxis(axis), C.double(v_min), C.double(v_max), C.int(n_ticks))
}

func SetupAxisTicksdoublePtr(axis AxisEnum, values *float64, n_ticks int32) {
	valuesArg, valuesFin := internal.WrapNumberPtr[C.double, float64](values)
	C.wrap_ImPlot_SetupAxisTicks_doublePtr(C.ImAxis(axis), valuesArg, C.int(n_ticks))

	valuesFin()
}

func SetupLegend(location Location) {
	C.wrap_ImPlot_SetupLegend(C.ImPlotLocation(location))
}

func SetupMouseText(location Location) {
	C.wrap_ImPlot_SetupMouseText(C.ImPlotLocation(location))
}

func ShowAltLegend(title_id string) {
	title_idArg, title_idFin := internal.WrapString[C.char](title_id)
	C.wrap_ImPlot_ShowAltLegend(title_idArg)

	title_idFin()
}

func ShowAxisContextMenu(axis *Axis, equal_axis *Axis) {
	axisArg, axisFin := axis.Handle()
	equal_axisArg, equal_axisFin := equal_axis.Handle()
	C.wrap_ImPlot_ShowAxisContextMenu(internal.ReinterpretCast[*C.ImPlotAxis](axisArg), internal.ReinterpretCast[*C.ImPlotAxis](equal_axisArg))

	axisFin()
	equal_axisFin()
}

func ShowDatePicker(id string, level *int32, t *PlotTime) bool {
	idArg, idFin := internal.WrapString[C.char](id)
	levelArg, levelFin := internal.WrapNumberPtr[C.int, int32](level)
	tArg, tFin := internal.Wrap(t)

	defer func() {
		idFin()
		levelFin()
		tFin()
	}()
	return C.wrap_ImPlot_ShowDatePicker(idArg, levelArg, internal.ReinterpretCast[*C.ImPlotTime](tArg)) == C.bool(true)
}

func ShowDemoWindow() {
	C.wrap_ImPlot_ShowDemoWindow()
}

func ShowMetricsWindow() {
	C.wrap_ImPlot_ShowMetricsWindow()
}

func ShowStyleEditor() {
	C.wrap_ImPlot_ShowStyleEditor()
}

func StyleColorsAuto() {
	C.wrap_ImPlot_StyleColorsAuto()
}

func StyleColorsClassic() {
	C.wrap_ImPlot_StyleColorsClassic()
}

func StyleColorsDark() {
	C.wrap_ImPlot_StyleColorsDark()
}

func StyleColorsLight() {
	C.wrap_ImPlot_StyleColorsLight()
}

func TagXBool(x float64, col imgui.Vec4) {
	C.wrap_ImPlot_TagX_Bool(C.double(x), internal.ReinterpretCast[C.ImVec4](col.ToC()))
}

func TagYBool(y float64, col imgui.Vec4) {
	C.wrap_ImPlot_TagY_Bool(C.double(y), internal.ReinterpretCast[C.ImVec4](col.ToC()))
}

// Formatter_Time_Data_GetTime returns value of Formatter_Time_Data.Time
func (self *FormatterTimeData) TimeDataGetTime() PlotTime {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() PlotTime {
		out := C.wrap_Formatter_Time_Data_GetTime(internal.ReinterpretCast[*C.Formatter_Time_Data](selfArg))
		return *(&PlotTime{}).FromC(unsafe.Pointer(&out))
	}()
}

// Formatter_Time_Data_GetSpec returns value of Formatter_Time_Data.Spec
func (self *FormatterTimeData) TimeDataGetSpec() DateTimeSpec {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return *NewDateTimeSpecFromC(func() *C.ImPlotDateTimeSpec {
		result := C.wrap_Formatter_Time_Data_GetSpec(internal.ReinterpretCast[*C.Formatter_Time_Data](selfArg))
		return &result
	}())
}

// Formatter_Time_Data_GetUserFormatter returns value of Formatter_Time_Data.UserFormatter
func (self *FormatterTimeData) TimeDataGetUserFormatter() Formatter {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return *NewFormatterFromC(func() *C.ImPlotFormatter {
		result := C.wrap_Formatter_Time_Data_GetUserFormatter(internal.ReinterpretCast[*C.Formatter_Time_Data](selfArg))
		return &result
	}())
}

// Formatter_Time_Data_GetUserFormatterData returns value of Formatter_Time_Data.UserFormatterData
func (self *FormatterTimeData) TimeDataGetUserFormatterData() uintptr {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return uintptr(C.wrap_Formatter_Time_Data_GetUserFormatterData(internal.ReinterpretCast[*C.Formatter_Time_Data](selfArg)))
}

// ImPlotAlignmentData_SetVertical sets value of ImPlotAlignmentData.Vertical
func (self AlignmentData) SetVertical(v bool) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAlignmentData_SetVertical(selfArg, C.bool(v))
}

// ImPlotAlignmentData_GetVertical returns value of ImPlotAlignmentData.Vertical
func (self *AlignmentData) Vertical() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.wrap_ImPlotAlignmentData_GetVertical(internal.ReinterpretCast[*C.ImPlotAlignmentData](selfArg)) == C.bool(true)
}

// ImPlotAlignmentData_SetPadA sets value of ImPlotAlignmentData.PadA
func (self AlignmentData) SetPadA(v float32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAlignmentData_SetPadA(selfArg, C.float(v))
}

// ImPlotAlignmentData_GetPadA returns value of ImPlotAlignmentData.PadA
func (self *AlignmentData) PadA() float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_ImPlotAlignmentData_GetPadA(internal.ReinterpretCast[*C.ImPlotAlignmentData](selfArg)))
}

// ImPlotAlignmentData_SetPadB sets value of ImPlotAlignmentData.PadB
func (self AlignmentData) SetPadB(v float32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAlignmentData_SetPadB(selfArg, C.float(v))
}

// ImPlotAlignmentData_GetPadB returns value of ImPlotAlignmentData.PadB
func (self *AlignmentData) PadB() float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_ImPlotAlignmentData_GetPadB(internal.ReinterpretCast[*C.ImPlotAlignmentData](selfArg)))
}

// ImPlotAlignmentData_SetPadAMax sets value of ImPlotAlignmentData.PadAMax
func (self AlignmentData) SetPadAMax(v float32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAlignmentData_SetPadAMax(selfArg, C.float(v))
}

// ImPlotAlignmentData_GetPadAMax returns value of ImPlotAlignmentData.PadAMax
func (self *AlignmentData) PadAMax() float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_ImPlotAlignmentData_GetPadAMax(internal.ReinterpretCast[*C.ImPlotAlignmentData](selfArg)))
}

// ImPlotAlignmentData_SetPadBMax sets value of ImPlotAlignmentData.PadBMax
func (self AlignmentData) SetPadBMax(v float32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAlignmentData_SetPadBMax(selfArg, C.float(v))
}

// ImPlotAlignmentData_GetPadBMax returns value of ImPlotAlignmentData.PadBMax
func (self *AlignmentData) PadBMax() float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_ImPlotAlignmentData_GetPadBMax(internal.ReinterpretCast[*C.ImPlotAlignmentData](selfArg)))
}

// ImPlotAnnotation_SetPos sets value of ImPlotAnnotation.Pos
func (self Annotation) SetPos(v imgui.Vec2) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAnnotation_SetPos(selfArg, internal.ReinterpretCast[C.ImVec2](v.ToC()))
}

// ImPlotAnnotation_GetPos returns value of ImPlotAnnotation.Pos
func (self *Annotation) Pos() imgui.Vec2 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() imgui.Vec2 {
		out := C.wrap_ImPlotAnnotation_GetPos(internal.ReinterpretCast[*C.ImPlotAnnotation](selfArg))
		return *(&imgui.Vec2{}).FromC(unsafe.Pointer(&out))
	}()
}

// ImPlotAnnotation_SetOffset sets value of ImPlotAnnotation.Offset
func (self Annotation) SetOffset(v imgui.Vec2) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAnnotation_SetOffset(selfArg, internal.ReinterpretCast[C.ImVec2](v.ToC()))
}

// ImPlotAnnotation_GetOffset returns value of ImPlotAnnotation.Offset
func (self *Annotation) Offset() imgui.Vec2 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() imgui.Vec2 {
		out := C.wrap_ImPlotAnnotation_GetOffset(internal.ReinterpretCast[*C.ImPlotAnnotation](selfArg))
		return *(&imgui.Vec2{}).FromC(unsafe.Pointer(&out))
	}()
}

// ImPlotAnnotation_SetColorBg sets value of ImPlotAnnotation.ColorBg
func (self Annotation) SetColorBg(v uint32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAnnotation_SetColorBg(selfArg, C.ImU32(v))
}

// ImPlotAnnotation_GetColorBg returns value of ImPlotAnnotation.ColorBg
func (self *Annotation) ColorBg() uint32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return uint32(C.wrap_ImPlotAnnotation_GetColorBg(internal.ReinterpretCast[*C.ImPlotAnnotation](selfArg)))
}

// ImPlotAnnotation_SetColorFg sets value of ImPlotAnnotation.ColorFg
func (self Annotation) SetColorFg(v uint32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAnnotation_SetColorFg(selfArg, C.ImU32(v))
}

// ImPlotAnnotation_GetColorFg returns value of ImPlotAnnotation.ColorFg
func (self *Annotation) ColorFg() uint32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return uint32(C.wrap_ImPlotAnnotation_GetColorFg(internal.ReinterpretCast[*C.ImPlotAnnotation](selfArg)))
}

// ImPlotAnnotation_SetTextOffset sets value of ImPlotAnnotation.TextOffset
func (self Annotation) SetTextOffset(v int32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAnnotation_SetTextOffset(selfArg, C.int(v))
}

// ImPlotAnnotation_GetTextOffset returns value of ImPlotAnnotation.TextOffset
func (self *Annotation) TextOffset() int32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return int32(C.wrap_ImPlotAnnotation_GetTextOffset(internal.ReinterpretCast[*C.ImPlotAnnotation](selfArg)))
}

// ImPlotAnnotation_SetClamp sets value of ImPlotAnnotation.Clamp
func (self Annotation) SetClamp(v bool) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAnnotation_SetClamp(selfArg, C.bool(v))
}

// ImPlotAnnotation_GetClamp returns value of ImPlotAnnotation.Clamp
func (self *Annotation) Clamp() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.wrap_ImPlotAnnotation_GetClamp(internal.ReinterpretCast[*C.ImPlotAnnotation](selfArg)) == C.bool(true)
}

// ImPlotAnnotationCollection_SetAnnotations sets value of ImPlotAnnotationCollection.Annotations
func (self AnnotationCollection) SetAnnotations(v vectors.Vector[Annotation]) {
	vData := v.Data
	vDataArg, _ := vData.Handle()
	vVecArg := new(C.ImVector_ImPlotAnnotation)
	vVecArg.Size = C.int(v.Size)
	vVecArg.Capacity = C.int(v.Capacity)
	vVecArg.Data = internal.ReinterpretCast[*C.ImPlotAnnotation](vDataArg)
	v.Pinner().Pin(vVecArg.Data)

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAnnotationCollection_SetAnnotations(selfArg, *vVecArg)
}

// ImPlotAnnotationCollection_GetAnnotations returns value of ImPlotAnnotationCollection.Annotations
func (self *AnnotationCollection) Annotations() vectors.Vector[Annotation] {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return vectors.NewVectorFromC(C.wrap_ImPlotAnnotationCollection_GetAnnotations(internal.ReinterpretCast[*C.ImPlotAnnotationCollection](selfArg)).Size, C.wrap_ImPlotAnnotationCollection_GetAnnotations(internal.ReinterpretCast[*C.ImPlotAnnotationCollection](selfArg)).Capacity, NewAnnotationFromC(C.wrap_ImPlotAnnotationCollection_GetAnnotations(internal.ReinterpretCast[*C.ImPlotAnnotationCollection](selfArg)).Data))
}

// ImPlotAnnotationCollection_SetTextBuffer sets value of ImPlotAnnotationCollection.TextBuffer
func (self AnnotationCollection) SetTextBuffer(v imgui.TextBuffer) {
	vArg, _ := v.C()

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAnnotationCollection_SetTextBuffer(selfArg, internal.ReinterpretCast[C.ImGuiTextBuffer](vArg))
}

// ImPlotAnnotationCollection_GetTextBuffer returns value of ImPlotAnnotationCollection.TextBuffer
func (self *AnnotationCollection) TextBuffer() imgui.TextBuffer {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return *imgui.NewTextBufferFromC(func() *C.ImGuiTextBuffer {
		result := C.wrap_ImPlotAnnotationCollection_GetTextBuffer(internal.ReinterpretCast[*C.ImPlotAnnotationCollection](selfArg))
		return &result
	}())
}

// ImPlotAnnotationCollection_SetSize sets value of ImPlotAnnotationCollection.Size
func (self AnnotationCollection) SetSize(v int32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAnnotationCollection_SetSize(selfArg, C.int(v))
}

// ImPlotAnnotationCollection_GetSize returns value of ImPlotAnnotationCollection.Size
func (self *AnnotationCollection) Size() int32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return int32(C.wrap_ImPlotAnnotationCollection_GetSize(internal.ReinterpretCast[*C.ImPlotAnnotationCollection](selfArg)))
}

// ImPlotAxis_SetID sets value of ImPlotAxis.ID
func (self Axis) SetID(v imgui.ID) {
	vArg, _ := v.C()

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetID(selfArg, internal.ReinterpretCast[C.ImGuiID](vArg))
}

// ImPlotAxis_GetID returns value of ImPlotAxis.ID
func (self *Axis) ID() imgui.ID {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return *imgui.NewIDFromC(func() *C.ImGuiID {
		result := C.wrap_ImPlotAxis_GetID(internal.ReinterpretCast[*C.ImPlotAxis](selfArg))
		return &result
	}())
}

// ImPlotAxis_SetFlags sets value of ImPlotAxis.Flags
func (self Axis) SetFlags(v AxisFlags) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetFlags(selfArg, C.ImPlotAxisFlags(v))
}

// ImPlotAxis_GetFlags returns value of ImPlotAxis.Flags
func (self *Axis) Flags() AxisFlags {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return AxisFlags(C.wrap_ImPlotAxis_GetFlags(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)))
}

// ImPlotAxis_SetPreviousFlags sets value of ImPlotAxis.PreviousFlags
func (self Axis) SetPreviousFlags(v AxisFlags) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetPreviousFlags(selfArg, C.ImPlotAxisFlags(v))
}

// ImPlotAxis_GetPreviousFlags returns value of ImPlotAxis.PreviousFlags
func (self *Axis) PreviousFlags() AxisFlags {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return AxisFlags(C.wrap_ImPlotAxis_GetPreviousFlags(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)))
}

// ImPlotAxis_SetRange sets value of ImPlotAxis.Range
func (self Axis) SetRange(v Range) {
	vArg, _ := v.C()

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetRange(selfArg, internal.ReinterpretCast[C.ImPlotRange](vArg))
}

// ImPlotAxis_GetRange returns value of ImPlotAxis.Range
func (self *Axis) Range() Range {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return *NewRangeFromC(func() *C.ImPlotRange {
		result := C.wrap_ImPlotAxis_GetRange(internal.ReinterpretCast[*C.ImPlotAxis](selfArg))
		return &result
	}())
}

// ImPlotAxis_SetRangeCond sets value of ImPlotAxis.RangeCond
func (self Axis) SetRangeCond(v Cond) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetRangeCond(selfArg, C.ImPlotCond(v))
}

// ImPlotAxis_GetRangeCond returns value of ImPlotAxis.RangeCond
func (self *Axis) RangeCond() Cond {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return Cond(C.wrap_ImPlotAxis_GetRangeCond(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)))
}

// ImPlotAxis_SetScale sets value of ImPlotAxis.Scale
func (self Axis) SetScale(v Scale) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetScale(selfArg, C.ImPlotScale(v))
}

// ImPlotAxis_GetScale returns value of ImPlotAxis.Scale
func (self *Axis) Scale() Scale {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return Scale(C.wrap_ImPlotAxis_GetScale(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)))
}

// ImPlotAxis_SetFitExtents sets value of ImPlotAxis.FitExtents
func (self Axis) SetFitExtents(v Range) {
	vArg, _ := v.C()

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetFitExtents(selfArg, internal.ReinterpretCast[C.ImPlotRange](vArg))
}

// ImPlotAxis_GetFitExtents returns value of ImPlotAxis.FitExtents
func (self *Axis) FitExtents() Range {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return *NewRangeFromC(func() *C.ImPlotRange {
		result := C.wrap_ImPlotAxis_GetFitExtents(internal.ReinterpretCast[*C.ImPlotAxis](selfArg))
		return &result
	}())
}

// ImPlotAxis_SetOrthoAxis sets value of ImPlotAxis.OrthoAxis
func (self Axis) SetOrthoAxis(v *Axis) {
	vArg, _ := v.Handle()

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetOrthoAxis(selfArg, internal.ReinterpretCast[*C.ImPlotAxis](vArg))
}

// ImPlotAxis_GetOrthoAxis returns value of ImPlotAxis.OrthoAxis
func (self *Axis) OrthoAxis() *Axis {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return NewAxisFromC(C.wrap_ImPlotAxis_GetOrthoAxis(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)))
}

// ImPlotAxis_SetConstraintRange sets value of ImPlotAxis.ConstraintRange
func (self Axis) SetConstraintRange(v Range) {
	vArg, _ := v.C()

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetConstraintRange(selfArg, internal.ReinterpretCast[C.ImPlotRange](vArg))
}

// ImPlotAxis_GetConstraintRange returns value of ImPlotAxis.ConstraintRange
func (self *Axis) ConstraintRange() Range {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return *NewRangeFromC(func() *C.ImPlotRange {
		result := C.wrap_ImPlotAxis_GetConstraintRange(internal.ReinterpretCast[*C.ImPlotAxis](selfArg))
		return &result
	}())
}

// ImPlotAxis_SetConstraintZoom sets value of ImPlotAxis.ConstraintZoom
func (self Axis) SetConstraintZoom(v Range) {
	vArg, _ := v.C()

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetConstraintZoom(selfArg, internal.ReinterpretCast[C.ImPlotRange](vArg))
}

// ImPlotAxis_GetConstraintZoom returns value of ImPlotAxis.ConstraintZoom
func (self *Axis) ConstraintZoom() Range {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return *NewRangeFromC(func() *C.ImPlotRange {
		result := C.wrap_ImPlotAxis_GetConstraintZoom(internal.ReinterpretCast[*C.ImPlotAxis](selfArg))
		return &result
	}())
}

// ImPlotAxis_SetTicker sets value of ImPlotAxis.Ticker
func (self Axis) SetTicker(v Ticker) {
	vArg, _ := v.C()

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetTicker(selfArg, internal.ReinterpretCast[C.ImPlotTicker](vArg))
}

// ImPlotAxis_GetTicker returns value of ImPlotAxis.Ticker
func (self *Axis) Ticker() Ticker {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return *NewTickerFromC(func() *C.ImPlotTicker {
		result := C.wrap_ImPlotAxis_GetTicker(internal.ReinterpretCast[*C.ImPlotAxis](selfArg))
		return &result
	}())
}

// ImPlotAxis_SetFormatter sets value of ImPlotAxis.Formatter
func (self Axis) SetFormatter(v Formatter) {
	vArg, _ := v.C()

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetFormatter(selfArg, internal.ReinterpretCast[C.ImPlotFormatter](vArg))
}

// ImPlotAxis_GetFormatter returns value of ImPlotAxis.Formatter
func (self *Axis) Formatter() Formatter {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return *NewFormatterFromC(func() *C.ImPlotFormatter {
		result := C.wrap_ImPlotAxis_GetFormatter(internal.ReinterpretCast[*C.ImPlotAxis](selfArg))
		return &result
	}())
}

// ImPlotAxis_SetFormatterData sets value of ImPlotAxis.FormatterData
func (self Axis) SetFormatterData(v uintptr) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetFormatterData(selfArg, C.uintptr_t(v))
}

// ImPlotAxis_GetFormatterData returns value of ImPlotAxis.FormatterData
func (self *Axis) FormatterData() uintptr {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return uintptr(C.wrap_ImPlotAxis_GetFormatterData(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)))
}

// ImPlotAxis_SetFormatSpec sets value of ImPlotAxis.FormatSpec[16]
func (self Axis) SetFormatSpec(v *[16]rune) {
	vArg := make([]C.char, len(v))
	for i, vV := range v {
		vArg[i] = C.char(vV)
	}

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetFormatSpec(selfArg, (*C.char)(&vArg[0]))

	for i, vV := range vArg {
		(*v)[i] = rune(vV)
	}
}

// ImPlotAxis_GetFormatSpec returns value of ImPlotAxis.FormatSpec[16]
func (self *Axis) FormatSpec() [16]rune {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() [16]rune {
		result := [16]rune{}
		resultMirr := C.wrap_ImPlotAxis_GetFormatSpec(internal.ReinterpretCast[*C.ImPlotAxis](selfArg))
		for i := range result {
			result[i] = rune(C.cimplot_char_GetAtIdx(resultMirr, C.int(i)))
		}

		return result
	}()
}

// ImPlotAxis_SetLinkedMin sets value of ImPlotAxis.LinkedMin
func (self Axis) SetLinkedMin(v *float64) {
	vArg, _ := internal.WrapNumberPtr[C.double, float64](v)

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetLinkedMin(selfArg, vArg)
}

// ImPlotAxis_GetLinkedMin returns value of ImPlotAxis.LinkedMin
func (self *Axis) LinkedMin() *float64 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return (*float64)(C.wrap_ImPlotAxis_GetLinkedMin(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)))
}

// ImPlotAxis_SetLinkedMax sets value of ImPlotAxis.LinkedMax
func (self Axis) SetLinkedMax(v *float64) {
	vArg, _ := internal.WrapNumberPtr[C.double, float64](v)

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetLinkedMax(selfArg, vArg)
}

// ImPlotAxis_GetLinkedMax returns value of ImPlotAxis.LinkedMax
func (self *Axis) LinkedMax() *float64 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return (*float64)(C.wrap_ImPlotAxis_GetLinkedMax(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)))
}

// ImPlotAxis_SetPickerLevel sets value of ImPlotAxis.PickerLevel
func (self Axis) SetPickerLevel(v int32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetPickerLevel(selfArg, C.int(v))
}

// ImPlotAxis_GetPickerLevel returns value of ImPlotAxis.PickerLevel
func (self *Axis) PickerLevel() int32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return int32(C.wrap_ImPlotAxis_GetPickerLevel(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)))
}

// ImPlotAxis_SetPickerTimeMin sets value of ImPlotAxis.PickerTimeMin
func (self Axis) SetPickerTimeMin(v PlotTime) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetPickerTimeMin(selfArg, internal.ReinterpretCast[C.ImPlotTime](v.ToC()))
}

// ImPlotAxis_GetPickerTimeMin returns value of ImPlotAxis.PickerTimeMin
func (self *Axis) PickerTimeMin() PlotTime {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() PlotTime {
		out := C.wrap_ImPlotAxis_GetPickerTimeMin(internal.ReinterpretCast[*C.ImPlotAxis](selfArg))
		return *(&PlotTime{}).FromC(unsafe.Pointer(&out))
	}()
}

// ImPlotAxis_SetPickerTimeMax sets value of ImPlotAxis.PickerTimeMax
func (self Axis) SetPickerTimeMax(v PlotTime) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetPickerTimeMax(selfArg, internal.ReinterpretCast[C.ImPlotTime](v.ToC()))
}

// ImPlotAxis_GetPickerTimeMax returns value of ImPlotAxis.PickerTimeMax
func (self *Axis) PickerTimeMax() PlotTime {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() PlotTime {
		out := C.wrap_ImPlotAxis_GetPickerTimeMax(internal.ReinterpretCast[*C.ImPlotAxis](selfArg))
		return *(&PlotTime{}).FromC(unsafe.Pointer(&out))
	}()
}

// ImPlotAxis_SetTransformForward sets value of ImPlotAxis.TransformForward
func (self Axis) SetTransformForward(v Transform) {
	vArg, _ := v.C()

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetTransformForward(selfArg, internal.ReinterpretCast[C.ImPlotTransform](vArg))
}

// ImPlotAxis_GetTransformForward returns value of ImPlotAxis.TransformForward
func (self *Axis) TransformForward() Transform {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return *NewTransformFromC(func() *C.ImPlotTransform {
		result := C.wrap_ImPlotAxis_GetTransformForward(internal.ReinterpretCast[*C.ImPlotAxis](selfArg))
		return &result
	}())
}

// ImPlotAxis_SetTransformInverse sets value of ImPlotAxis.TransformInverse
func (self Axis) SetTransformInverse(v Transform) {
	vArg, _ := v.C()

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetTransformInverse(selfArg, internal.ReinterpretCast[C.ImPlotTransform](vArg))
}

// ImPlotAxis_GetTransformInverse returns value of ImPlotAxis.TransformInverse
func (self *Axis) TransformInverse() Transform {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return *NewTransformFromC(func() *C.ImPlotTransform {
		result := C.wrap_ImPlotAxis_GetTransformInverse(internal.ReinterpretCast[*C.ImPlotAxis](selfArg))
		return &result
	}())
}

// ImPlotAxis_SetTransformData sets value of ImPlotAxis.TransformData
func (self Axis) SetTransformData(v uintptr) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetTransformData(selfArg, C.uintptr_t(v))
}

// ImPlotAxis_GetTransformData returns value of ImPlotAxis.TransformData
func (self *Axis) TransformData() uintptr {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return uintptr(C.wrap_ImPlotAxis_GetTransformData(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)))
}

// ImPlotAxis_SetPixelMin sets value of ImPlotAxis.PixelMin
func (self Axis) SetPixelMin(v float32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetPixelMin(selfArg, C.float(v))
}

// ImPlotAxis_GetPixelMin returns value of ImPlotAxis.PixelMin
func (self *Axis) PixelMin() float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_ImPlotAxis_GetPixelMin(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)))
}

// ImPlotAxis_SetPixelMax sets value of ImPlotAxis.PixelMax
func (self Axis) SetPixelMax(v float32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetPixelMax(selfArg, C.float(v))
}

// ImPlotAxis_GetPixelMax returns value of ImPlotAxis.PixelMax
func (self *Axis) PixelMax() float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_ImPlotAxis_GetPixelMax(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)))
}

// ImPlotAxis_SetScaleMin sets value of ImPlotAxis.ScaleMin
func (self Axis) SetScaleMin(v float64) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetScaleMin(selfArg, C.double(v))
}

// ImPlotAxis_GetScaleMin returns value of ImPlotAxis.ScaleMin
func (self *Axis) ScaleMin() float64 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float64(C.wrap_ImPlotAxis_GetScaleMin(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)))
}

// ImPlotAxis_SetScaleMax sets value of ImPlotAxis.ScaleMax
func (self Axis) SetScaleMax(v float64) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetScaleMax(selfArg, C.double(v))
}

// ImPlotAxis_GetScaleMax returns value of ImPlotAxis.ScaleMax
func (self *Axis) ScaleMax() float64 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float64(C.wrap_ImPlotAxis_GetScaleMax(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)))
}

// ImPlotAxis_SetScaleToPixel sets value of ImPlotAxis.ScaleToPixel
func (self Axis) SetScaleToPixel(v float64) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetScaleToPixel(selfArg, C.double(v))
}

// ImPlotAxis_GetScaleToPixel returns value of ImPlotAxis.ScaleToPixel
func (self *Axis) ScaleToPixel() float64 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float64(C.wrap_ImPlotAxis_GetScaleToPixel(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)))
}

// ImPlotAxis_SetDatum1 sets value of ImPlotAxis.Datum1
func (self Axis) SetDatum1(v float32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetDatum1(selfArg, C.float(v))
}

// ImPlotAxis_GetDatum1 returns value of ImPlotAxis.Datum1
func (self *Axis) Datum1() float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_ImPlotAxis_GetDatum1(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)))
}

// ImPlotAxis_SetDatum2 sets value of ImPlotAxis.Datum2
func (self Axis) SetDatum2(v float32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetDatum2(selfArg, C.float(v))
}

// ImPlotAxis_GetDatum2 returns value of ImPlotAxis.Datum2
func (self *Axis) Datum2() float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_ImPlotAxis_GetDatum2(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)))
}

// ImPlotAxis_SetHoverRect sets value of ImPlotAxis.HoverRect
func (self Axis) SetHoverRect(v imgui.Rect) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetHoverRect(selfArg, internal.ReinterpretCast[C.ImRect](v.ToC()))
}

// ImPlotAxis_GetHoverRect returns value of ImPlotAxis.HoverRect
func (self *Axis) HoverRect() imgui.Rect {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() imgui.Rect {
		out := C.wrap_ImPlotAxis_GetHoverRect(internal.ReinterpretCast[*C.ImPlotAxis](selfArg))
		return *(&imgui.Rect{}).FromC(unsafe.Pointer(&out))
	}()
}

// ImPlotAxis_SetLabelOffset sets value of ImPlotAxis.LabelOffset
func (self Axis) SetLabelOffset(v int32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetLabelOffset(selfArg, C.int(v))
}

// ImPlotAxis_GetLabelOffset returns value of ImPlotAxis.LabelOffset
func (self *Axis) LabelOffset() int32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return int32(C.wrap_ImPlotAxis_GetLabelOffset(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)))
}

// ImPlotAxis_SetColorMaj sets value of ImPlotAxis.ColorMaj
func (self Axis) SetColorMaj(v uint32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetColorMaj(selfArg, C.ImU32(v))
}

// ImPlotAxis_GetColorMaj returns value of ImPlotAxis.ColorMaj
func (self *Axis) ColorMaj() uint32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return uint32(C.wrap_ImPlotAxis_GetColorMaj(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)))
}

// ImPlotAxis_SetColorMin sets value of ImPlotAxis.ColorMin
func (self Axis) SetColorMin(v uint32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetColorMin(selfArg, C.ImU32(v))
}

// ImPlotAxis_GetColorMin returns value of ImPlotAxis.ColorMin
func (self *Axis) ColorMin() uint32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return uint32(C.wrap_ImPlotAxis_GetColorMin(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)))
}

// ImPlotAxis_SetColorTick sets value of ImPlotAxis.ColorTick
func (self Axis) SetColorTick(v uint32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetColorTick(selfArg, C.ImU32(v))
}

// ImPlotAxis_GetColorTick returns value of ImPlotAxis.ColorTick
func (self *Axis) ColorTick() uint32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return uint32(C.wrap_ImPlotAxis_GetColorTick(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)))
}

// ImPlotAxis_SetColorTxt sets value of ImPlotAxis.ColorTxt
func (self Axis) SetColorTxt(v uint32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetColorTxt(selfArg, C.ImU32(v))
}

// ImPlotAxis_GetColorTxt returns value of ImPlotAxis.ColorTxt
func (self *Axis) ColorTxt() uint32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return uint32(C.wrap_ImPlotAxis_GetColorTxt(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)))
}

// ImPlotAxis_SetColorBg sets value of ImPlotAxis.ColorBg
func (self Axis) SetColorBg(v uint32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetColorBg(selfArg, C.ImU32(v))
}

// ImPlotAxis_GetColorBg returns value of ImPlotAxis.ColorBg
func (self *Axis) ColorBg() uint32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return uint32(C.wrap_ImPlotAxis_GetColorBg(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)))
}

// ImPlotAxis_SetColorHov sets value of ImPlotAxis.ColorHov
func (self Axis) SetColorHov(v uint32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetColorHov(selfArg, C.ImU32(v))
}

// ImPlotAxis_GetColorHov returns value of ImPlotAxis.ColorHov
func (self *Axis) ColorHov() uint32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return uint32(C.wrap_ImPlotAxis_GetColorHov(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)))
}

// ImPlotAxis_SetColorAct sets value of ImPlotAxis.ColorAct
func (self Axis) SetColorAct(v uint32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetColorAct(selfArg, C.ImU32(v))
}

// ImPlotAxis_GetColorAct returns value of ImPlotAxis.ColorAct
func (self *Axis) ColorAct() uint32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return uint32(C.wrap_ImPlotAxis_GetColorAct(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)))
}

// ImPlotAxis_SetColorHiLi sets value of ImPlotAxis.ColorHiLi
func (self Axis) SetColorHiLi(v uint32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetColorHiLi(selfArg, C.ImU32(v))
}

// ImPlotAxis_GetColorHiLi returns value of ImPlotAxis.ColorHiLi
func (self *Axis) ColorHiLi() uint32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return uint32(C.wrap_ImPlotAxis_GetColorHiLi(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)))
}

// ImPlotAxis_SetEnabled sets value of ImPlotAxis.Enabled
func (self Axis) SetEnabled(v bool) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetEnabled(selfArg, C.bool(v))
}

// ImPlotAxis_GetEnabled returns value of ImPlotAxis.Enabled
func (self *Axis) Enabled() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.wrap_ImPlotAxis_GetEnabled(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)) == C.bool(true)
}

// ImPlotAxis_SetVertical sets value of ImPlotAxis.Vertical
func (self Axis) SetVertical(v bool) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetVertical(selfArg, C.bool(v))
}

// ImPlotAxis_GetVertical returns value of ImPlotAxis.Vertical
func (self *Axis) Vertical() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.wrap_ImPlotAxis_GetVertical(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)) == C.bool(true)
}

// ImPlotAxis_SetFitThisFrame sets value of ImPlotAxis.FitThisFrame
func (self Axis) SetFitThisFrame(v bool) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetFitThisFrame(selfArg, C.bool(v))
}

// ImPlotAxis_GetFitThisFrame returns value of ImPlotAxis.FitThisFrame
func (self *Axis) FitThisFrame() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.wrap_ImPlotAxis_GetFitThisFrame(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)) == C.bool(true)
}

// ImPlotAxis_SetHasRange sets value of ImPlotAxis.HasRange
func (self Axis) SetHasRange(v bool) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetHasRange(selfArg, C.bool(v))
}

// ImPlotAxis_GetHasRange returns value of ImPlotAxis.HasRange
func (self *Axis) HasRange() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.wrap_ImPlotAxis_GetHasRange(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)) == C.bool(true)
}

// ImPlotAxis_SetHasFormatSpec sets value of ImPlotAxis.HasFormatSpec
func (self Axis) SetHasFormatSpec(v bool) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetHasFormatSpec(selfArg, C.bool(v))
}

// ImPlotAxis_GetHasFormatSpec returns value of ImPlotAxis.HasFormatSpec
func (self *Axis) HasFormatSpec() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.wrap_ImPlotAxis_GetHasFormatSpec(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)) == C.bool(true)
}

// ImPlotAxis_SetShowDefaultTicks sets value of ImPlotAxis.ShowDefaultTicks
func (self Axis) SetShowDefaultTicks(v bool) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetShowDefaultTicks(selfArg, C.bool(v))
}

// ImPlotAxis_GetShowDefaultTicks returns value of ImPlotAxis.ShowDefaultTicks
func (self *Axis) ShowDefaultTicks() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.wrap_ImPlotAxis_GetShowDefaultTicks(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)) == C.bool(true)
}

// ImPlotAxis_SetHovered sets value of ImPlotAxis.Hovered
func (self Axis) SetHovered(v bool) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetHovered(selfArg, C.bool(v))
}

// ImPlotAxis_GetHovered returns value of ImPlotAxis.Hovered
func (self *Axis) Hovered() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.wrap_ImPlotAxis_GetHovered(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)) == C.bool(true)
}

// ImPlotAxis_SetHeld sets value of ImPlotAxis.Held
func (self Axis) SetHeld(v bool) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotAxis_SetHeld(selfArg, C.bool(v))
}

// ImPlotAxis_GetHeld returns value of ImPlotAxis.Held
func (self *Axis) Held() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.wrap_ImPlotAxis_GetHeld(internal.ReinterpretCast[*C.ImPlotAxis](selfArg)) == C.bool(true)
}

// ImPlotColormapData_SetKeys sets value of ImPlotColormapData.Keys
func (self ColormapData) SetKeys(v vectors.Vector[uint32]) {
	vData := v.Data
	vDataArg, _ := internal.WrapNumberPtr[C.ImU32, uint32](vData)
	vVecArg := new(C.ImVector_ImU32)
	vVecArg.Size = C.int(v.Size)
	vVecArg.Capacity = C.int(v.Capacity)
	vVecArg.Data = vDataArg
	v.Pinner().Pin(vVecArg.Data)

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotColormapData_SetKeys(selfArg, *vVecArg)
}

// ImPlotColormapData_SetKeyCounts sets value of ImPlotColormapData.KeyCounts
func (self ColormapData) SetKeyCounts(v vectors.Vector[int32]) {
	vData := v.Data
	vDataArg, _ := internal.WrapNumberPtr[C.int, int32](vData)
	vVecArg := new(C.ImVector_int)
	vVecArg.Size = C.int(v.Size)
	vVecArg.Capacity = C.int(v.Capacity)
	vVecArg.Data = vDataArg
	v.Pinner().Pin(vVecArg.Data)

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotColormapData_SetKeyCounts(selfArg, *vVecArg)
}

// ImPlotColormapData_GetKeyCounts returns value of ImPlotColormapData.KeyCounts
func (self *ColormapData) KeyCounts() vectors.Vector[int32] {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return vectors.NewVectorFromC(C.wrap_ImPlotColormapData_GetKeyCounts(internal.ReinterpretCast[*C.ImPlotColormapData](selfArg)).Size, C.wrap_ImPlotColormapData_GetKeyCounts(internal.ReinterpretCast[*C.ImPlotColormapData](selfArg)).Capacity, (*int32)(C.wrap_ImPlotColormapData_GetKeyCounts(internal.ReinterpretCast[*C.ImPlotColormapData](selfArg)).Data))
}

// ImPlotColormapData_SetKeyOffsets sets value of ImPlotColormapData.KeyOffsets
func (self ColormapData) SetKeyOffsets(v vectors.Vector[int32]) {
	vData := v.Data
	vDataArg, _ := internal.WrapNumberPtr[C.int, int32](vData)
	vVecArg := new(C.ImVector_int)
	vVecArg.Size = C.int(v.Size)
	vVecArg.Capacity = C.int(v.Capacity)
	vVecArg.Data = vDataArg
	v.Pinner().Pin(vVecArg.Data)

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotColormapData_SetKeyOffsets(selfArg, *vVecArg)
}

// ImPlotColormapData_GetKeyOffsets returns value of ImPlotColormapData.KeyOffsets
func (self *ColormapData) KeyOffsets() vectors.Vector[int32] {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return vectors.NewVectorFromC(C.wrap_ImPlotColormapData_GetKeyOffsets(internal.ReinterpretCast[*C.ImPlotColormapData](selfArg)).Size, C.wrap_ImPlotColormapData_GetKeyOffsets(internal.ReinterpretCast[*C.ImPlotColormapData](selfArg)).Capacity, (*int32)(C.wrap_ImPlotColormapData_GetKeyOffsets(internal.ReinterpretCast[*C.ImPlotColormapData](selfArg)).Data))
}

// ImPlotColormapData_SetTables sets value of ImPlotColormapData.Tables
func (self ColormapData) SetTables(v vectors.Vector[uint32]) {
	vData := v.Data
	vDataArg, _ := internal.WrapNumberPtr[C.ImU32, uint32](vData)
	vVecArg := new(C.ImVector_ImU32)
	vVecArg.Size = C.int(v.Size)
	vVecArg.Capacity = C.int(v.Capacity)
	vVecArg.Data = vDataArg
	v.Pinner().Pin(vVecArg.Data)

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotColormapData_SetTables(selfArg, *vVecArg)
}

// ImPlotColormapData_GetTables returns value of ImPlotColormapData.Tables
func (self *ColormapData) Tables() vectors.Vector[uint32] {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return vectors.NewVectorFromC(C.wrap_ImPlotColormapData_GetTables(internal.ReinterpretCast[*C.ImPlotColormapData](selfArg)).Size, C.wrap_ImPlotColormapData_GetTables(internal.ReinterpretCast[*C.ImPlotColormapData](selfArg)).Capacity, (*uint32)(C.wrap_ImPlotColormapData_GetTables(internal.ReinterpretCast[*C.ImPlotColormapData](selfArg)).Data))
}

// ImPlotColormapData_SetTableSizes sets value of ImPlotColormapData.TableSizes
func (self ColormapData) SetTableSizes(v vectors.Vector[int32]) {
	vData := v.Data
	vDataArg, _ := internal.WrapNumberPtr[C.int, int32](vData)
	vVecArg := new(C.ImVector_int)
	vVecArg.Size = C.int(v.Size)
	vVecArg.Capacity = C.int(v.Capacity)
	vVecArg.Data = vDataArg
	v.Pinner().Pin(vVecArg.Data)

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotColormapData_SetTableSizes(selfArg, *vVecArg)
}

// ImPlotColormapData_GetTableSizes returns value of ImPlotColormapData.TableSizes
func (self *ColormapData) TableSizes() vectors.Vector[int32] {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return vectors.NewVectorFromC(C.wrap_ImPlotColormapData_GetTableSizes(internal.ReinterpretCast[*C.ImPlotColormapData](selfArg)).Size, C.wrap_ImPlotColormapData_GetTableSizes(internal.ReinterpretCast[*C.ImPlotColormapData](selfArg)).Capacity, (*int32)(C.wrap_ImPlotColormapData_GetTableSizes(internal.ReinterpretCast[*C.ImPlotColormapData](selfArg)).Data))
}

// ImPlotColormapData_SetTableOffsets sets value of ImPlotColormapData.TableOffsets
func (self ColormapData) SetTableOffsets(v vectors.Vector[int32]) {
	vData := v.Data
	vDataArg, _ := internal.WrapNumberPtr[C.int, int32](vData)
	vVecArg := new(C.ImVector_int)
	vVecArg.Size = C.int(v.Size)
	vVecArg.Capacity = C.int(v.Capacity)
	vVecArg.Data = vDataArg
	v.Pinner().Pin(vVecArg.Data)

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotColormapData_SetTableOffsets(selfArg, *vVecArg)
}

// ImPlotColormapData_GetTableOffsets returns value of ImPlotColormapData.TableOffsets
func (self *ColormapData) TableOffsets() vectors.Vector[int32] {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return vectors.NewVectorFromC(C.wrap_ImPlotColormapData_GetTableOffsets(internal.ReinterpretCast[*C.ImPlotColormapData](selfArg)).Size, C.wrap_ImPlotColormapData_GetTableOffsets(internal.ReinterpretCast[*C.ImPlotColormapData](selfArg)).Capacity, (*int32)(C.wrap_ImPlotColormapData_GetTableOffsets(internal.ReinterpretCast[*C.ImPlotColormapData](selfArg)).Data))
}

// ImPlotColormapData_SetText sets value of ImPlotColormapData.Text
func (self ColormapData) SetText(v imgui.TextBuffer) {
	vArg, _ := v.C()

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotColormapData_SetText(selfArg, internal.ReinterpretCast[C.ImGuiTextBuffer](vArg))
}

// ImPlotColormapData_GetText returns value of ImPlotColormapData.Text
func (self *ColormapData) Text() imgui.TextBuffer {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return *imgui.NewTextBufferFromC(func() *C.ImGuiTextBuffer {
		result := C.wrap_ImPlotColormapData_GetText(internal.ReinterpretCast[*C.ImPlotColormapData](selfArg))
		return &result
	}())
}

// ImPlotColormapData_SetTextOffsets sets value of ImPlotColormapData.TextOffsets
func (self ColormapData) SetTextOffsets(v vectors.Vector[int32]) {
	vData := v.Data
	vDataArg, _ := internal.WrapNumberPtr[C.int, int32](vData)
	vVecArg := new(C.ImVector_int)
	vVecArg.Size = C.int(v.Size)
	vVecArg.Capacity = C.int(v.Capacity)
	vVecArg.Data = vDataArg
	v.Pinner().Pin(vVecArg.Data)

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotColormapData_SetTextOffsets(selfArg, *vVecArg)
}

// ImPlotColormapData_GetTextOffsets returns value of ImPlotColormapData.TextOffsets
func (self *ColormapData) TextOffsets() vectors.Vector[int32] {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return vectors.NewVectorFromC(C.wrap_ImPlotColormapData_GetTextOffsets(internal.ReinterpretCast[*C.ImPlotColormapData](selfArg)).Size, C.wrap_ImPlotColormapData_GetTextOffsets(internal.ReinterpretCast[*C.ImPlotColormapData](selfArg)).Capacity, (*int32)(C.wrap_ImPlotColormapData_GetTextOffsets(internal.ReinterpretCast[*C.ImPlotColormapData](selfArg)).Data))
}

// ImPlotColormapData_SetQuals sets value of ImPlotColormapData.Quals
func (self ColormapData) SetQuals(v vectors.Vector[bool]) {
	vData := v.Data
	vDataArg, _ := internal.WrapNumberPtr[C.bool, bool](vData)
	vVecArg := new(C.ImVector_bool)
	vVecArg.Size = C.int(v.Size)
	vVecArg.Capacity = C.int(v.Capacity)
	vVecArg.Data = vDataArg
	v.Pinner().Pin(vVecArg.Data)

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotColormapData_SetQuals(selfArg, *vVecArg)
}

// ImPlotColormapData_GetQuals returns value of ImPlotColormapData.Quals
func (self *ColormapData) Quals() vectors.Vector[bool] {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return vectors.NewVectorFromC(C.wrap_ImPlotColormapData_GetQuals(internal.ReinterpretCast[*C.ImPlotColormapData](selfArg)).Size, C.wrap_ImPlotColormapData_GetQuals(internal.ReinterpretCast[*C.ImPlotColormapData](selfArg)).Capacity, (*bool)(C.wrap_ImPlotColormapData_GetQuals(internal.ReinterpretCast[*C.ImPlotColormapData](selfArg)).Data))
}

// ImPlotColormapData_SetMap sets value of ImPlotColormapData.Map
func (self ColormapData) SetMap(v imgui.Storage) {
	vArg, _ := v.C()

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotColormapData_SetMap(selfArg, internal.ReinterpretCast[C.ImGuiStorage](vArg))
}

// ImPlotColormapData_GetMap returns value of ImPlotColormapData.Map
func (self *ColormapData) Map() imgui.Storage {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return *imgui.NewStorageFromC(func() *C.ImGuiStorage {
		result := C.wrap_ImPlotColormapData_GetMap(internal.ReinterpretCast[*C.ImPlotColormapData](selfArg))
		return &result
	}())
}

// ImPlotColormapData_SetCount sets value of ImPlotColormapData.Count
func (self ColormapData) SetCount(v int32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotColormapData_SetCount(selfArg, C.int(v))
}

// ImPlotColormapData_GetCount returns value of ImPlotColormapData.Count
func (self *ColormapData) Count() int32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return int32(C.wrap_ImPlotColormapData_GetCount(internal.ReinterpretCast[*C.ImPlotColormapData](selfArg)))
}

// ImPlotContext_SetCurrentPlot sets value of ImPlotContext.CurrentPlot
func (self Context) SetCurrentPlot(v *Plot) {
	vArg, _ := v.Handle()

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotContext_SetCurrentPlot(selfArg, internal.ReinterpretCast[*C.ImPlotPlot](vArg))
}

// ImPlotContext_GetCurrentPlot returns value of ImPlotContext.CurrentPlot
func (self *Context) CurrentPlot() *Plot {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return NewPlotFromC(C.wrap_ImPlotContext_GetCurrentPlot(internal.ReinterpretCast[*C.ImPlotContext](selfArg)))
}

// ImPlotContext_SetCurrentSubplot sets value of ImPlotContext.CurrentSubplot
func (self Context) SetCurrentSubplot(v *Subplot) {
	vArg, _ := v.Handle()

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotContext_SetCurrentSubplot(selfArg, internal.ReinterpretCast[*C.ImPlotSubplot](vArg))
}

// ImPlotContext_GetCurrentSubplot returns value of ImPlotContext.CurrentSubplot
func (self *Context) CurrentSubplot() *Subplot {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return NewSubplotFromC(C.wrap_ImPlotContext_GetCurrentSubplot(internal.ReinterpretCast[*C.ImPlotContext](selfArg)))
}

// ImPlotContext_SetCurrentItems sets value of ImPlotContext.CurrentItems
func (self Context) SetCurrentItems(v *ItemGroup) {
	vArg, _ := v.Handle()

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotContext_SetCurrentItems(selfArg, internal.ReinterpretCast[*C.ImPlotItemGroup](vArg))
}

// ImPlotContext_GetCurrentItems returns value of ImPlotContext.CurrentItems
func (self *Context) CurrentItems() *ItemGroup {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return NewItemGroupFromC(C.wrap_ImPlotContext_GetCurrentItems(internal.ReinterpretCast[*C.ImPlotContext](selfArg)))
}

// ImPlotContext_SetCurrentItem sets value of ImPlotContext.CurrentItem
func (self Context) SetCurrentItem(v *Item) {
	vArg, _ := v.Handle()

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotContext_SetCurrentItem(selfArg, internal.ReinterpretCast[*C.ImPlotItem](vArg))
}

// ImPlotContext_GetCurrentItem returns value of ImPlotContext.CurrentItem
func (self *Context) CurrentItem() *Item {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return NewItemFromC(C.wrap_ImPlotContext_GetCurrentItem(internal.ReinterpretCast[*C.ImPlotContext](selfArg)))
}

// ImPlotContext_SetPreviousItem sets value of ImPlotContext.PreviousItem
func (self Context) SetPreviousItem(v *Item) {
	vArg, _ := v.Handle()

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotContext_SetPreviousItem(selfArg, internal.ReinterpretCast[*C.ImPlotItem](vArg))
}

// ImPlotContext_GetPreviousItem returns value of ImPlotContext.PreviousItem
func (self *Context) PreviousItem() *Item {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return NewItemFromC(C.wrap_ImPlotContext_GetPreviousItem(internal.ReinterpretCast[*C.ImPlotContext](selfArg)))
}

// ImPlotContext_SetCTicker sets value of ImPlotContext.CTicker
func (self Context) SetCTicker(v Ticker) {
	vArg, _ := v.C()

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotContext_SetCTicker(selfArg, internal.ReinterpretCast[C.ImPlotTicker](vArg))
}

// ImPlotContext_GetCTicker returns value of ImPlotContext.CTicker
func (self *Context) CTicker() Ticker {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return *NewTickerFromC(func() *C.ImPlotTicker {
		result := C.wrap_ImPlotContext_GetCTicker(internal.ReinterpretCast[*C.ImPlotContext](selfArg))
		return &result
	}())
}

// ImPlotContext_SetAnnotations sets value of ImPlotContext.Annotations
func (self Context) SetAnnotations(v AnnotationCollection) {
	vArg, _ := v.C()

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotContext_SetAnnotations(selfArg, internal.ReinterpretCast[C.ImPlotAnnotationCollection](vArg))
}

// ImPlotContext_GetAnnotations returns value of ImPlotContext.Annotations
func (self *Context) Annotations() AnnotationCollection {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return *NewAnnotationCollectionFromC(func() *C.ImPlotAnnotationCollection {
		result := C.wrap_ImPlotContext_GetAnnotations(internal.ReinterpretCast[*C.ImPlotContext](selfArg))
		return &result
	}())
}

// ImPlotContext_SetTags sets value of ImPlotContext.Tags
func (self Context) SetTags(v TagCollection) {
	vArg, _ := v.C()

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotContext_SetTags(selfArg, internal.ReinterpretCast[C.ImPlotTagCollection](vArg))
}

// ImPlotContext_GetTags returns value of ImPlotContext.Tags
func (self *Context) Tags() TagCollection {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return *NewTagCollectionFromC(func() *C.ImPlotTagCollection {
		result := C.wrap_ImPlotContext_GetTags(internal.ReinterpretCast[*C.ImPlotContext](selfArg))
		return &result
	}())
}

// ImPlotContext_SetStyle sets value of ImPlotContext.Style
func (self Context) SetStyle(v Style) {
	vArg, _ := v.C()

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotContext_SetStyle(selfArg, internal.ReinterpretCast[C.ImPlotStyle](vArg))
}

// ImPlotContext_GetStyle returns value of ImPlotContext.Style
func (self *Context) Style() Style {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return *NewStyleFromC(func() *C.ImPlotStyle {
		result := C.wrap_ImPlotContext_GetStyle(internal.ReinterpretCast[*C.ImPlotContext](selfArg))
		return &result
	}())
}

// ImPlotContext_SetColorModifiers sets value of ImPlotContext.ColorModifiers
func (self Context) SetColorModifiers(v vectors.Vector[imgui.ColorMod]) {
	vData := v.Data
	vDataArg, _ := vData.Handle()
	vVecArg := new(C.ImVector_ImGuiColorMod)
	vVecArg.Size = C.int(v.Size)
	vVecArg.Capacity = C.int(v.Capacity)
	vVecArg.Data = internal.ReinterpretCast[*C.ImGuiColorMod](vDataArg)
	v.Pinner().Pin(vVecArg.Data)

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotContext_SetColorModifiers(selfArg, *vVecArg)
}

// ImPlotContext_GetColorModifiers returns value of ImPlotContext.ColorModifiers
func (self *Context) ColorModifiers() vectors.Vector[imgui.ColorMod] {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return vectors.NewVectorFromC(C.wrap_ImPlotContext_GetColorModifiers(internal.ReinterpretCast[*C.ImPlotContext](selfArg)).Size, C.wrap_ImPlotContext_GetColorModifiers(internal.ReinterpretCast[*C.ImPlotContext](selfArg)).Capacity, imgui.NewColorModFromC(C.wrap_ImPlotContext_GetColorModifiers(internal.ReinterpretCast[*C.ImPlotContext](selfArg)).Data))
}

// ImPlotContext_SetStyleModifiers sets value of ImPlotContext.StyleModifiers
func (self Context) SetStyleModifiers(v vectors.Vector[imgui.StyleMod]) {
	vData := v.Data
	vDataArg, _ := vData.Handle()
	vVecArg := new(C.ImVector_ImGuiStyleMod)
	vVecArg.Size = C.int(v.Size)
	vVecArg.Capacity = C.int(v.Capacity)
	vVecArg.Data = internal.ReinterpretCast[*C.ImGuiStyleMod](vDataArg)
	v.Pinner().Pin(vVecArg.Data)

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotContext_SetStyleModifiers(selfArg, *vVecArg)
}

// ImPlotContext_GetStyleModifiers returns value of ImPlotContext.StyleModifiers
func (self *Context) StyleModifiers() vectors.Vector[imgui.StyleMod] {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return vectors.NewVectorFromC(C.wrap_ImPlotContext_GetStyleModifiers(internal.ReinterpretCast[*C.ImPlotContext](selfArg)).Size, C.wrap_ImPlotContext_GetStyleModifiers(internal.ReinterpretCast[*C.ImPlotContext](selfArg)).Capacity, imgui.NewStyleModFromC(C.wrap_ImPlotContext_GetStyleModifiers(internal.ReinterpretCast[*C.ImPlotContext](selfArg)).Data))
}

// ImPlotContext_SetColormapData sets value of ImPlotContext.ColormapData
func (self Context) SetColormapData(v ColormapData) {
	vArg, _ := v.C()

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotContext_SetColormapData(selfArg, internal.ReinterpretCast[C.ImPlotColormapData](vArg))
}

// ImPlotContext_GetColormapData returns value of ImPlotContext.ColormapData
func (self *Context) ColormapData() ColormapData {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return *NewColormapDataFromC(func() *C.ImPlotColormapData {
		result := C.wrap_ImPlotContext_GetColormapData(internal.ReinterpretCast[*C.ImPlotContext](selfArg))
		return &result
	}())
}

// ImPlotContext_SetColormapModifiers sets value of ImPlotContext.ColormapModifiers
func (self Context) SetColormapModifiers(v vectors.Vector[Colormap]) {
	vData := v.Data

	vVecArg := new(C.ImVector_ImPlotColormap)
	vVecArg.Size = C.int(v.Size)
	vVecArg.Capacity = C.int(v.Capacity)
	vVecArg.Data = (*C.ImPlotColormap)(vData)
	v.Pinner().Pin(vVecArg.Data)

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotContext_SetColormapModifiers(selfArg, *vVecArg)
}

// ImPlotContext_GetColormapModifiers returns value of ImPlotContext.ColormapModifiers
func (self *Context) ColormapModifiers() vectors.Vector[Colormap] {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return vectors.NewVectorFromC(C.wrap_ImPlotContext_GetColormapModifiers(internal.ReinterpretCast[*C.ImPlotContext](selfArg)).Size, C.wrap_ImPlotContext_GetColormapModifiers(internal.ReinterpretCast[*C.ImPlotContext](selfArg)).Capacity, (*Colormap)(C.wrap_ImPlotContext_GetColormapModifiers(internal.ReinterpretCast[*C.ImPlotContext](selfArg)).Data))
}

// ImPlotContext_SetTm sets value of ImPlotContext.Tm
func (self Context) SetTm(v Tm) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotContext_SetTm(selfArg, internal.ReinterpretCast[C.struct_tm](v.ToC()))
}

// ImPlotContext_GetTm returns value of ImPlotContext.Tm
func (self *Context) Tm() Tm {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() Tm {
		out := C.wrap_ImPlotContext_GetTm(internal.ReinterpretCast[*C.ImPlotContext](selfArg))
		return *(&Tm{}).FromC(unsafe.Pointer(&out))
	}()
}

// ImPlotContext_SetTempDouble1 sets value of ImPlotContext.TempDouble1
func (self Context) SetTempDouble1(v vectors.Vector[float64]) {
	vData := v.Data
	vDataArg, _ := internal.WrapNumberPtr[C.double, float64](vData)
	vVecArg := new(C.ImVector_double)
	vVecArg.Size = C.int(v.Size)
	vVecArg.Capacity = C.int(v.Capacity)
	vVecArg.Data = vDataArg
	v.Pinner().Pin(vVecArg.Data)

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotContext_SetTempDouble1(selfArg, *vVecArg)
}

// ImPlotContext_GetTempDouble1 returns value of ImPlotContext.TempDouble1
func (self *Context) TempDouble1() vectors.Vector[float64] {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return vectors.NewVectorFromC(C.wrap_ImPlotContext_GetTempDouble1(internal.ReinterpretCast[*C.ImPlotContext](selfArg)).Size, C.wrap_ImPlotContext_GetTempDouble1(internal.ReinterpretCast[*C.ImPlotContext](selfArg)).Capacity, (*float64)(C.wrap_ImPlotContext_GetTempDouble1(internal.ReinterpretCast[*C.ImPlotContext](selfArg)).Data))
}

// ImPlotContext_SetTempDouble2 sets value of ImPlotContext.TempDouble2
func (self Context) SetTempDouble2(v vectors.Vector[float64]) {
	vData := v.Data
	vDataArg, _ := internal.WrapNumberPtr[C.double, float64](vData)
	vVecArg := new(C.ImVector_double)
	vVecArg.Size = C.int(v.Size)
	vVecArg.Capacity = C.int(v.Capacity)
	vVecArg.Data = vDataArg
	v.Pinner().Pin(vVecArg.Data)

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotContext_SetTempDouble2(selfArg, *vVecArg)
}

// ImPlotContext_GetTempDouble2 returns value of ImPlotContext.TempDouble2
func (self *Context) TempDouble2() vectors.Vector[float64] {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return vectors.NewVectorFromC(C.wrap_ImPlotContext_GetTempDouble2(internal.ReinterpretCast[*C.ImPlotContext](selfArg)).Size, C.wrap_ImPlotContext_GetTempDouble2(internal.ReinterpretCast[*C.ImPlotContext](selfArg)).Capacity, (*float64)(C.wrap_ImPlotContext_GetTempDouble2(internal.ReinterpretCast[*C.ImPlotContext](selfArg)).Data))
}

// ImPlotContext_SetTempInt1 sets value of ImPlotContext.TempInt1
func (self Context) SetTempInt1(v vectors.Vector[int32]) {
	vData := v.Data
	vDataArg, _ := internal.WrapNumberPtr[C.int, int32](vData)
	vVecArg := new(C.ImVector_int)
	vVecArg.Size = C.int(v.Size)
	vVecArg.Capacity = C.int(v.Capacity)
	vVecArg.Data = vDataArg
	v.Pinner().Pin(vVecArg.Data)

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotContext_SetTempInt1(selfArg, *vVecArg)
}

// ImPlotContext_GetTempInt1 returns value of ImPlotContext.TempInt1
func (self *Context) TempInt1() vectors.Vector[int32] {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return vectors.NewVectorFromC(C.wrap_ImPlotContext_GetTempInt1(internal.ReinterpretCast[*C.ImPlotContext](selfArg)).Size, C.wrap_ImPlotContext_GetTempInt1(internal.ReinterpretCast[*C.ImPlotContext](selfArg)).Capacity, (*int32)(C.wrap_ImPlotContext_GetTempInt1(internal.ReinterpretCast[*C.ImPlotContext](selfArg)).Data))
}

// ImPlotContext_SetDigitalPlotItemCnt sets value of ImPlotContext.DigitalPlotItemCnt
func (self Context) SetDigitalPlotItemCnt(v int32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotContext_SetDigitalPlotItemCnt(selfArg, C.int(v))
}

// ImPlotContext_GetDigitalPlotItemCnt returns value of ImPlotContext.DigitalPlotItemCnt
func (self *Context) DigitalPlotItemCnt() int32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return int32(C.wrap_ImPlotContext_GetDigitalPlotItemCnt(internal.ReinterpretCast[*C.ImPlotContext](selfArg)))
}

// ImPlotContext_SetDigitalPlotOffset sets value of ImPlotContext.DigitalPlotOffset
func (self Context) SetDigitalPlotOffset(v int32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotContext_SetDigitalPlotOffset(selfArg, C.int(v))
}

// ImPlotContext_GetDigitalPlotOffset returns value of ImPlotContext.DigitalPlotOffset
func (self *Context) DigitalPlotOffset() int32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return int32(C.wrap_ImPlotContext_GetDigitalPlotOffset(internal.ReinterpretCast[*C.ImPlotContext](selfArg)))
}

// ImPlotContext_SetNextPlotData sets value of ImPlotContext.NextPlotData
func (self Context) SetNextPlotData(v NextPlotData) {
	vArg, _ := v.C()

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotContext_SetNextPlotData(selfArg, internal.ReinterpretCast[C.ImPlotNextPlotData](vArg))
}

// ImPlotContext_GetNextPlotData returns value of ImPlotContext.NextPlotData
func (self *Context) NextPlotData() NextPlotData {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return *NewNextPlotDataFromC(func() *C.ImPlotNextPlotData {
		result := C.wrap_ImPlotContext_GetNextPlotData(internal.ReinterpretCast[*C.ImPlotContext](selfArg))
		return &result
	}())
}

// ImPlotContext_SetNextItemData sets value of ImPlotContext.NextItemData
func (self Context) SetNextItemData(v NextItemData) {
	vArg, _ := v.C()

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotContext_SetNextItemData(selfArg, internal.ReinterpretCast[C.ImPlotNextItemData](vArg))
}

// ImPlotContext_GetNextItemData returns value of ImPlotContext.NextItemData
func (self *Context) NextItemData() NextItemData {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return *NewNextItemDataFromC(func() *C.ImPlotNextItemData {
		result := C.wrap_ImPlotContext_GetNextItemData(internal.ReinterpretCast[*C.ImPlotContext](selfArg))
		return &result
	}())
}

// ImPlotContext_SetInputMap sets value of ImPlotContext.InputMap
func (self Context) SetInputMap(v InputMap) {
	vArg, _ := v.C()

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotContext_SetInputMap(selfArg, internal.ReinterpretCast[C.ImPlotInputMap](vArg))
}

// ImPlotContext_GetInputMap returns value of ImPlotContext.InputMap
func (self *Context) InputMap() InputMap {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return *NewInputMapFromC(func() *C.ImPlotInputMap {
		result := C.wrap_ImPlotContext_GetInputMap(internal.ReinterpretCast[*C.ImPlotContext](selfArg))
		return &result
	}())
}

// ImPlotContext_SetOpenContextThisFrame sets value of ImPlotContext.OpenContextThisFrame
func (self Context) SetOpenContextThisFrame(v bool) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotContext_SetOpenContextThisFrame(selfArg, C.bool(v))
}

// ImPlotContext_GetOpenContextThisFrame returns value of ImPlotContext.OpenContextThisFrame
func (self *Context) OpenContextThisFrame() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.wrap_ImPlotContext_GetOpenContextThisFrame(internal.ReinterpretCast[*C.ImPlotContext](selfArg)) == C.bool(true)
}

// ImPlotContext_SetMousePosStringBuilder sets value of ImPlotContext.MousePosStringBuilder
func (self Context) SetMousePosStringBuilder(v imgui.TextBuffer) {
	vArg, _ := v.C()

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotContext_SetMousePosStringBuilder(selfArg, internal.ReinterpretCast[C.ImGuiTextBuffer](vArg))
}

// ImPlotContext_GetMousePosStringBuilder returns value of ImPlotContext.MousePosStringBuilder
func (self *Context) MousePosStringBuilder() imgui.TextBuffer {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return *imgui.NewTextBufferFromC(func() *C.ImGuiTextBuffer {
		result := C.wrap_ImPlotContext_GetMousePosStringBuilder(internal.ReinterpretCast[*C.ImPlotContext](selfArg))
		return &result
	}())
}

// ImPlotContext_SetSortItems sets value of ImPlotContext.SortItems
func (self Context) SetSortItems(v *ItemGroup) {
	vArg, _ := v.Handle()

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotContext_SetSortItems(selfArg, internal.ReinterpretCast[*C.ImPlotItemGroup](vArg))
}

// ImPlotContext_GetSortItems returns value of ImPlotContext.SortItems
func (self *Context) SortItems() *ItemGroup {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return NewItemGroupFromC(C.wrap_ImPlotContext_GetSortItems(internal.ReinterpretCast[*C.ImPlotContext](selfArg)))
}

// ImPlotContext_SetCurrentAlignmentH sets value of ImPlotContext.CurrentAlignmentH
func (self Context) SetCurrentAlignmentH(v *AlignmentData) {
	vArg, _ := v.Handle()

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotContext_SetCurrentAlignmentH(selfArg, internal.ReinterpretCast[*C.ImPlotAlignmentData](vArg))
}

// ImPlotContext_GetCurrentAlignmentH returns value of ImPlotContext.CurrentAlignmentH
func (self *Context) CurrentAlignmentH() *AlignmentData {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return NewAlignmentDataFromC(C.wrap_ImPlotContext_GetCurrentAlignmentH(internal.ReinterpretCast[*C.ImPlotContext](selfArg)))
}

// ImPlotContext_SetCurrentAlignmentV sets value of ImPlotContext.CurrentAlignmentV
func (self Context) SetCurrentAlignmentV(v *AlignmentData) {
	vArg, _ := v.Handle()

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotContext_SetCurrentAlignmentV(selfArg, internal.ReinterpretCast[*C.ImPlotAlignmentData](vArg))
}

// ImPlotContext_GetCurrentAlignmentV returns value of ImPlotContext.CurrentAlignmentV
func (self *Context) CurrentAlignmentV() *AlignmentData {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return NewAlignmentDataFromC(C.wrap_ImPlotContext_GetCurrentAlignmentV(internal.ReinterpretCast[*C.ImPlotContext](selfArg)))
}

// ImPlotDateTimeSpec_SetDate sets value of ImPlotDateTimeSpec.Date
func (self DateTimeSpec) SetDate(v DateFmt) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotDateTimeSpec_SetDate(selfArg, C.ImPlotDateFmt(v))
}

// ImPlotDateTimeSpec_GetDate returns value of ImPlotDateTimeSpec.Date
func (self *DateTimeSpec) Date() DateFmt {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return DateFmt(C.wrap_ImPlotDateTimeSpec_GetDate(internal.ReinterpretCast[*C.ImPlotDateTimeSpec](selfArg)))
}

// ImPlotDateTimeSpec_SetTime sets value of ImPlotDateTimeSpec.Time
func (self DateTimeSpec) SetTime(v TimeFmt) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotDateTimeSpec_SetTime(selfArg, C.ImPlotTimeFmt(v))
}

// ImPlotDateTimeSpec_GetTime returns value of ImPlotDateTimeSpec.Time
func (self *DateTimeSpec) Time() TimeFmt {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return TimeFmt(C.wrap_ImPlotDateTimeSpec_GetTime(internal.ReinterpretCast[*C.ImPlotDateTimeSpec](selfArg)))
}

// ImPlotDateTimeSpec_SetUseISO8601 sets value of ImPlotDateTimeSpec.UseISO8601
func (self DateTimeSpec) SetUseISO8601(v bool) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotDateTimeSpec_SetUseISO8601(selfArg, C.bool(v))
}

// ImPlotDateTimeSpec_GetUseISO8601 returns value of ImPlotDateTimeSpec.UseISO8601
func (self *DateTimeSpec) UseISO8601() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.wrap_ImPlotDateTimeSpec_GetUseISO8601(internal.ReinterpretCast[*C.ImPlotDateTimeSpec](selfArg)) == C.bool(true)
}

// ImPlotDateTimeSpec_SetUse24HourClock sets value of ImPlotDateTimeSpec.Use24HourClock
func (self DateTimeSpec) SetUse24HourClock(v bool) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotDateTimeSpec_SetUse24HourClock(selfArg, C.bool(v))
}

// ImPlotDateTimeSpec_GetUse24HourClock returns value of ImPlotDateTimeSpec.Use24HourClock
func (self *DateTimeSpec) Use24HourClock() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.wrap_ImPlotDateTimeSpec_GetUse24HourClock(internal.ReinterpretCast[*C.ImPlotDateTimeSpec](selfArg)) == C.bool(true)
}

// ImPlotInputMap_SetPan sets value of ImPlotInputMap.Pan
func (self InputMap) SetPan(v imgui.MouseButton) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotInputMap_SetPan(selfArg, C.ImGuiMouseButton(v))
}

// ImPlotInputMap_GetPan returns value of ImPlotInputMap.Pan
func (self *InputMap) Pan() imgui.MouseButton {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return imgui.MouseButton(C.wrap_ImPlotInputMap_GetPan(internal.ReinterpretCast[*C.ImPlotInputMap](selfArg)))
}

// ImPlotInputMap_SetPanMod sets value of ImPlotInputMap.PanMod
func (self InputMap) SetPanMod(v int32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotInputMap_SetPanMod(selfArg, C.int(v))
}

// ImPlotInputMap_GetPanMod returns value of ImPlotInputMap.PanMod
func (self *InputMap) PanMod() int32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return int32(C.wrap_ImPlotInputMap_GetPanMod(internal.ReinterpretCast[*C.ImPlotInputMap](selfArg)))
}

// ImPlotInputMap_SetFit sets value of ImPlotInputMap.Fit
func (self InputMap) SetFit(v imgui.MouseButton) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotInputMap_SetFit(selfArg, C.ImGuiMouseButton(v))
}

// ImPlotInputMap_GetFit returns value of ImPlotInputMap.Fit
func (self *InputMap) Fit() imgui.MouseButton {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return imgui.MouseButton(C.wrap_ImPlotInputMap_GetFit(internal.ReinterpretCast[*C.ImPlotInputMap](selfArg)))
}

// ImPlotInputMap_SetSelect sets value of ImPlotInputMap.Select
func (self InputMap) SetSelect(v imgui.MouseButton) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotInputMap_SetSelect(selfArg, C.ImGuiMouseButton(v))
}

// ImPlotInputMap_GetSelect returns value of ImPlotInputMap.Select
func (self *InputMap) Select() imgui.MouseButton {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return imgui.MouseButton(C.wrap_ImPlotInputMap_GetSelect(internal.ReinterpretCast[*C.ImPlotInputMap](selfArg)))
}

// ImPlotInputMap_SetSelectCancel sets value of ImPlotInputMap.SelectCancel
func (self InputMap) SetSelectCancel(v imgui.MouseButton) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotInputMap_SetSelectCancel(selfArg, C.ImGuiMouseButton(v))
}

// ImPlotInputMap_GetSelectCancel returns value of ImPlotInputMap.SelectCancel
func (self *InputMap) SelectCancel() imgui.MouseButton {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return imgui.MouseButton(C.wrap_ImPlotInputMap_GetSelectCancel(internal.ReinterpretCast[*C.ImPlotInputMap](selfArg)))
}

// ImPlotInputMap_SetSelectMod sets value of ImPlotInputMap.SelectMod
func (self InputMap) SetSelectMod(v int32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotInputMap_SetSelectMod(selfArg, C.int(v))
}

// ImPlotInputMap_GetSelectMod returns value of ImPlotInputMap.SelectMod
func (self *InputMap) SelectMod() int32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return int32(C.wrap_ImPlotInputMap_GetSelectMod(internal.ReinterpretCast[*C.ImPlotInputMap](selfArg)))
}

// ImPlotInputMap_SetSelectHorzMod sets value of ImPlotInputMap.SelectHorzMod
func (self InputMap) SetSelectHorzMod(v int32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotInputMap_SetSelectHorzMod(selfArg, C.int(v))
}

// ImPlotInputMap_GetSelectHorzMod returns value of ImPlotInputMap.SelectHorzMod
func (self *InputMap) SelectHorzMod() int32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return int32(C.wrap_ImPlotInputMap_GetSelectHorzMod(internal.ReinterpretCast[*C.ImPlotInputMap](selfArg)))
}

// ImPlotInputMap_SetSelectVertMod sets value of ImPlotInputMap.SelectVertMod
func (self InputMap) SetSelectVertMod(v int32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotInputMap_SetSelectVertMod(selfArg, C.int(v))
}

// ImPlotInputMap_GetSelectVertMod returns value of ImPlotInputMap.SelectVertMod
func (self *InputMap) SelectVertMod() int32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return int32(C.wrap_ImPlotInputMap_GetSelectVertMod(internal.ReinterpretCast[*C.ImPlotInputMap](selfArg)))
}

// ImPlotInputMap_SetMenu sets value of ImPlotInputMap.Menu
func (self InputMap) SetMenu(v imgui.MouseButton) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotInputMap_SetMenu(selfArg, C.ImGuiMouseButton(v))
}

// ImPlotInputMap_GetMenu returns value of ImPlotInputMap.Menu
func (self *InputMap) Menu() imgui.MouseButton {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return imgui.MouseButton(C.wrap_ImPlotInputMap_GetMenu(internal.ReinterpretCast[*C.ImPlotInputMap](selfArg)))
}

// ImPlotInputMap_SetOverrideMod sets value of ImPlotInputMap.OverrideMod
func (self InputMap) SetOverrideMod(v int32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotInputMap_SetOverrideMod(selfArg, C.int(v))
}

// ImPlotInputMap_GetOverrideMod returns value of ImPlotInputMap.OverrideMod
func (self *InputMap) OverrideMod() int32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return int32(C.wrap_ImPlotInputMap_GetOverrideMod(internal.ReinterpretCast[*C.ImPlotInputMap](selfArg)))
}

// ImPlotInputMap_SetZoomMod sets value of ImPlotInputMap.ZoomMod
func (self InputMap) SetZoomMod(v int32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotInputMap_SetZoomMod(selfArg, C.int(v))
}

// ImPlotInputMap_GetZoomMod returns value of ImPlotInputMap.ZoomMod
func (self *InputMap) ZoomMod() int32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return int32(C.wrap_ImPlotInputMap_GetZoomMod(internal.ReinterpretCast[*C.ImPlotInputMap](selfArg)))
}

// ImPlotInputMap_SetZoomRate sets value of ImPlotInputMap.ZoomRate
func (self InputMap) SetZoomRate(v float32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotInputMap_SetZoomRate(selfArg, C.float(v))
}

// ImPlotInputMap_GetZoomRate returns value of ImPlotInputMap.ZoomRate
func (self *InputMap) ZoomRate() float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_ImPlotInputMap_GetZoomRate(internal.ReinterpretCast[*C.ImPlotInputMap](selfArg)))
}

// ImPlotItem_SetID sets value of ImPlotItem.ID
func (self Item) SetID(v imgui.ID) {
	vArg, _ := v.C()

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotItem_SetID(selfArg, internal.ReinterpretCast[C.ImGuiID](vArg))
}

// ImPlotItem_GetID returns value of ImPlotItem.ID
func (self *Item) ID() imgui.ID {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return *imgui.NewIDFromC(func() *C.ImGuiID {
		result := C.wrap_ImPlotItem_GetID(internal.ReinterpretCast[*C.ImPlotItem](selfArg))
		return &result
	}())
}

// ImPlotItem_SetColor sets value of ImPlotItem.Color
func (self Item) SetColor(v uint32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotItem_SetColor(selfArg, C.ImU32(v))
}

// ImPlotItem_GetColor returns value of ImPlotItem.Color
func (self *Item) Color() uint32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return uint32(C.wrap_ImPlotItem_GetColor(internal.ReinterpretCast[*C.ImPlotItem](selfArg)))
}

// ImPlotItem_SetLegendHoverRect sets value of ImPlotItem.LegendHoverRect
func (self Item) SetLegendHoverRect(v imgui.Rect) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotItem_SetLegendHoverRect(selfArg, internal.ReinterpretCast[C.ImRect](v.ToC()))
}

// ImPlotItem_GetLegendHoverRect returns value of ImPlotItem.LegendHoverRect
func (self *Item) LegendHoverRect() imgui.Rect {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() imgui.Rect {
		out := C.wrap_ImPlotItem_GetLegendHoverRect(internal.ReinterpretCast[*C.ImPlotItem](selfArg))
		return *(&imgui.Rect{}).FromC(unsafe.Pointer(&out))
	}()
}

// ImPlotItem_SetNameOffset sets value of ImPlotItem.NameOffset
func (self Item) SetNameOffset(v int32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotItem_SetNameOffset(selfArg, C.int(v))
}

// ImPlotItem_GetNameOffset returns value of ImPlotItem.NameOffset
func (self *Item) NameOffset() int32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return int32(C.wrap_ImPlotItem_GetNameOffset(internal.ReinterpretCast[*C.ImPlotItem](selfArg)))
}

// ImPlotItem_SetShow sets value of ImPlotItem.Show
func (self Item) SetShow(v bool) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotItem_SetShow(selfArg, C.bool(v))
}

// ImPlotItem_GetShow returns value of ImPlotItem.Show
func (self *Item) Show() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.wrap_ImPlotItem_GetShow(internal.ReinterpretCast[*C.ImPlotItem](selfArg)) == C.bool(true)
}

// ImPlotItem_SetLegendHovered sets value of ImPlotItem.LegendHovered
func (self Item) SetLegendHovered(v bool) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotItem_SetLegendHovered(selfArg, C.bool(v))
}

// ImPlotItem_GetLegendHovered returns value of ImPlotItem.LegendHovered
func (self *Item) LegendHovered() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.wrap_ImPlotItem_GetLegendHovered(internal.ReinterpretCast[*C.ImPlotItem](selfArg)) == C.bool(true)
}

// ImPlotItem_SetSeenThisFrame sets value of ImPlotItem.SeenThisFrame
func (self Item) SetSeenThisFrame(v bool) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotItem_SetSeenThisFrame(selfArg, C.bool(v))
}

// ImPlotItem_GetSeenThisFrame returns value of ImPlotItem.SeenThisFrame
func (self *Item) SeenThisFrame() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.wrap_ImPlotItem_GetSeenThisFrame(internal.ReinterpretCast[*C.ImPlotItem](selfArg)) == C.bool(true)
}

// ImPlotItemGroup_SetID sets value of ImPlotItemGroup.ID
func (self ItemGroup) SetID(v imgui.ID) {
	vArg, _ := v.C()

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotItemGroup_SetID(selfArg, internal.ReinterpretCast[C.ImGuiID](vArg))
}

// ImPlotItemGroup_GetID returns value of ImPlotItemGroup.ID
func (self *ItemGroup) ID() imgui.ID {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return *imgui.NewIDFromC(func() *C.ImGuiID {
		result := C.wrap_ImPlotItemGroup_GetID(internal.ReinterpretCast[*C.ImPlotItemGroup](selfArg))
		return &result
	}())
}

// ImPlotItemGroup_SetLegend sets value of ImPlotItemGroup.Legend
func (self ItemGroup) SetLegend(v Legend) {
	vArg, _ := v.C()

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotItemGroup_SetLegend(selfArg, internal.ReinterpretCast[C.ImPlotLegend](vArg))
}

// ImPlotItemGroup_GetLegend returns value of ImPlotItemGroup.Legend
func (self *ItemGroup) Legend() Legend {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return *NewLegendFromC(func() *C.ImPlotLegend {
		result := C.wrap_ImPlotItemGroup_GetLegend(internal.ReinterpretCast[*C.ImPlotItemGroup](selfArg))
		return &result
	}())
}

// ImPlotItemGroup_SetColormapIdx sets value of ImPlotItemGroup.ColormapIdx
func (self ItemGroup) SetColormapIdx(v int32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotItemGroup_SetColormapIdx(selfArg, C.int(v))
}

// ImPlotItemGroup_GetColormapIdx returns value of ImPlotItemGroup.ColormapIdx
func (self *ItemGroup) ColormapIdx() int32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return int32(C.wrap_ImPlotItemGroup_GetColormapIdx(internal.ReinterpretCast[*C.ImPlotItemGroup](selfArg)))
}

// ImPlotLegend_SetFlags sets value of ImPlotLegend.Flags
func (self Legend) SetFlags(v LegendFlags) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotLegend_SetFlags(selfArg, C.ImPlotLegendFlags(v))
}

// ImPlotLegend_GetFlags returns value of ImPlotLegend.Flags
func (self *Legend) Flags() LegendFlags {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return LegendFlags(C.wrap_ImPlotLegend_GetFlags(internal.ReinterpretCast[*C.ImPlotLegend](selfArg)))
}

// ImPlotLegend_SetPreviousFlags sets value of ImPlotLegend.PreviousFlags
func (self Legend) SetPreviousFlags(v LegendFlags) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotLegend_SetPreviousFlags(selfArg, C.ImPlotLegendFlags(v))
}

// ImPlotLegend_GetPreviousFlags returns value of ImPlotLegend.PreviousFlags
func (self *Legend) PreviousFlags() LegendFlags {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return LegendFlags(C.wrap_ImPlotLegend_GetPreviousFlags(internal.ReinterpretCast[*C.ImPlotLegend](selfArg)))
}

// ImPlotLegend_SetLocation sets value of ImPlotLegend.Location
func (self Legend) SetLocation(v Location) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotLegend_SetLocation(selfArg, C.ImPlotLocation(v))
}

// ImPlotLegend_GetLocation returns value of ImPlotLegend.Location
func (self *Legend) Location() Location {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return Location(C.wrap_ImPlotLegend_GetLocation(internal.ReinterpretCast[*C.ImPlotLegend](selfArg)))
}

// ImPlotLegend_SetPreviousLocation sets value of ImPlotLegend.PreviousLocation
func (self Legend) SetPreviousLocation(v Location) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotLegend_SetPreviousLocation(selfArg, C.ImPlotLocation(v))
}

// ImPlotLegend_GetPreviousLocation returns value of ImPlotLegend.PreviousLocation
func (self *Legend) PreviousLocation() Location {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return Location(C.wrap_ImPlotLegend_GetPreviousLocation(internal.ReinterpretCast[*C.ImPlotLegend](selfArg)))
}

// ImPlotLegend_SetScroll sets value of ImPlotLegend.Scroll
func (self Legend) SetScroll(v imgui.Vec2) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotLegend_SetScroll(selfArg, internal.ReinterpretCast[C.ImVec2](v.ToC()))
}

// ImPlotLegend_GetScroll returns value of ImPlotLegend.Scroll
func (self *Legend) Scroll() imgui.Vec2 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() imgui.Vec2 {
		out := C.wrap_ImPlotLegend_GetScroll(internal.ReinterpretCast[*C.ImPlotLegend](selfArg))
		return *(&imgui.Vec2{}).FromC(unsafe.Pointer(&out))
	}()
}

// ImPlotLegend_SetIndices sets value of ImPlotLegend.Indices
func (self Legend) SetIndices(v vectors.Vector[int32]) {
	vData := v.Data
	vDataArg, _ := internal.WrapNumberPtr[C.int, int32](vData)
	vVecArg := new(C.ImVector_int)
	vVecArg.Size = C.int(v.Size)
	vVecArg.Capacity = C.int(v.Capacity)
	vVecArg.Data = vDataArg
	v.Pinner().Pin(vVecArg.Data)

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotLegend_SetIndices(selfArg, *vVecArg)
}

// ImPlotLegend_GetIndices returns value of ImPlotLegend.Indices
func (self *Legend) Indices() vectors.Vector[int32] {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return vectors.NewVectorFromC(C.wrap_ImPlotLegend_GetIndices(internal.ReinterpretCast[*C.ImPlotLegend](selfArg)).Size, C.wrap_ImPlotLegend_GetIndices(internal.ReinterpretCast[*C.ImPlotLegend](selfArg)).Capacity, (*int32)(C.wrap_ImPlotLegend_GetIndices(internal.ReinterpretCast[*C.ImPlotLegend](selfArg)).Data))
}

// ImPlotLegend_SetLabels sets value of ImPlotLegend.Labels
func (self Legend) SetLabels(v imgui.TextBuffer) {
	vArg, _ := v.C()

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotLegend_SetLabels(selfArg, internal.ReinterpretCast[C.ImGuiTextBuffer](vArg))
}

// ImPlotLegend_GetLabels returns value of ImPlotLegend.Labels
func (self *Legend) Labels() imgui.TextBuffer {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return *imgui.NewTextBufferFromC(func() *C.ImGuiTextBuffer {
		result := C.wrap_ImPlotLegend_GetLabels(internal.ReinterpretCast[*C.ImPlotLegend](selfArg))
		return &result
	}())
}

// ImPlotLegend_SetRect sets value of ImPlotLegend.Rect
func (self Legend) SetRect(v imgui.Rect) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotLegend_SetRect(selfArg, internal.ReinterpretCast[C.ImRect](v.ToC()))
}

// ImPlotLegend_GetRect returns value of ImPlotLegend.Rect
func (self *Legend) Rect() imgui.Rect {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() imgui.Rect {
		out := C.wrap_ImPlotLegend_GetRect(internal.ReinterpretCast[*C.ImPlotLegend](selfArg))
		return *(&imgui.Rect{}).FromC(unsafe.Pointer(&out))
	}()
}

// ImPlotLegend_SetRectClamped sets value of ImPlotLegend.RectClamped
func (self Legend) SetRectClamped(v imgui.Rect) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotLegend_SetRectClamped(selfArg, internal.ReinterpretCast[C.ImRect](v.ToC()))
}

// ImPlotLegend_GetRectClamped returns value of ImPlotLegend.RectClamped
func (self *Legend) RectClamped() imgui.Rect {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() imgui.Rect {
		out := C.wrap_ImPlotLegend_GetRectClamped(internal.ReinterpretCast[*C.ImPlotLegend](selfArg))
		return *(&imgui.Rect{}).FromC(unsafe.Pointer(&out))
	}()
}

// ImPlotLegend_SetHovered sets value of ImPlotLegend.Hovered
func (self Legend) SetHovered(v bool) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotLegend_SetHovered(selfArg, C.bool(v))
}

// ImPlotLegend_GetHovered returns value of ImPlotLegend.Hovered
func (self *Legend) Hovered() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.wrap_ImPlotLegend_GetHovered(internal.ReinterpretCast[*C.ImPlotLegend](selfArg)) == C.bool(true)
}

// ImPlotLegend_SetHeld sets value of ImPlotLegend.Held
func (self Legend) SetHeld(v bool) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotLegend_SetHeld(selfArg, C.bool(v))
}

// ImPlotLegend_GetHeld returns value of ImPlotLegend.Held
func (self *Legend) Held() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.wrap_ImPlotLegend_GetHeld(internal.ReinterpretCast[*C.ImPlotLegend](selfArg)) == C.bool(true)
}

// ImPlotLegend_SetCanGoInside sets value of ImPlotLegend.CanGoInside
func (self Legend) SetCanGoInside(v bool) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotLegend_SetCanGoInside(selfArg, C.bool(v))
}

// ImPlotLegend_GetCanGoInside returns value of ImPlotLegend.CanGoInside
func (self *Legend) CanGoInside() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.wrap_ImPlotLegend_GetCanGoInside(internal.ReinterpretCast[*C.ImPlotLegend](selfArg)) == C.bool(true)
}

// ImPlotNextItemData_SetColors sets value of ImPlotNextItemData.Colors[5]
func (self NextItemData) SetColors(v *[5]imgui.Vec4) {
	vArg := make([]C.ImVec4, len(v))
	for i, vV := range v {
		vArg[i] = internal.ReinterpretCast[C.ImVec4](vV.ToC())
	}

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotNextItemData_SetColors(selfArg, (*C.ImVec4)(&vArg[0]))

	for i, vV := range vArg {
		(*v)[i] = func() imgui.Vec4 { out := vV; return *(&imgui.Vec4{}).FromC(unsafe.Pointer(&out)) }()
	}
}

// ImPlotNextItemData_GetColors returns value of ImPlotNextItemData.Colors[5]
func (self *NextItemData) Colors() [5]imgui.Vec4 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() [5]imgui.Vec4 {
		result := [5]imgui.Vec4{}
		resultMirr := C.wrap_ImPlotNextItemData_GetColors(internal.ReinterpretCast[*C.ImPlotNextItemData](selfArg))
		for i := range result {
			result[i] = func() imgui.Vec4 {
				out := C.cimplot_ImVec4_GetAtIdx(resultMirr, C.int(i))
				return *(&imgui.Vec4{}).FromC(unsafe.Pointer(&out))
			}()
		}

		return result
	}()
}

// ImPlotNextItemData_SetLineWeight sets value of ImPlotNextItemData.LineWeight
func (self NextItemData) SetLineWeight(v float32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotNextItemData_SetLineWeight(selfArg, C.float(v))
}

// ImPlotNextItemData_GetLineWeight returns value of ImPlotNextItemData.LineWeight
func (self *NextItemData) LineWeight() float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_ImPlotNextItemData_GetLineWeight(internal.ReinterpretCast[*C.ImPlotNextItemData](selfArg)))
}

// ImPlotNextItemData_SetMarker sets value of ImPlotNextItemData.Marker
func (self NextItemData) SetMarker(v Marker) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotNextItemData_SetMarker(selfArg, C.ImPlotMarker(v))
}

// ImPlotNextItemData_GetMarker returns value of ImPlotNextItemData.Marker
func (self *NextItemData) Marker() Marker {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return Marker(C.wrap_ImPlotNextItemData_GetMarker(internal.ReinterpretCast[*C.ImPlotNextItemData](selfArg)))
}

// ImPlotNextItemData_SetMarkerSize sets value of ImPlotNextItemData.MarkerSize
func (self NextItemData) SetMarkerSize(v float32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotNextItemData_SetMarkerSize(selfArg, C.float(v))
}

// ImPlotNextItemData_GetMarkerSize returns value of ImPlotNextItemData.MarkerSize
func (self *NextItemData) MarkerSize() float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_ImPlotNextItemData_GetMarkerSize(internal.ReinterpretCast[*C.ImPlotNextItemData](selfArg)))
}

// ImPlotNextItemData_SetMarkerWeight sets value of ImPlotNextItemData.MarkerWeight
func (self NextItemData) SetMarkerWeight(v float32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotNextItemData_SetMarkerWeight(selfArg, C.float(v))
}

// ImPlotNextItemData_GetMarkerWeight returns value of ImPlotNextItemData.MarkerWeight
func (self *NextItemData) MarkerWeight() float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_ImPlotNextItemData_GetMarkerWeight(internal.ReinterpretCast[*C.ImPlotNextItemData](selfArg)))
}

// ImPlotNextItemData_SetFillAlpha sets value of ImPlotNextItemData.FillAlpha
func (self NextItemData) SetFillAlpha(v float32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotNextItemData_SetFillAlpha(selfArg, C.float(v))
}

// ImPlotNextItemData_GetFillAlpha returns value of ImPlotNextItemData.FillAlpha
func (self *NextItemData) FillAlpha() float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_ImPlotNextItemData_GetFillAlpha(internal.ReinterpretCast[*C.ImPlotNextItemData](selfArg)))
}

// ImPlotNextItemData_SetErrorBarSize sets value of ImPlotNextItemData.ErrorBarSize
func (self NextItemData) SetErrorBarSize(v float32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotNextItemData_SetErrorBarSize(selfArg, C.float(v))
}

// ImPlotNextItemData_GetErrorBarSize returns value of ImPlotNextItemData.ErrorBarSize
func (self *NextItemData) ErrorBarSize() float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_ImPlotNextItemData_GetErrorBarSize(internal.ReinterpretCast[*C.ImPlotNextItemData](selfArg)))
}

// ImPlotNextItemData_SetErrorBarWeight sets value of ImPlotNextItemData.ErrorBarWeight
func (self NextItemData) SetErrorBarWeight(v float32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotNextItemData_SetErrorBarWeight(selfArg, C.float(v))
}

// ImPlotNextItemData_GetErrorBarWeight returns value of ImPlotNextItemData.ErrorBarWeight
func (self *NextItemData) ErrorBarWeight() float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_ImPlotNextItemData_GetErrorBarWeight(internal.ReinterpretCast[*C.ImPlotNextItemData](selfArg)))
}

// ImPlotNextItemData_SetDigitalBitHeight sets value of ImPlotNextItemData.DigitalBitHeight
func (self NextItemData) SetDigitalBitHeight(v float32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotNextItemData_SetDigitalBitHeight(selfArg, C.float(v))
}

// ImPlotNextItemData_GetDigitalBitHeight returns value of ImPlotNextItemData.DigitalBitHeight
func (self *NextItemData) DigitalBitHeight() float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_ImPlotNextItemData_GetDigitalBitHeight(internal.ReinterpretCast[*C.ImPlotNextItemData](selfArg)))
}

// ImPlotNextItemData_SetDigitalBitGap sets value of ImPlotNextItemData.DigitalBitGap
func (self NextItemData) SetDigitalBitGap(v float32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotNextItemData_SetDigitalBitGap(selfArg, C.float(v))
}

// ImPlotNextItemData_GetDigitalBitGap returns value of ImPlotNextItemData.DigitalBitGap
func (self *NextItemData) DigitalBitGap() float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_ImPlotNextItemData_GetDigitalBitGap(internal.ReinterpretCast[*C.ImPlotNextItemData](selfArg)))
}

// ImPlotNextItemData_SetRenderLine sets value of ImPlotNextItemData.RenderLine
func (self NextItemData) SetRenderLine(v bool) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotNextItemData_SetRenderLine(selfArg, C.bool(v))
}

// ImPlotNextItemData_GetRenderLine returns value of ImPlotNextItemData.RenderLine
func (self *NextItemData) RenderLine() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.wrap_ImPlotNextItemData_GetRenderLine(internal.ReinterpretCast[*C.ImPlotNextItemData](selfArg)) == C.bool(true)
}

// ImPlotNextItemData_SetRenderFill sets value of ImPlotNextItemData.RenderFill
func (self NextItemData) SetRenderFill(v bool) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotNextItemData_SetRenderFill(selfArg, C.bool(v))
}

// ImPlotNextItemData_GetRenderFill returns value of ImPlotNextItemData.RenderFill
func (self *NextItemData) RenderFill() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.wrap_ImPlotNextItemData_GetRenderFill(internal.ReinterpretCast[*C.ImPlotNextItemData](selfArg)) == C.bool(true)
}

// ImPlotNextItemData_SetRenderMarkerLine sets value of ImPlotNextItemData.RenderMarkerLine
func (self NextItemData) SetRenderMarkerLine(v bool) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotNextItemData_SetRenderMarkerLine(selfArg, C.bool(v))
}

// ImPlotNextItemData_GetRenderMarkerLine returns value of ImPlotNextItemData.RenderMarkerLine
func (self *NextItemData) RenderMarkerLine() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.wrap_ImPlotNextItemData_GetRenderMarkerLine(internal.ReinterpretCast[*C.ImPlotNextItemData](selfArg)) == C.bool(true)
}

// ImPlotNextItemData_SetRenderMarkerFill sets value of ImPlotNextItemData.RenderMarkerFill
func (self NextItemData) SetRenderMarkerFill(v bool) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotNextItemData_SetRenderMarkerFill(selfArg, C.bool(v))
}

// ImPlotNextItemData_GetRenderMarkerFill returns value of ImPlotNextItemData.RenderMarkerFill
func (self *NextItemData) RenderMarkerFill() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.wrap_ImPlotNextItemData_GetRenderMarkerFill(internal.ReinterpretCast[*C.ImPlotNextItemData](selfArg)) == C.bool(true)
}

// ImPlotNextItemData_SetHasHidden sets value of ImPlotNextItemData.HasHidden
func (self NextItemData) SetHasHidden(v bool) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotNextItemData_SetHasHidden(selfArg, C.bool(v))
}

// ImPlotNextItemData_GetHasHidden returns value of ImPlotNextItemData.HasHidden
func (self *NextItemData) HasHidden() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.wrap_ImPlotNextItemData_GetHasHidden(internal.ReinterpretCast[*C.ImPlotNextItemData](selfArg)) == C.bool(true)
}

// ImPlotNextItemData_SetHidden sets value of ImPlotNextItemData.Hidden
func (self NextItemData) SetHidden(v bool) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotNextItemData_SetHidden(selfArg, C.bool(v))
}

// ImPlotNextItemData_GetHidden returns value of ImPlotNextItemData.Hidden
func (self *NextItemData) Hidden() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.wrap_ImPlotNextItemData_GetHidden(internal.ReinterpretCast[*C.ImPlotNextItemData](selfArg)) == C.bool(true)
}

// ImPlotNextItemData_SetHiddenCond sets value of ImPlotNextItemData.HiddenCond
func (self NextItemData) SetHiddenCond(v Cond) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotNextItemData_SetHiddenCond(selfArg, C.ImPlotCond(v))
}

// ImPlotNextItemData_GetHiddenCond returns value of ImPlotNextItemData.HiddenCond
func (self *NextItemData) HiddenCond() Cond {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return Cond(C.wrap_ImPlotNextItemData_GetHiddenCond(internal.ReinterpretCast[*C.ImPlotNextItemData](selfArg)))
}

// ImPlotNextPlotData_SetRangeCond sets value of ImPlotNextPlotData.RangeCond[ImAxis_COUNT]
func (self NextPlotData) SetRangeCond(v *[6]Cond) {
	vArg := make([]C.ImPlotCond, len(v))
	for i, vV := range v {
		vArg[i] = C.ImPlotCond(vV)
	}

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotNextPlotData_SetRangeCond(selfArg, (*C.ImPlotCond)(&vArg[0]))

	for i, vV := range vArg {
		(*v)[i] = Cond(vV)
	}
}

// ImPlotNextPlotData_GetRangeCond returns value of ImPlotNextPlotData.RangeCond[ImAxis_COUNT]
func (self *NextPlotData) RangeCond() [6]Cond {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() [6]Cond {
		result := [6]Cond{}
		resultMirr := C.wrap_ImPlotNextPlotData_GetRangeCond(internal.ReinterpretCast[*C.ImPlotNextPlotData](selfArg))
		for i := range result {
			result[i] = Cond(C.cimplot_ImPlotCond_GetAtIdx(resultMirr, C.int(i)))
		}

		return result
	}()
}

// ImPlotNextPlotData_SetRange sets value of ImPlotNextPlotData.Range[ImAxis_COUNT]
func (self NextPlotData) SetRange(v *[6]Range) {
	vArg := make([]C.ImPlotRange, len(v))
	for i, vV := range v {
		vVArg, _ := vV.C()
		vArg[i] = internal.ReinterpretCast[C.ImPlotRange](vVArg)
	}

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotNextPlotData_SetRange(selfArg, (*C.ImPlotRange)(&vArg[0]))

	for i, vV := range vArg {
		(*v)[i] = *NewRangeFromC(func() *C.ImPlotRange { result := vV; return &result }())
	}
}

// ImPlotNextPlotData_GetRange returns value of ImPlotNextPlotData.Range[ImAxis_COUNT]
func (self *NextPlotData) Range() [6]Range {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() [6]Range {
		result := [6]Range{}
		resultMirr := C.wrap_ImPlotNextPlotData_GetRange(internal.ReinterpretCast[*C.ImPlotNextPlotData](selfArg))
		for i := range result {
			result[i] = *NewRangeFromC(func() *C.ImPlotRange { result := C.cimplot_ImPlotRange_GetAtIdx(resultMirr, C.int(i)); return &result }())
		}

		return result
	}()
}

// ImPlotNextPlotData_SetHasRange sets value of ImPlotNextPlotData.HasRange[ImAxis_COUNT]
func (self NextPlotData) SetHasRange(v *[6]bool) {
	vArg := make([]C.bool, len(v))
	for i, vV := range v {
		vArg[i] = C.bool(vV)
	}

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotNextPlotData_SetHasRange(selfArg, (*C.bool)(&vArg[0]))

	for i, vV := range vArg {
		(*v)[i] = vV == C.bool(true)
	}
}

// ImPlotNextPlotData_GetHasRange returns value of ImPlotNextPlotData.HasRange[ImAxis_COUNT]
func (self *NextPlotData) HasRange() [6]bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() [6]bool {
		result := [6]bool{}
		resultMirr := C.wrap_ImPlotNextPlotData_GetHasRange(internal.ReinterpretCast[*C.ImPlotNextPlotData](selfArg))
		for i := range result {
			result[i] = C.cimplot_bool_GetAtIdx(resultMirr, C.int(i)) == C.bool(true)
		}

		return result
	}()
}

// ImPlotNextPlotData_SetFit sets value of ImPlotNextPlotData.Fit[ImAxis_COUNT]
func (self NextPlotData) SetFit(v *[6]bool) {
	vArg := make([]C.bool, len(v))
	for i, vV := range v {
		vArg[i] = C.bool(vV)
	}

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotNextPlotData_SetFit(selfArg, (*C.bool)(&vArg[0]))

	for i, vV := range vArg {
		(*v)[i] = vV == C.bool(true)
	}
}

// ImPlotNextPlotData_GetFit returns value of ImPlotNextPlotData.Fit[ImAxis_COUNT]
func (self *NextPlotData) Fit() [6]bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() [6]bool {
		result := [6]bool{}
		resultMirr := C.wrap_ImPlotNextPlotData_GetFit(internal.ReinterpretCast[*C.ImPlotNextPlotData](selfArg))
		for i := range result {
			result[i] = C.cimplot_bool_GetAtIdx(resultMirr, C.int(i)) == C.bool(true)
		}

		return result
	}()
}

// ImPlotNextPlotData_SetLinkedMin sets value of ImPlotNextPlotData.LinkedMin[ImAxis_COUNT]
func (self NextPlotData) SetLinkedMin(v *[6]*float64) {
	vArg := make([]*C.double, len(v))
	for i, vV := range v {
		vVArg, _ := internal.WrapNumberPtr[C.double, float64](vV)
		vArg[i] = vVArg
	}

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotNextPlotData_SetLinkedMin(selfArg, (**C.double)(&vArg[0]))

	for i, vV := range vArg {
		(*v)[i] = (*float64)(vV)
	}
}

// ImPlotNextPlotData_GetLinkedMin returns value of ImPlotNextPlotData.LinkedMin[ImAxis_COUNT]
func (self *NextPlotData) LinkedMin() [6]*float64 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() [6]*float64 {
		result := [6]*float64{}
		resultMirr := C.wrap_ImPlotNextPlotData_GetLinkedMin(internal.ReinterpretCast[*C.ImPlotNextPlotData](selfArg))
		for i := range result {
			result[i] = (*float64)(C.cimplot_doublePtr_GetAtIdx(resultMirr, C.int(i)))
		}

		return result
	}()
}

// ImPlotNextPlotData_SetLinkedMax sets value of ImPlotNextPlotData.LinkedMax[ImAxis_COUNT]
func (self NextPlotData) SetLinkedMax(v *[6]*float64) {
	vArg := make([]*C.double, len(v))
	for i, vV := range v {
		vVArg, _ := internal.WrapNumberPtr[C.double, float64](vV)
		vArg[i] = vVArg
	}

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotNextPlotData_SetLinkedMax(selfArg, (**C.double)(&vArg[0]))

	for i, vV := range vArg {
		(*v)[i] = (*float64)(vV)
	}
}

// ImPlotNextPlotData_GetLinkedMax returns value of ImPlotNextPlotData.LinkedMax[ImAxis_COUNT]
func (self *NextPlotData) LinkedMax() [6]*float64 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() [6]*float64 {
		result := [6]*float64{}
		resultMirr := C.wrap_ImPlotNextPlotData_GetLinkedMax(internal.ReinterpretCast[*C.ImPlotNextPlotData](selfArg))
		for i := range result {
			result[i] = (*float64)(C.cimplot_doublePtr_GetAtIdx(resultMirr, C.int(i)))
		}

		return result
	}()
}

// ImPlotPlot_SetID sets value of ImPlotPlot.ID
func (self Plot) SetID(v imgui.ID) {
	vArg, _ := v.C()

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotPlot_SetID(selfArg, internal.ReinterpretCast[C.ImGuiID](vArg))
}

// ImPlotPlot_GetID returns value of ImPlotPlot.ID
func (self *Plot) ID() imgui.ID {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return *imgui.NewIDFromC(func() *C.ImGuiID {
		result := C.wrap_ImPlotPlot_GetID(internal.ReinterpretCast[*C.ImPlotPlot](selfArg))
		return &result
	}())
}

// ImPlotPlot_SetFlags sets value of ImPlotPlot.Flags
func (self Plot) SetFlags(v Flags) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotPlot_SetFlags(selfArg, C.ImPlotFlags(v))
}

// ImPlotPlot_GetFlags returns value of ImPlotPlot.Flags
func (self *Plot) Flags() Flags {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return Flags(C.wrap_ImPlotPlot_GetFlags(internal.ReinterpretCast[*C.ImPlotPlot](selfArg)))
}

// ImPlotPlot_SetPreviousFlags sets value of ImPlotPlot.PreviousFlags
func (self Plot) SetPreviousFlags(v Flags) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotPlot_SetPreviousFlags(selfArg, C.ImPlotFlags(v))
}

// ImPlotPlot_GetPreviousFlags returns value of ImPlotPlot.PreviousFlags
func (self *Plot) PreviousFlags() Flags {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return Flags(C.wrap_ImPlotPlot_GetPreviousFlags(internal.ReinterpretCast[*C.ImPlotPlot](selfArg)))
}

// ImPlotPlot_SetMouseTextLocation sets value of ImPlotPlot.MouseTextLocation
func (self Plot) SetMouseTextLocation(v Location) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotPlot_SetMouseTextLocation(selfArg, C.ImPlotLocation(v))
}

// ImPlotPlot_GetMouseTextLocation returns value of ImPlotPlot.MouseTextLocation
func (self *Plot) MouseTextLocation() Location {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return Location(C.wrap_ImPlotPlot_GetMouseTextLocation(internal.ReinterpretCast[*C.ImPlotPlot](selfArg)))
}

// ImPlotPlot_SetMouseTextFlags sets value of ImPlotPlot.MouseTextFlags
func (self Plot) SetMouseTextFlags(v MouseTextFlags) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotPlot_SetMouseTextFlags(selfArg, C.ImPlotMouseTextFlags(v))
}

// ImPlotPlot_GetMouseTextFlags returns value of ImPlotPlot.MouseTextFlags
func (self *Plot) MouseTextFlags() MouseTextFlags {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return MouseTextFlags(C.wrap_ImPlotPlot_GetMouseTextFlags(internal.ReinterpretCast[*C.ImPlotPlot](selfArg)))
}

// ImPlotPlot_SetAxes sets value of ImPlotPlot.Axes[ImAxis_COUNT]
func (self Plot) SetAxes(v *[6]Axis) {
	vArg := make([]C.ImPlotAxis, len(v))
	for i, vV := range v {
		vVArg, _ := vV.C()
		vArg[i] = internal.ReinterpretCast[C.ImPlotAxis](vVArg)
	}

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotPlot_SetAxes(selfArg, (*C.ImPlotAxis)(&vArg[0]))

	for i, vV := range vArg {
		(*v)[i] = *NewAxisFromC(func() *C.ImPlotAxis { result := vV; return &result }())
	}
}

// ImPlotPlot_GetAxes returns value of ImPlotPlot.Axes[ImAxis_COUNT]
func (self *Plot) Axes() [6]Axis {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() [6]Axis {
		result := [6]Axis{}
		resultMirr := C.wrap_ImPlotPlot_GetAxes(internal.ReinterpretCast[*C.ImPlotPlot](selfArg))
		for i := range result {
			result[i] = *NewAxisFromC(func() *C.ImPlotAxis { result := C.cimplot_ImPlotAxis_GetAtIdx(resultMirr, C.int(i)); return &result }())
		}

		return result
	}()
}

// ImPlotPlot_SetTextBuffer sets value of ImPlotPlot.TextBuffer
func (self Plot) SetTextBuffer(v imgui.TextBuffer) {
	vArg, _ := v.C()

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotPlot_SetTextBuffer(selfArg, internal.ReinterpretCast[C.ImGuiTextBuffer](vArg))
}

// ImPlotPlot_GetTextBuffer returns value of ImPlotPlot.TextBuffer
func (self *Plot) TextBuffer() imgui.TextBuffer {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return *imgui.NewTextBufferFromC(func() *C.ImGuiTextBuffer {
		result := C.wrap_ImPlotPlot_GetTextBuffer(internal.ReinterpretCast[*C.ImPlotPlot](selfArg))
		return &result
	}())
}

// ImPlotPlot_SetItems sets value of ImPlotPlot.Items
func (self Plot) SetItems(v ItemGroup) {
	vArg, _ := v.C()

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotPlot_SetItems(selfArg, internal.ReinterpretCast[C.ImPlotItemGroup](vArg))
}

// ImPlotPlot_GetItems returns value of ImPlotPlot.Items
func (self *Plot) Items() ItemGroup {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return *NewItemGroupFromC(func() *C.ImPlotItemGroup {
		result := C.wrap_ImPlotPlot_GetItems(internal.ReinterpretCast[*C.ImPlotPlot](selfArg))
		return &result
	}())
}

// ImPlotPlot_SetCurrentX sets value of ImPlotPlot.CurrentX
func (self Plot) SetCurrentX(v AxisEnum) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotPlot_SetCurrentX(selfArg, C.ImAxis(v))
}

// ImPlotPlot_GetCurrentX returns value of ImPlotPlot.CurrentX
func (self *Plot) CurrentX() AxisEnum {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return AxisEnum(C.wrap_ImPlotPlot_GetCurrentX(internal.ReinterpretCast[*C.ImPlotPlot](selfArg)))
}

// ImPlotPlot_SetCurrentY sets value of ImPlotPlot.CurrentY
func (self Plot) SetCurrentY(v AxisEnum) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotPlot_SetCurrentY(selfArg, C.ImAxis(v))
}

// ImPlotPlot_GetCurrentY returns value of ImPlotPlot.CurrentY
func (self *Plot) CurrentY() AxisEnum {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return AxisEnum(C.wrap_ImPlotPlot_GetCurrentY(internal.ReinterpretCast[*C.ImPlotPlot](selfArg)))
}

// ImPlotPlot_SetFrameRect sets value of ImPlotPlot.FrameRect
func (self Plot) SetFrameRect(v imgui.Rect) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotPlot_SetFrameRect(selfArg, internal.ReinterpretCast[C.ImRect](v.ToC()))
}

// ImPlotPlot_GetFrameRect returns value of ImPlotPlot.FrameRect
func (self *Plot) FrameRect() imgui.Rect {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() imgui.Rect {
		out := C.wrap_ImPlotPlot_GetFrameRect(internal.ReinterpretCast[*C.ImPlotPlot](selfArg))
		return *(&imgui.Rect{}).FromC(unsafe.Pointer(&out))
	}()
}

// ImPlotPlot_SetCanvasRect sets value of ImPlotPlot.CanvasRect
func (self Plot) SetCanvasRect(v imgui.Rect) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotPlot_SetCanvasRect(selfArg, internal.ReinterpretCast[C.ImRect](v.ToC()))
}

// ImPlotPlot_GetCanvasRect returns value of ImPlotPlot.CanvasRect
func (self *Plot) CanvasRect() imgui.Rect {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() imgui.Rect {
		out := C.wrap_ImPlotPlot_GetCanvasRect(internal.ReinterpretCast[*C.ImPlotPlot](selfArg))
		return *(&imgui.Rect{}).FromC(unsafe.Pointer(&out))
	}()
}

// ImPlotPlot_SetPlotRect sets value of ImPlotPlot.PlotRect
func (self Plot) SetPlotRect(v imgui.Rect) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotPlot_SetPlotRect(selfArg, internal.ReinterpretCast[C.ImRect](v.ToC()))
}

// ImPlotPlot_GetPlotRect returns value of ImPlotPlot.PlotRect
func (self *Plot) PlotRect() imgui.Rect {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() imgui.Rect {
		out := C.wrap_ImPlotPlot_GetPlotRect(internal.ReinterpretCast[*C.ImPlotPlot](selfArg))
		return *(&imgui.Rect{}).FromC(unsafe.Pointer(&out))
	}()
}

// ImPlotPlot_SetAxesRect sets value of ImPlotPlot.AxesRect
func (self Plot) SetAxesRect(v imgui.Rect) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotPlot_SetAxesRect(selfArg, internal.ReinterpretCast[C.ImRect](v.ToC()))
}

// ImPlotPlot_GetAxesRect returns value of ImPlotPlot.AxesRect
func (self *Plot) AxesRect() imgui.Rect {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() imgui.Rect {
		out := C.wrap_ImPlotPlot_GetAxesRect(internal.ReinterpretCast[*C.ImPlotPlot](selfArg))
		return *(&imgui.Rect{}).FromC(unsafe.Pointer(&out))
	}()
}

// ImPlotPlot_SetSelectRect sets value of ImPlotPlot.SelectRect
func (self Plot) SetSelectRect(v imgui.Rect) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotPlot_SetSelectRect(selfArg, internal.ReinterpretCast[C.ImRect](v.ToC()))
}

// ImPlotPlot_GetSelectRect returns value of ImPlotPlot.SelectRect
func (self *Plot) SelectRect() imgui.Rect {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() imgui.Rect {
		out := C.wrap_ImPlotPlot_GetSelectRect(internal.ReinterpretCast[*C.ImPlotPlot](selfArg))
		return *(&imgui.Rect{}).FromC(unsafe.Pointer(&out))
	}()
}

// ImPlotPlot_SetSelectStart sets value of ImPlotPlot.SelectStart
func (self Plot) SetSelectStart(v imgui.Vec2) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotPlot_SetSelectStart(selfArg, internal.ReinterpretCast[C.ImVec2](v.ToC()))
}

// ImPlotPlot_GetSelectStart returns value of ImPlotPlot.SelectStart
func (self *Plot) SelectStart() imgui.Vec2 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() imgui.Vec2 {
		out := C.wrap_ImPlotPlot_GetSelectStart(internal.ReinterpretCast[*C.ImPlotPlot](selfArg))
		return *(&imgui.Vec2{}).FromC(unsafe.Pointer(&out))
	}()
}

// ImPlotPlot_SetTitleOffset sets value of ImPlotPlot.TitleOffset
func (self Plot) SetTitleOffset(v int32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotPlot_SetTitleOffset(selfArg, C.int(v))
}

// ImPlotPlot_GetTitleOffset returns value of ImPlotPlot.TitleOffset
func (self *Plot) TitleOffset() int32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return int32(C.wrap_ImPlotPlot_GetTitleOffset(internal.ReinterpretCast[*C.ImPlotPlot](selfArg)))
}

// ImPlotPlot_SetJustCreated sets value of ImPlotPlot.JustCreated
func (self Plot) SetJustCreated(v bool) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotPlot_SetJustCreated(selfArg, C.bool(v))
}

// ImPlotPlot_GetJustCreated returns value of ImPlotPlot.JustCreated
func (self *Plot) JustCreated() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.wrap_ImPlotPlot_GetJustCreated(internal.ReinterpretCast[*C.ImPlotPlot](selfArg)) == C.bool(true)
}

// ImPlotPlot_SetInitialized sets value of ImPlotPlot.Initialized
func (self Plot) SetInitialized(v bool) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotPlot_SetInitialized(selfArg, C.bool(v))
}

// ImPlotPlot_GetInitialized returns value of ImPlotPlot.Initialized
func (self *Plot) Initialized() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.wrap_ImPlotPlot_GetInitialized(internal.ReinterpretCast[*C.ImPlotPlot](selfArg)) == C.bool(true)
}

// ImPlotPlot_SetSetupLocked sets value of ImPlotPlot.SetupLocked
func (self Plot) SetSetupLocked(v bool) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotPlot_SetSetupLocked(selfArg, C.bool(v))
}

// ImPlotPlot_GetSetupLocked returns value of ImPlotPlot.SetupLocked
func (self *Plot) SetupLocked() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.wrap_ImPlotPlot_GetSetupLocked(internal.ReinterpretCast[*C.ImPlotPlot](selfArg)) == C.bool(true)
}

// ImPlotPlot_SetFitThisFrame sets value of ImPlotPlot.FitThisFrame
func (self Plot) SetFitThisFrame(v bool) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotPlot_SetFitThisFrame(selfArg, C.bool(v))
}

// ImPlotPlot_GetFitThisFrame returns value of ImPlotPlot.FitThisFrame
func (self *Plot) FitThisFrame() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.wrap_ImPlotPlot_GetFitThisFrame(internal.ReinterpretCast[*C.ImPlotPlot](selfArg)) == C.bool(true)
}

// ImPlotPlot_SetHovered sets value of ImPlotPlot.Hovered
func (self Plot) SetHovered(v bool) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotPlot_SetHovered(selfArg, C.bool(v))
}

// ImPlotPlot_GetHovered returns value of ImPlotPlot.Hovered
func (self *Plot) Hovered() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.wrap_ImPlotPlot_GetHovered(internal.ReinterpretCast[*C.ImPlotPlot](selfArg)) == C.bool(true)
}

// ImPlotPlot_SetHeld sets value of ImPlotPlot.Held
func (self Plot) SetHeld(v bool) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotPlot_SetHeld(selfArg, C.bool(v))
}

// ImPlotPlot_GetHeld returns value of ImPlotPlot.Held
func (self *Plot) Held() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.wrap_ImPlotPlot_GetHeld(internal.ReinterpretCast[*C.ImPlotPlot](selfArg)) == C.bool(true)
}

// ImPlotPlot_SetSelecting sets value of ImPlotPlot.Selecting
func (self Plot) SetSelecting(v bool) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotPlot_SetSelecting(selfArg, C.bool(v))
}

// ImPlotPlot_GetSelecting returns value of ImPlotPlot.Selecting
func (self *Plot) Selecting() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.wrap_ImPlotPlot_GetSelecting(internal.ReinterpretCast[*C.ImPlotPlot](selfArg)) == C.bool(true)
}

// ImPlotPlot_SetSelected sets value of ImPlotPlot.Selected
func (self Plot) SetSelected(v bool) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotPlot_SetSelected(selfArg, C.bool(v))
}

// ImPlotPlot_GetSelected returns value of ImPlotPlot.Selected
func (self *Plot) Selected() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.wrap_ImPlotPlot_GetSelected(internal.ReinterpretCast[*C.ImPlotPlot](selfArg)) == C.bool(true)
}

// ImPlotPlot_SetContextLocked sets value of ImPlotPlot.ContextLocked
func (self Plot) SetContextLocked(v bool) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotPlot_SetContextLocked(selfArg, C.bool(v))
}

// ImPlotPlot_GetContextLocked returns value of ImPlotPlot.ContextLocked
func (self *Plot) ContextLocked() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.wrap_ImPlotPlot_GetContextLocked(internal.ReinterpretCast[*C.ImPlotPlot](selfArg)) == C.bool(true)
}

// ImPlotPointError_SetX sets value of ImPlotPointError.X
func (self PointError) SetX(v float64) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotPointError_SetX(selfArg, C.double(v))
}

// ImPlotPointError_GetX returns value of ImPlotPointError.X
func (self *PointError) X() float64 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float64(C.wrap_ImPlotPointError_GetX(internal.ReinterpretCast[*C.ImPlotPointError](selfArg)))
}

// ImPlotPointError_SetY sets value of ImPlotPointError.Y
func (self PointError) SetY(v float64) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotPointError_SetY(selfArg, C.double(v))
}

// ImPlotPointError_GetY returns value of ImPlotPointError.Y
func (self *PointError) Y() float64 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float64(C.wrap_ImPlotPointError_GetY(internal.ReinterpretCast[*C.ImPlotPointError](selfArg)))
}

// ImPlotPointError_SetNeg sets value of ImPlotPointError.Neg
func (self PointError) SetNeg(v float64) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotPointError_SetNeg(selfArg, C.double(v))
}

// ImPlotPointError_GetNeg returns value of ImPlotPointError.Neg
func (self *PointError) Neg() float64 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float64(C.wrap_ImPlotPointError_GetNeg(internal.ReinterpretCast[*C.ImPlotPointError](selfArg)))
}

// ImPlotPointError_SetPos sets value of ImPlotPointError.Pos
func (self PointError) SetPos(v float64) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotPointError_SetPos(selfArg, C.double(v))
}

// ImPlotPointError_GetPos returns value of ImPlotPointError.Pos
func (self *PointError) Pos() float64 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float64(C.wrap_ImPlotPointError_GetPos(internal.ReinterpretCast[*C.ImPlotPointError](selfArg)))
}

// ImPlotRange_SetMin sets value of ImPlotRange.Min
func (self Range) SetMin(v float64) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotRange_SetMin(selfArg, C.double(v))
}

// ImPlotRange_GetMin returns value of ImPlotRange.Min
func (self *Range) Min() float64 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float64(C.wrap_ImPlotRange_GetMin(internal.ReinterpretCast[*C.ImPlotRange](selfArg)))
}

// ImPlotRange_SetMax sets value of ImPlotRange.Max
func (self Range) SetMax(v float64) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotRange_SetMax(selfArg, C.double(v))
}

// ImPlotRange_GetMax returns value of ImPlotRange.Max
func (self *Range) Max() float64 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float64(C.wrap_ImPlotRange_GetMax(internal.ReinterpretCast[*C.ImPlotRange](selfArg)))
}

// ImPlotRect_SetX sets value of ImPlotRect.X
func (self Rect) SetX(v Range) {
	vArg, _ := v.C()

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotRect_SetX(selfArg, internal.ReinterpretCast[C.ImPlotRange](vArg))
}

// ImPlotRect_GetX returns value of ImPlotRect.X
func (self *Rect) X() Range {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return *NewRangeFromC(func() *C.ImPlotRange {
		result := C.wrap_ImPlotRect_GetX(internal.ReinterpretCast[*C.ImPlotRect](selfArg))
		return &result
	}())
}

// ImPlotRect_SetY sets value of ImPlotRect.Y
func (self Rect) SetY(v Range) {
	vArg, _ := v.C()

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotRect_SetY(selfArg, internal.ReinterpretCast[C.ImPlotRange](vArg))
}

// ImPlotRect_GetY returns value of ImPlotRect.Y
func (self *Rect) Y() Range {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return *NewRangeFromC(func() *C.ImPlotRange {
		result := C.wrap_ImPlotRect_GetY(internal.ReinterpretCast[*C.ImPlotRect](selfArg))
		return &result
	}())
}

// ImPlotStyle_SetLineWeight sets value of ImPlotStyle.LineWeight
func (self Style) SetLineWeight(v float32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotStyle_SetLineWeight(selfArg, C.float(v))
}

// ImPlotStyle_GetLineWeight returns value of ImPlotStyle.LineWeight
func (self *Style) LineWeight() float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_ImPlotStyle_GetLineWeight(internal.ReinterpretCast[*C.ImPlotStyle](selfArg)))
}

// ImPlotStyle_SetMarker sets value of ImPlotStyle.Marker
func (self Style) SetMarker(v int32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotStyle_SetMarker(selfArg, C.int(v))
}

// ImPlotStyle_GetMarker returns value of ImPlotStyle.Marker
func (self *Style) Marker() int32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return int32(C.wrap_ImPlotStyle_GetMarker(internal.ReinterpretCast[*C.ImPlotStyle](selfArg)))
}

// ImPlotStyle_SetMarkerSize sets value of ImPlotStyle.MarkerSize
func (self Style) SetMarkerSize(v float32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotStyle_SetMarkerSize(selfArg, C.float(v))
}

// ImPlotStyle_GetMarkerSize returns value of ImPlotStyle.MarkerSize
func (self *Style) MarkerSize() float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_ImPlotStyle_GetMarkerSize(internal.ReinterpretCast[*C.ImPlotStyle](selfArg)))
}

// ImPlotStyle_SetMarkerWeight sets value of ImPlotStyle.MarkerWeight
func (self Style) SetMarkerWeight(v float32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotStyle_SetMarkerWeight(selfArg, C.float(v))
}

// ImPlotStyle_GetMarkerWeight returns value of ImPlotStyle.MarkerWeight
func (self *Style) MarkerWeight() float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_ImPlotStyle_GetMarkerWeight(internal.ReinterpretCast[*C.ImPlotStyle](selfArg)))
}

// ImPlotStyle_SetFillAlpha sets value of ImPlotStyle.FillAlpha
func (self Style) SetFillAlpha(v float32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotStyle_SetFillAlpha(selfArg, C.float(v))
}

// ImPlotStyle_GetFillAlpha returns value of ImPlotStyle.FillAlpha
func (self *Style) FillAlpha() float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_ImPlotStyle_GetFillAlpha(internal.ReinterpretCast[*C.ImPlotStyle](selfArg)))
}

// ImPlotStyle_SetErrorBarSize sets value of ImPlotStyle.ErrorBarSize
func (self Style) SetErrorBarSize(v float32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotStyle_SetErrorBarSize(selfArg, C.float(v))
}

// ImPlotStyle_GetErrorBarSize returns value of ImPlotStyle.ErrorBarSize
func (self *Style) ErrorBarSize() float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_ImPlotStyle_GetErrorBarSize(internal.ReinterpretCast[*C.ImPlotStyle](selfArg)))
}

// ImPlotStyle_SetErrorBarWeight sets value of ImPlotStyle.ErrorBarWeight
func (self Style) SetErrorBarWeight(v float32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotStyle_SetErrorBarWeight(selfArg, C.float(v))
}

// ImPlotStyle_GetErrorBarWeight returns value of ImPlotStyle.ErrorBarWeight
func (self *Style) ErrorBarWeight() float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_ImPlotStyle_GetErrorBarWeight(internal.ReinterpretCast[*C.ImPlotStyle](selfArg)))
}

// ImPlotStyle_SetDigitalBitHeight sets value of ImPlotStyle.DigitalBitHeight
func (self Style) SetDigitalBitHeight(v float32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotStyle_SetDigitalBitHeight(selfArg, C.float(v))
}

// ImPlotStyle_GetDigitalBitHeight returns value of ImPlotStyle.DigitalBitHeight
func (self *Style) DigitalBitHeight() float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_ImPlotStyle_GetDigitalBitHeight(internal.ReinterpretCast[*C.ImPlotStyle](selfArg)))
}

// ImPlotStyle_SetDigitalBitGap sets value of ImPlotStyle.DigitalBitGap
func (self Style) SetDigitalBitGap(v float32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotStyle_SetDigitalBitGap(selfArg, C.float(v))
}

// ImPlotStyle_GetDigitalBitGap returns value of ImPlotStyle.DigitalBitGap
func (self *Style) DigitalBitGap() float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_ImPlotStyle_GetDigitalBitGap(internal.ReinterpretCast[*C.ImPlotStyle](selfArg)))
}

// ImPlotStyle_SetPlotBorderSize sets value of ImPlotStyle.PlotBorderSize
func (self Style) SetPlotBorderSize(v float32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotStyle_SetPlotBorderSize(selfArg, C.float(v))
}

// ImPlotStyle_GetPlotBorderSize returns value of ImPlotStyle.PlotBorderSize
func (self *Style) PlotBorderSize() float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_ImPlotStyle_GetPlotBorderSize(internal.ReinterpretCast[*C.ImPlotStyle](selfArg)))
}

// ImPlotStyle_SetMinorAlpha sets value of ImPlotStyle.MinorAlpha
func (self Style) SetMinorAlpha(v float32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotStyle_SetMinorAlpha(selfArg, C.float(v))
}

// ImPlotStyle_GetMinorAlpha returns value of ImPlotStyle.MinorAlpha
func (self *Style) MinorAlpha() float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_ImPlotStyle_GetMinorAlpha(internal.ReinterpretCast[*C.ImPlotStyle](selfArg)))
}

// ImPlotStyle_SetMajorTickLen sets value of ImPlotStyle.MajorTickLen
func (self Style) SetMajorTickLen(v imgui.Vec2) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotStyle_SetMajorTickLen(selfArg, internal.ReinterpretCast[C.ImVec2](v.ToC()))
}

// ImPlotStyle_GetMajorTickLen returns value of ImPlotStyle.MajorTickLen
func (self *Style) MajorTickLen() imgui.Vec2 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() imgui.Vec2 {
		out := C.wrap_ImPlotStyle_GetMajorTickLen(internal.ReinterpretCast[*C.ImPlotStyle](selfArg))
		return *(&imgui.Vec2{}).FromC(unsafe.Pointer(&out))
	}()
}

// ImPlotStyle_SetMinorTickLen sets value of ImPlotStyle.MinorTickLen
func (self Style) SetMinorTickLen(v imgui.Vec2) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotStyle_SetMinorTickLen(selfArg, internal.ReinterpretCast[C.ImVec2](v.ToC()))
}

// ImPlotStyle_GetMinorTickLen returns value of ImPlotStyle.MinorTickLen
func (self *Style) MinorTickLen() imgui.Vec2 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() imgui.Vec2 {
		out := C.wrap_ImPlotStyle_GetMinorTickLen(internal.ReinterpretCast[*C.ImPlotStyle](selfArg))
		return *(&imgui.Vec2{}).FromC(unsafe.Pointer(&out))
	}()
}

// ImPlotStyle_SetMajorTickSize sets value of ImPlotStyle.MajorTickSize
func (self Style) SetMajorTickSize(v imgui.Vec2) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotStyle_SetMajorTickSize(selfArg, internal.ReinterpretCast[C.ImVec2](v.ToC()))
}

// ImPlotStyle_GetMajorTickSize returns value of ImPlotStyle.MajorTickSize
func (self *Style) MajorTickSize() imgui.Vec2 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() imgui.Vec2 {
		out := C.wrap_ImPlotStyle_GetMajorTickSize(internal.ReinterpretCast[*C.ImPlotStyle](selfArg))
		return *(&imgui.Vec2{}).FromC(unsafe.Pointer(&out))
	}()
}

// ImPlotStyle_SetMinorTickSize sets value of ImPlotStyle.MinorTickSize
func (self Style) SetMinorTickSize(v imgui.Vec2) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotStyle_SetMinorTickSize(selfArg, internal.ReinterpretCast[C.ImVec2](v.ToC()))
}

// ImPlotStyle_GetMinorTickSize returns value of ImPlotStyle.MinorTickSize
func (self *Style) MinorTickSize() imgui.Vec2 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() imgui.Vec2 {
		out := C.wrap_ImPlotStyle_GetMinorTickSize(internal.ReinterpretCast[*C.ImPlotStyle](selfArg))
		return *(&imgui.Vec2{}).FromC(unsafe.Pointer(&out))
	}()
}

// ImPlotStyle_SetMajorGridSize sets value of ImPlotStyle.MajorGridSize
func (self Style) SetMajorGridSize(v imgui.Vec2) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotStyle_SetMajorGridSize(selfArg, internal.ReinterpretCast[C.ImVec2](v.ToC()))
}

// ImPlotStyle_GetMajorGridSize returns value of ImPlotStyle.MajorGridSize
func (self *Style) MajorGridSize() imgui.Vec2 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() imgui.Vec2 {
		out := C.wrap_ImPlotStyle_GetMajorGridSize(internal.ReinterpretCast[*C.ImPlotStyle](selfArg))
		return *(&imgui.Vec2{}).FromC(unsafe.Pointer(&out))
	}()
}

// ImPlotStyle_SetMinorGridSize sets value of ImPlotStyle.MinorGridSize
func (self Style) SetMinorGridSize(v imgui.Vec2) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotStyle_SetMinorGridSize(selfArg, internal.ReinterpretCast[C.ImVec2](v.ToC()))
}

// ImPlotStyle_GetMinorGridSize returns value of ImPlotStyle.MinorGridSize
func (self *Style) MinorGridSize() imgui.Vec2 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() imgui.Vec2 {
		out := C.wrap_ImPlotStyle_GetMinorGridSize(internal.ReinterpretCast[*C.ImPlotStyle](selfArg))
		return *(&imgui.Vec2{}).FromC(unsafe.Pointer(&out))
	}()
}

// ImPlotStyle_SetPlotPadding sets value of ImPlotStyle.PlotPadding
func (self Style) SetPlotPadding(v imgui.Vec2) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotStyle_SetPlotPadding(selfArg, internal.ReinterpretCast[C.ImVec2](v.ToC()))
}

// ImPlotStyle_GetPlotPadding returns value of ImPlotStyle.PlotPadding
func (self *Style) PlotPadding() imgui.Vec2 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() imgui.Vec2 {
		out := C.wrap_ImPlotStyle_GetPlotPadding(internal.ReinterpretCast[*C.ImPlotStyle](selfArg))
		return *(&imgui.Vec2{}).FromC(unsafe.Pointer(&out))
	}()
}

// ImPlotStyle_SetLabelPadding sets value of ImPlotStyle.LabelPadding
func (self Style) SetLabelPadding(v imgui.Vec2) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotStyle_SetLabelPadding(selfArg, internal.ReinterpretCast[C.ImVec2](v.ToC()))
}

// ImPlotStyle_GetLabelPadding returns value of ImPlotStyle.LabelPadding
func (self *Style) LabelPadding() imgui.Vec2 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() imgui.Vec2 {
		out := C.wrap_ImPlotStyle_GetLabelPadding(internal.ReinterpretCast[*C.ImPlotStyle](selfArg))
		return *(&imgui.Vec2{}).FromC(unsafe.Pointer(&out))
	}()
}

// ImPlotStyle_SetLegendPadding sets value of ImPlotStyle.LegendPadding
func (self Style) SetLegendPadding(v imgui.Vec2) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotStyle_SetLegendPadding(selfArg, internal.ReinterpretCast[C.ImVec2](v.ToC()))
}

// ImPlotStyle_GetLegendPadding returns value of ImPlotStyle.LegendPadding
func (self *Style) LegendPadding() imgui.Vec2 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() imgui.Vec2 {
		out := C.wrap_ImPlotStyle_GetLegendPadding(internal.ReinterpretCast[*C.ImPlotStyle](selfArg))
		return *(&imgui.Vec2{}).FromC(unsafe.Pointer(&out))
	}()
}

// ImPlotStyle_SetLegendInnerPadding sets value of ImPlotStyle.LegendInnerPadding
func (self Style) SetLegendInnerPadding(v imgui.Vec2) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotStyle_SetLegendInnerPadding(selfArg, internal.ReinterpretCast[C.ImVec2](v.ToC()))
}

// ImPlotStyle_GetLegendInnerPadding returns value of ImPlotStyle.LegendInnerPadding
func (self *Style) LegendInnerPadding() imgui.Vec2 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() imgui.Vec2 {
		out := C.wrap_ImPlotStyle_GetLegendInnerPadding(internal.ReinterpretCast[*C.ImPlotStyle](selfArg))
		return *(&imgui.Vec2{}).FromC(unsafe.Pointer(&out))
	}()
}

// ImPlotStyle_SetLegendSpacing sets value of ImPlotStyle.LegendSpacing
func (self Style) SetLegendSpacing(v imgui.Vec2) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotStyle_SetLegendSpacing(selfArg, internal.ReinterpretCast[C.ImVec2](v.ToC()))
}

// ImPlotStyle_GetLegendSpacing returns value of ImPlotStyle.LegendSpacing
func (self *Style) LegendSpacing() imgui.Vec2 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() imgui.Vec2 {
		out := C.wrap_ImPlotStyle_GetLegendSpacing(internal.ReinterpretCast[*C.ImPlotStyle](selfArg))
		return *(&imgui.Vec2{}).FromC(unsafe.Pointer(&out))
	}()
}

// ImPlotStyle_SetMousePosPadding sets value of ImPlotStyle.MousePosPadding
func (self Style) SetMousePosPadding(v imgui.Vec2) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotStyle_SetMousePosPadding(selfArg, internal.ReinterpretCast[C.ImVec2](v.ToC()))
}

// ImPlotStyle_GetMousePosPadding returns value of ImPlotStyle.MousePosPadding
func (self *Style) MousePosPadding() imgui.Vec2 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() imgui.Vec2 {
		out := C.wrap_ImPlotStyle_GetMousePosPadding(internal.ReinterpretCast[*C.ImPlotStyle](selfArg))
		return *(&imgui.Vec2{}).FromC(unsafe.Pointer(&out))
	}()
}

// ImPlotStyle_SetAnnotationPadding sets value of ImPlotStyle.AnnotationPadding
func (self Style) SetAnnotationPadding(v imgui.Vec2) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotStyle_SetAnnotationPadding(selfArg, internal.ReinterpretCast[C.ImVec2](v.ToC()))
}

// ImPlotStyle_GetAnnotationPadding returns value of ImPlotStyle.AnnotationPadding
func (self *Style) AnnotationPadding() imgui.Vec2 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() imgui.Vec2 {
		out := C.wrap_ImPlotStyle_GetAnnotationPadding(internal.ReinterpretCast[*C.ImPlotStyle](selfArg))
		return *(&imgui.Vec2{}).FromC(unsafe.Pointer(&out))
	}()
}

// ImPlotStyle_SetFitPadding sets value of ImPlotStyle.FitPadding
func (self Style) SetFitPadding(v imgui.Vec2) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotStyle_SetFitPadding(selfArg, internal.ReinterpretCast[C.ImVec2](v.ToC()))
}

// ImPlotStyle_GetFitPadding returns value of ImPlotStyle.FitPadding
func (self *Style) FitPadding() imgui.Vec2 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() imgui.Vec2 {
		out := C.wrap_ImPlotStyle_GetFitPadding(internal.ReinterpretCast[*C.ImPlotStyle](selfArg))
		return *(&imgui.Vec2{}).FromC(unsafe.Pointer(&out))
	}()
}

// ImPlotStyle_SetPlotDefaultSize sets value of ImPlotStyle.PlotDefaultSize
func (self Style) SetPlotDefaultSize(v imgui.Vec2) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotStyle_SetPlotDefaultSize(selfArg, internal.ReinterpretCast[C.ImVec2](v.ToC()))
}

// ImPlotStyle_GetPlotDefaultSize returns value of ImPlotStyle.PlotDefaultSize
func (self *Style) PlotDefaultSize() imgui.Vec2 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() imgui.Vec2 {
		out := C.wrap_ImPlotStyle_GetPlotDefaultSize(internal.ReinterpretCast[*C.ImPlotStyle](selfArg))
		return *(&imgui.Vec2{}).FromC(unsafe.Pointer(&out))
	}()
}

// ImPlotStyle_SetPlotMinSize sets value of ImPlotStyle.PlotMinSize
func (self Style) SetPlotMinSize(v imgui.Vec2) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotStyle_SetPlotMinSize(selfArg, internal.ReinterpretCast[C.ImVec2](v.ToC()))
}

// ImPlotStyle_GetPlotMinSize returns value of ImPlotStyle.PlotMinSize
func (self *Style) PlotMinSize() imgui.Vec2 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() imgui.Vec2 {
		out := C.wrap_ImPlotStyle_GetPlotMinSize(internal.ReinterpretCast[*C.ImPlotStyle](selfArg))
		return *(&imgui.Vec2{}).FromC(unsafe.Pointer(&out))
	}()
}

// ImPlotStyle_SetColors sets value of ImPlotStyle.Colors[ImPlotCol_COUNT]
func (self Style) SetColors(v *[21]imgui.Vec4) {
	vArg := make([]C.ImVec4, len(v))
	for i, vV := range v {
		vArg[i] = internal.ReinterpretCast[C.ImVec4](vV.ToC())
	}

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotStyle_SetColors(selfArg, (*C.ImVec4)(&vArg[0]))

	for i, vV := range vArg {
		(*v)[i] = func() imgui.Vec4 { out := vV; return *(&imgui.Vec4{}).FromC(unsafe.Pointer(&out)) }()
	}
}

// ImPlotStyle_GetColors returns value of ImPlotStyle.Colors[ImPlotCol_COUNT]
func (self *Style) Colors() [21]imgui.Vec4 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() [21]imgui.Vec4 {
		result := [21]imgui.Vec4{}
		resultMirr := C.wrap_ImPlotStyle_GetColors(internal.ReinterpretCast[*C.ImPlotStyle](selfArg))
		for i := range result {
			result[i] = func() imgui.Vec4 {
				out := C.cimplot_ImVec4_GetAtIdx(resultMirr, C.int(i))
				return *(&imgui.Vec4{}).FromC(unsafe.Pointer(&out))
			}()
		}

		return result
	}()
}

// ImPlotStyle_SetColormap sets value of ImPlotStyle.Colormap
func (self Style) SetColormap(v Colormap) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotStyle_SetColormap(selfArg, C.ImPlotColormap(v))
}

// ImPlotStyle_GetColormap returns value of ImPlotStyle.Colormap
func (self *Style) Colormap() Colormap {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return Colormap(C.wrap_ImPlotStyle_GetColormap(internal.ReinterpretCast[*C.ImPlotStyle](selfArg)))
}

// ImPlotStyle_SetUseLocalTime sets value of ImPlotStyle.UseLocalTime
func (self Style) SetUseLocalTime(v bool) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotStyle_SetUseLocalTime(selfArg, C.bool(v))
}

// ImPlotStyle_GetUseLocalTime returns value of ImPlotStyle.UseLocalTime
func (self *Style) UseLocalTime() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.wrap_ImPlotStyle_GetUseLocalTime(internal.ReinterpretCast[*C.ImPlotStyle](selfArg)) == C.bool(true)
}

// ImPlotStyle_SetUseISO8601 sets value of ImPlotStyle.UseISO8601
func (self Style) SetUseISO8601(v bool) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotStyle_SetUseISO8601(selfArg, C.bool(v))
}

// ImPlotStyle_GetUseISO8601 returns value of ImPlotStyle.UseISO8601
func (self *Style) UseISO8601() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.wrap_ImPlotStyle_GetUseISO8601(internal.ReinterpretCast[*C.ImPlotStyle](selfArg)) == C.bool(true)
}

// ImPlotStyle_SetUse24HourClock sets value of ImPlotStyle.Use24HourClock
func (self Style) SetUse24HourClock(v bool) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotStyle_SetUse24HourClock(selfArg, C.bool(v))
}

// ImPlotStyle_GetUse24HourClock returns value of ImPlotStyle.Use24HourClock
func (self *Style) Use24HourClock() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.wrap_ImPlotStyle_GetUse24HourClock(internal.ReinterpretCast[*C.ImPlotStyle](selfArg)) == C.bool(true)
}

// ImPlotSubplot_SetID sets value of ImPlotSubplot.ID
func (self Subplot) SetID(v imgui.ID) {
	vArg, _ := v.C()

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotSubplot_SetID(selfArg, internal.ReinterpretCast[C.ImGuiID](vArg))
}

// ImPlotSubplot_GetID returns value of ImPlotSubplot.ID
func (self *Subplot) ID() imgui.ID {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return *imgui.NewIDFromC(func() *C.ImGuiID {
		result := C.wrap_ImPlotSubplot_GetID(internal.ReinterpretCast[*C.ImPlotSubplot](selfArg))
		return &result
	}())
}

// ImPlotSubplot_SetFlags sets value of ImPlotSubplot.Flags
func (self Subplot) SetFlags(v SubplotFlags) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotSubplot_SetFlags(selfArg, C.ImPlotSubplotFlags(v))
}

// ImPlotSubplot_GetFlags returns value of ImPlotSubplot.Flags
func (self *Subplot) Flags() SubplotFlags {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return SubplotFlags(C.wrap_ImPlotSubplot_GetFlags(internal.ReinterpretCast[*C.ImPlotSubplot](selfArg)))
}

// ImPlotSubplot_SetPreviousFlags sets value of ImPlotSubplot.PreviousFlags
func (self Subplot) SetPreviousFlags(v SubplotFlags) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotSubplot_SetPreviousFlags(selfArg, C.ImPlotSubplotFlags(v))
}

// ImPlotSubplot_GetPreviousFlags returns value of ImPlotSubplot.PreviousFlags
func (self *Subplot) PreviousFlags() SubplotFlags {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return SubplotFlags(C.wrap_ImPlotSubplot_GetPreviousFlags(internal.ReinterpretCast[*C.ImPlotSubplot](selfArg)))
}

// ImPlotSubplot_SetItems sets value of ImPlotSubplot.Items
func (self Subplot) SetItems(v ItemGroup) {
	vArg, _ := v.C()

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotSubplot_SetItems(selfArg, internal.ReinterpretCast[C.ImPlotItemGroup](vArg))
}

// ImPlotSubplot_GetItems returns value of ImPlotSubplot.Items
func (self *Subplot) Items() ItemGroup {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return *NewItemGroupFromC(func() *C.ImPlotItemGroup {
		result := C.wrap_ImPlotSubplot_GetItems(internal.ReinterpretCast[*C.ImPlotSubplot](selfArg))
		return &result
	}())
}

// ImPlotSubplot_SetRows sets value of ImPlotSubplot.Rows
func (self Subplot) SetRows(v int32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotSubplot_SetRows(selfArg, C.int(v))
}

// ImPlotSubplot_GetRows returns value of ImPlotSubplot.Rows
func (self *Subplot) Rows() int32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return int32(C.wrap_ImPlotSubplot_GetRows(internal.ReinterpretCast[*C.ImPlotSubplot](selfArg)))
}

// ImPlotSubplot_SetCols sets value of ImPlotSubplot.Cols
func (self Subplot) SetCols(v int32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotSubplot_SetCols(selfArg, C.int(v))
}

// ImPlotSubplot_GetCols returns value of ImPlotSubplot.Cols
func (self *Subplot) Cols() int32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return int32(C.wrap_ImPlotSubplot_GetCols(internal.ReinterpretCast[*C.ImPlotSubplot](selfArg)))
}

// ImPlotSubplot_SetCurrentIdx sets value of ImPlotSubplot.CurrentIdx
func (self Subplot) SetCurrentIdx(v int32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotSubplot_SetCurrentIdx(selfArg, C.int(v))
}

// ImPlotSubplot_GetCurrentIdx returns value of ImPlotSubplot.CurrentIdx
func (self *Subplot) CurrentIdx() int32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return int32(C.wrap_ImPlotSubplot_GetCurrentIdx(internal.ReinterpretCast[*C.ImPlotSubplot](selfArg)))
}

// ImPlotSubplot_SetFrameRect sets value of ImPlotSubplot.FrameRect
func (self Subplot) SetFrameRect(v imgui.Rect) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotSubplot_SetFrameRect(selfArg, internal.ReinterpretCast[C.ImRect](v.ToC()))
}

// ImPlotSubplot_GetFrameRect returns value of ImPlotSubplot.FrameRect
func (self *Subplot) FrameRect() imgui.Rect {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() imgui.Rect {
		out := C.wrap_ImPlotSubplot_GetFrameRect(internal.ReinterpretCast[*C.ImPlotSubplot](selfArg))
		return *(&imgui.Rect{}).FromC(unsafe.Pointer(&out))
	}()
}

// ImPlotSubplot_SetGridRect sets value of ImPlotSubplot.GridRect
func (self Subplot) SetGridRect(v imgui.Rect) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotSubplot_SetGridRect(selfArg, internal.ReinterpretCast[C.ImRect](v.ToC()))
}

// ImPlotSubplot_GetGridRect returns value of ImPlotSubplot.GridRect
func (self *Subplot) GridRect() imgui.Rect {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() imgui.Rect {
		out := C.wrap_ImPlotSubplot_GetGridRect(internal.ReinterpretCast[*C.ImPlotSubplot](selfArg))
		return *(&imgui.Rect{}).FromC(unsafe.Pointer(&out))
	}()
}

// ImPlotSubplot_SetCellSize sets value of ImPlotSubplot.CellSize
func (self Subplot) SetCellSize(v imgui.Vec2) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotSubplot_SetCellSize(selfArg, internal.ReinterpretCast[C.ImVec2](v.ToC()))
}

// ImPlotSubplot_GetCellSize returns value of ImPlotSubplot.CellSize
func (self *Subplot) CellSize() imgui.Vec2 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() imgui.Vec2 {
		out := C.wrap_ImPlotSubplot_GetCellSize(internal.ReinterpretCast[*C.ImPlotSubplot](selfArg))
		return *(&imgui.Vec2{}).FromC(unsafe.Pointer(&out))
	}()
}

// ImPlotSubplot_SetRowAlignmentData sets value of ImPlotSubplot.RowAlignmentData
func (self Subplot) SetRowAlignmentData(v vectors.Vector[AlignmentData]) {
	vData := v.Data
	vDataArg, _ := vData.Handle()
	vVecArg := new(C.ImVector_ImPlotAlignmentData)
	vVecArg.Size = C.int(v.Size)
	vVecArg.Capacity = C.int(v.Capacity)
	vVecArg.Data = internal.ReinterpretCast[*C.ImPlotAlignmentData](vDataArg)
	v.Pinner().Pin(vVecArg.Data)

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotSubplot_SetRowAlignmentData(selfArg, *vVecArg)
}

// ImPlotSubplot_GetRowAlignmentData returns value of ImPlotSubplot.RowAlignmentData
func (self *Subplot) RowAlignmentData() vectors.Vector[AlignmentData] {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return vectors.NewVectorFromC(C.wrap_ImPlotSubplot_GetRowAlignmentData(internal.ReinterpretCast[*C.ImPlotSubplot](selfArg)).Size, C.wrap_ImPlotSubplot_GetRowAlignmentData(internal.ReinterpretCast[*C.ImPlotSubplot](selfArg)).Capacity, NewAlignmentDataFromC(C.wrap_ImPlotSubplot_GetRowAlignmentData(internal.ReinterpretCast[*C.ImPlotSubplot](selfArg)).Data))
}

// ImPlotSubplot_SetColAlignmentData sets value of ImPlotSubplot.ColAlignmentData
func (self Subplot) SetColAlignmentData(v vectors.Vector[AlignmentData]) {
	vData := v.Data
	vDataArg, _ := vData.Handle()
	vVecArg := new(C.ImVector_ImPlotAlignmentData)
	vVecArg.Size = C.int(v.Size)
	vVecArg.Capacity = C.int(v.Capacity)
	vVecArg.Data = internal.ReinterpretCast[*C.ImPlotAlignmentData](vDataArg)
	v.Pinner().Pin(vVecArg.Data)

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotSubplot_SetColAlignmentData(selfArg, *vVecArg)
}

// ImPlotSubplot_GetColAlignmentData returns value of ImPlotSubplot.ColAlignmentData
func (self *Subplot) ColAlignmentData() vectors.Vector[AlignmentData] {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return vectors.NewVectorFromC(C.wrap_ImPlotSubplot_GetColAlignmentData(internal.ReinterpretCast[*C.ImPlotSubplot](selfArg)).Size, C.wrap_ImPlotSubplot_GetColAlignmentData(internal.ReinterpretCast[*C.ImPlotSubplot](selfArg)).Capacity, NewAlignmentDataFromC(C.wrap_ImPlotSubplot_GetColAlignmentData(internal.ReinterpretCast[*C.ImPlotSubplot](selfArg)).Data))
}

// ImPlotSubplot_SetRowRatios sets value of ImPlotSubplot.RowRatios
func (self Subplot) SetRowRatios(v vectors.Vector[float32]) {
	vData := v.Data
	vDataArg, _ := internal.WrapNumberPtr[C.float, float32](vData)
	vVecArg := new(C.ImVector_float)
	vVecArg.Size = C.int(v.Size)
	vVecArg.Capacity = C.int(v.Capacity)
	vVecArg.Data = vDataArg
	v.Pinner().Pin(vVecArg.Data)

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotSubplot_SetRowRatios(selfArg, *vVecArg)
}

// ImPlotSubplot_GetRowRatios returns value of ImPlotSubplot.RowRatios
func (self *Subplot) RowRatios() vectors.Vector[float32] {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return vectors.NewVectorFromC(C.wrap_ImPlotSubplot_GetRowRatios(internal.ReinterpretCast[*C.ImPlotSubplot](selfArg)).Size, C.wrap_ImPlotSubplot_GetRowRatios(internal.ReinterpretCast[*C.ImPlotSubplot](selfArg)).Capacity, (*float32)(C.wrap_ImPlotSubplot_GetRowRatios(internal.ReinterpretCast[*C.ImPlotSubplot](selfArg)).Data))
}

// ImPlotSubplot_SetColRatios sets value of ImPlotSubplot.ColRatios
func (self Subplot) SetColRatios(v vectors.Vector[float32]) {
	vData := v.Data
	vDataArg, _ := internal.WrapNumberPtr[C.float, float32](vData)
	vVecArg := new(C.ImVector_float)
	vVecArg.Size = C.int(v.Size)
	vVecArg.Capacity = C.int(v.Capacity)
	vVecArg.Data = vDataArg
	v.Pinner().Pin(vVecArg.Data)

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotSubplot_SetColRatios(selfArg, *vVecArg)
}

// ImPlotSubplot_GetColRatios returns value of ImPlotSubplot.ColRatios
func (self *Subplot) ColRatios() vectors.Vector[float32] {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return vectors.NewVectorFromC(C.wrap_ImPlotSubplot_GetColRatios(internal.ReinterpretCast[*C.ImPlotSubplot](selfArg)).Size, C.wrap_ImPlotSubplot_GetColRatios(internal.ReinterpretCast[*C.ImPlotSubplot](selfArg)).Capacity, (*float32)(C.wrap_ImPlotSubplot_GetColRatios(internal.ReinterpretCast[*C.ImPlotSubplot](selfArg)).Data))
}

// ImPlotSubplot_SetRowLinkData sets value of ImPlotSubplot.RowLinkData
func (self Subplot) SetRowLinkData(v vectors.Vector[Range]) {
	vData := v.Data
	vDataArg, _ := vData.Handle()
	vVecArg := new(C.ImVector_ImPlotRange)
	vVecArg.Size = C.int(v.Size)
	vVecArg.Capacity = C.int(v.Capacity)
	vVecArg.Data = internal.ReinterpretCast[*C.ImPlotRange](vDataArg)
	v.Pinner().Pin(vVecArg.Data)

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotSubplot_SetRowLinkData(selfArg, *vVecArg)
}

// ImPlotSubplot_GetRowLinkData returns value of ImPlotSubplot.RowLinkData
func (self *Subplot) RowLinkData() vectors.Vector[Range] {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return vectors.NewVectorFromC(C.wrap_ImPlotSubplot_GetRowLinkData(internal.ReinterpretCast[*C.ImPlotSubplot](selfArg)).Size, C.wrap_ImPlotSubplot_GetRowLinkData(internal.ReinterpretCast[*C.ImPlotSubplot](selfArg)).Capacity, NewRangeFromC(C.wrap_ImPlotSubplot_GetRowLinkData(internal.ReinterpretCast[*C.ImPlotSubplot](selfArg)).Data))
}

// ImPlotSubplot_SetColLinkData sets value of ImPlotSubplot.ColLinkData
func (self Subplot) SetColLinkData(v vectors.Vector[Range]) {
	vData := v.Data
	vDataArg, _ := vData.Handle()
	vVecArg := new(C.ImVector_ImPlotRange)
	vVecArg.Size = C.int(v.Size)
	vVecArg.Capacity = C.int(v.Capacity)
	vVecArg.Data = internal.ReinterpretCast[*C.ImPlotRange](vDataArg)
	v.Pinner().Pin(vVecArg.Data)

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotSubplot_SetColLinkData(selfArg, *vVecArg)
}

// ImPlotSubplot_GetColLinkData returns value of ImPlotSubplot.ColLinkData
func (self *Subplot) ColLinkData() vectors.Vector[Range] {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return vectors.NewVectorFromC(C.wrap_ImPlotSubplot_GetColLinkData(internal.ReinterpretCast[*C.ImPlotSubplot](selfArg)).Size, C.wrap_ImPlotSubplot_GetColLinkData(internal.ReinterpretCast[*C.ImPlotSubplot](selfArg)).Capacity, NewRangeFromC(C.wrap_ImPlotSubplot_GetColLinkData(internal.ReinterpretCast[*C.ImPlotSubplot](selfArg)).Data))
}

// ImPlotSubplot_SetTempSizes sets value of ImPlotSubplot.TempSizes[2]
func (self Subplot) SetTempSizes(v *[2]float32) {
	vArg := make([]C.float, len(v))
	for i, vV := range v {
		vArg[i] = C.float(vV)
	}

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotSubplot_SetTempSizes(selfArg, (*C.float)(&vArg[0]))

	for i, vV := range vArg {
		(*v)[i] = float32(vV)
	}
}

// ImPlotSubplot_GetTempSizes returns value of ImPlotSubplot.TempSizes[2]
func (self *Subplot) TempSizes() [2]float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() [2]float32 {
		result := [2]float32{}
		resultMirr := C.wrap_ImPlotSubplot_GetTempSizes(internal.ReinterpretCast[*C.ImPlotSubplot](selfArg))
		for i := range result {
			result[i] = float32(C.cimplot_float_GetAtIdx(resultMirr, C.int(i)))
		}

		return result
	}()
}

// ImPlotSubplot_SetFrameHovered sets value of ImPlotSubplot.FrameHovered
func (self Subplot) SetFrameHovered(v bool) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotSubplot_SetFrameHovered(selfArg, C.bool(v))
}

// ImPlotSubplot_GetFrameHovered returns value of ImPlotSubplot.FrameHovered
func (self *Subplot) FrameHovered() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.wrap_ImPlotSubplot_GetFrameHovered(internal.ReinterpretCast[*C.ImPlotSubplot](selfArg)) == C.bool(true)
}

// ImPlotSubplot_SetHasTitle sets value of ImPlotSubplot.HasTitle
func (self Subplot) SetHasTitle(v bool) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotSubplot_SetHasTitle(selfArg, C.bool(v))
}

// ImPlotSubplot_GetHasTitle returns value of ImPlotSubplot.HasTitle
func (self *Subplot) HasTitle() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.wrap_ImPlotSubplot_GetHasTitle(internal.ReinterpretCast[*C.ImPlotSubplot](selfArg)) == C.bool(true)
}

// ImPlotTag_SetAxis sets value of ImPlotTag.Axis
func (self Tag) SetAxis(v AxisEnum) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotTag_SetAxis(selfArg, C.ImAxis(v))
}

// ImPlotTag_GetAxis returns value of ImPlotTag.Axis
func (self *Tag) Axis() AxisEnum {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return AxisEnum(C.wrap_ImPlotTag_GetAxis(internal.ReinterpretCast[*C.ImPlotTag](selfArg)))
}

// ImPlotTag_SetValue sets value of ImPlotTag.Value
func (self Tag) SetValue(v float64) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotTag_SetValue(selfArg, C.double(v))
}

// ImPlotTag_GetValue returns value of ImPlotTag.Value
func (self *Tag) Value() float64 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float64(C.wrap_ImPlotTag_GetValue(internal.ReinterpretCast[*C.ImPlotTag](selfArg)))
}

// ImPlotTag_SetColorBg sets value of ImPlotTag.ColorBg
func (self Tag) SetColorBg(v uint32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotTag_SetColorBg(selfArg, C.ImU32(v))
}

// ImPlotTag_GetColorBg returns value of ImPlotTag.ColorBg
func (self *Tag) ColorBg() uint32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return uint32(C.wrap_ImPlotTag_GetColorBg(internal.ReinterpretCast[*C.ImPlotTag](selfArg)))
}

// ImPlotTag_SetColorFg sets value of ImPlotTag.ColorFg
func (self Tag) SetColorFg(v uint32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotTag_SetColorFg(selfArg, C.ImU32(v))
}

// ImPlotTag_GetColorFg returns value of ImPlotTag.ColorFg
func (self *Tag) ColorFg() uint32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return uint32(C.wrap_ImPlotTag_GetColorFg(internal.ReinterpretCast[*C.ImPlotTag](selfArg)))
}

// ImPlotTag_SetTextOffset sets value of ImPlotTag.TextOffset
func (self Tag) SetTextOffset(v int32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotTag_SetTextOffset(selfArg, C.int(v))
}

// ImPlotTag_GetTextOffset returns value of ImPlotTag.TextOffset
func (self *Tag) TextOffset() int32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return int32(C.wrap_ImPlotTag_GetTextOffset(internal.ReinterpretCast[*C.ImPlotTag](selfArg)))
}

// ImPlotTagCollection_SetTags sets value of ImPlotTagCollection.Tags
func (self TagCollection) SetTags(v vectors.Vector[Tag]) {
	vData := v.Data
	vDataArg, _ := vData.Handle()
	vVecArg := new(C.ImVector_ImPlotTag)
	vVecArg.Size = C.int(v.Size)
	vVecArg.Capacity = C.int(v.Capacity)
	vVecArg.Data = internal.ReinterpretCast[*C.ImPlotTag](vDataArg)
	v.Pinner().Pin(vVecArg.Data)

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotTagCollection_SetTags(selfArg, *vVecArg)
}

// ImPlotTagCollection_GetTags returns value of ImPlotTagCollection.Tags
func (self *TagCollection) Tags() vectors.Vector[Tag] {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return vectors.NewVectorFromC(C.wrap_ImPlotTagCollection_GetTags(internal.ReinterpretCast[*C.ImPlotTagCollection](selfArg)).Size, C.wrap_ImPlotTagCollection_GetTags(internal.ReinterpretCast[*C.ImPlotTagCollection](selfArg)).Capacity, NewTagFromC(C.wrap_ImPlotTagCollection_GetTags(internal.ReinterpretCast[*C.ImPlotTagCollection](selfArg)).Data))
}

// ImPlotTagCollection_SetTextBuffer sets value of ImPlotTagCollection.TextBuffer
func (self TagCollection) SetTextBuffer(v imgui.TextBuffer) {
	vArg, _ := v.C()

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotTagCollection_SetTextBuffer(selfArg, internal.ReinterpretCast[C.ImGuiTextBuffer](vArg))
}

// ImPlotTagCollection_GetTextBuffer returns value of ImPlotTagCollection.TextBuffer
func (self *TagCollection) TextBuffer() imgui.TextBuffer {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return *imgui.NewTextBufferFromC(func() *C.ImGuiTextBuffer {
		result := C.wrap_ImPlotTagCollection_GetTextBuffer(internal.ReinterpretCast[*C.ImPlotTagCollection](selfArg))
		return &result
	}())
}

// ImPlotTagCollection_SetSize sets value of ImPlotTagCollection.Size
func (self TagCollection) SetSize(v int32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotTagCollection_SetSize(selfArg, C.int(v))
}

// ImPlotTagCollection_GetSize returns value of ImPlotTagCollection.Size
func (self *TagCollection) Size() int32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return int32(C.wrap_ImPlotTagCollection_GetSize(internal.ReinterpretCast[*C.ImPlotTagCollection](selfArg)))
}

// ImPlotTick_SetPlotPos sets value of ImPlotTick.PlotPos
func (self Tick) SetPlotPos(v float64) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotTick_SetPlotPos(selfArg, C.double(v))
}

// ImPlotTick_GetPlotPos returns value of ImPlotTick.PlotPos
func (self *Tick) PlotPos() float64 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float64(C.wrap_ImPlotTick_GetPlotPos(internal.ReinterpretCast[*C.ImPlotTick](selfArg)))
}

// ImPlotTick_SetPixelPos sets value of ImPlotTick.PixelPos
func (self Tick) SetPixelPos(v float32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotTick_SetPixelPos(selfArg, C.float(v))
}

// ImPlotTick_GetPixelPos returns value of ImPlotTick.PixelPos
func (self *Tick) PixelPos() float32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return float32(C.wrap_ImPlotTick_GetPixelPos(internal.ReinterpretCast[*C.ImPlotTick](selfArg)))
}

// ImPlotTick_SetLabelSize sets value of ImPlotTick.LabelSize
func (self Tick) SetLabelSize(v imgui.Vec2) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotTick_SetLabelSize(selfArg, internal.ReinterpretCast[C.ImVec2](v.ToC()))
}

// ImPlotTick_GetLabelSize returns value of ImPlotTick.LabelSize
func (self *Tick) LabelSize() imgui.Vec2 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() imgui.Vec2 {
		out := C.wrap_ImPlotTick_GetLabelSize(internal.ReinterpretCast[*C.ImPlotTick](selfArg))
		return *(&imgui.Vec2{}).FromC(unsafe.Pointer(&out))
	}()
}

// ImPlotTick_SetTextOffset sets value of ImPlotTick.TextOffset
func (self Tick) SetTextOffset(v int32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotTick_SetTextOffset(selfArg, C.int(v))
}

// ImPlotTick_GetTextOffset returns value of ImPlotTick.TextOffset
func (self *Tick) TextOffset() int32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return int32(C.wrap_ImPlotTick_GetTextOffset(internal.ReinterpretCast[*C.ImPlotTick](selfArg)))
}

// ImPlotTick_SetMajor sets value of ImPlotTick.Major
func (self Tick) SetMajor(v bool) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotTick_SetMajor(selfArg, C.bool(v))
}

// ImPlotTick_GetMajor returns value of ImPlotTick.Major
func (self *Tick) Major() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.wrap_ImPlotTick_GetMajor(internal.ReinterpretCast[*C.ImPlotTick](selfArg)) == C.bool(true)
}

// ImPlotTick_SetShowLabel sets value of ImPlotTick.ShowLabel
func (self Tick) SetShowLabel(v bool) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotTick_SetShowLabel(selfArg, C.bool(v))
}

// ImPlotTick_GetShowLabel returns value of ImPlotTick.ShowLabel
func (self *Tick) ShowLabel() bool {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return C.wrap_ImPlotTick_GetShowLabel(internal.ReinterpretCast[*C.ImPlotTick](selfArg)) == C.bool(true)
}

// ImPlotTick_SetLevel sets value of ImPlotTick.Level
func (self Tick) SetLevel(v int32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotTick_SetLevel(selfArg, C.int(v))
}

// ImPlotTick_GetLevel returns value of ImPlotTick.Level
func (self *Tick) Level() int32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return int32(C.wrap_ImPlotTick_GetLevel(internal.ReinterpretCast[*C.ImPlotTick](selfArg)))
}

// ImPlotTick_SetIdx sets value of ImPlotTick.Idx
func (self Tick) SetIdx(v int32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotTick_SetIdx(selfArg, C.int(v))
}

// ImPlotTick_GetIdx returns value of ImPlotTick.Idx
func (self *Tick) Idx() int32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return int32(C.wrap_ImPlotTick_GetIdx(internal.ReinterpretCast[*C.ImPlotTick](selfArg)))
}

// ImPlotTicker_SetTicks sets value of ImPlotTicker.Ticks
func (self Ticker) SetTicks(v vectors.Vector[Tick]) {
	vData := v.Data
	vDataArg, _ := vData.Handle()
	vVecArg := new(C.ImVector_ImPlotTick)
	vVecArg.Size = C.int(v.Size)
	vVecArg.Capacity = C.int(v.Capacity)
	vVecArg.Data = internal.ReinterpretCast[*C.ImPlotTick](vDataArg)
	v.Pinner().Pin(vVecArg.Data)

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotTicker_SetTicks(selfArg, *vVecArg)
}

// ImPlotTicker_GetTicks returns value of ImPlotTicker.Ticks
func (self *Ticker) Ticks() vectors.Vector[Tick] {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return vectors.NewVectorFromC(C.wrap_ImPlotTicker_GetTicks(internal.ReinterpretCast[*C.ImPlotTicker](selfArg)).Size, C.wrap_ImPlotTicker_GetTicks(internal.ReinterpretCast[*C.ImPlotTicker](selfArg)).Capacity, NewTickFromC(C.wrap_ImPlotTicker_GetTicks(internal.ReinterpretCast[*C.ImPlotTicker](selfArg)).Data))
}

// ImPlotTicker_SetTextBuffer sets value of ImPlotTicker.TextBuffer
func (self Ticker) SetTextBuffer(v imgui.TextBuffer) {
	vArg, _ := v.C()

	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotTicker_SetTextBuffer(selfArg, internal.ReinterpretCast[C.ImGuiTextBuffer](vArg))
}

// ImPlotTicker_GetTextBuffer returns value of ImPlotTicker.TextBuffer
func (self *Ticker) TextBuffer() imgui.TextBuffer {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return *imgui.NewTextBufferFromC(func() *C.ImGuiTextBuffer {
		result := C.wrap_ImPlotTicker_GetTextBuffer(internal.ReinterpretCast[*C.ImPlotTicker](selfArg))
		return &result
	}())
}

// ImPlotTicker_SetMaxSize sets value of ImPlotTicker.MaxSize
func (self Ticker) SetMaxSize(v imgui.Vec2) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotTicker_SetMaxSize(selfArg, internal.ReinterpretCast[C.ImVec2](v.ToC()))
}

// ImPlotTicker_GetMaxSize returns value of ImPlotTicker.MaxSize
func (self *Ticker) MaxSize() imgui.Vec2 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() imgui.Vec2 {
		out := C.wrap_ImPlotTicker_GetMaxSize(internal.ReinterpretCast[*C.ImPlotTicker](selfArg))
		return *(&imgui.Vec2{}).FromC(unsafe.Pointer(&out))
	}()
}

// ImPlotTicker_SetLateSize sets value of ImPlotTicker.LateSize
func (self Ticker) SetLateSize(v imgui.Vec2) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotTicker_SetLateSize(selfArg, internal.ReinterpretCast[C.ImVec2](v.ToC()))
}

// ImPlotTicker_GetLateSize returns value of ImPlotTicker.LateSize
func (self *Ticker) LateSize() imgui.Vec2 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return func() imgui.Vec2 {
		out := C.wrap_ImPlotTicker_GetLateSize(internal.ReinterpretCast[*C.ImPlotTicker](selfArg))
		return *(&imgui.Vec2{}).FromC(unsafe.Pointer(&out))
	}()
}

// ImPlotTicker_SetLevels sets value of ImPlotTicker.Levels
func (self Ticker) SetLevels(v int32) {
	selfArg, selfFin := self.Handle()
	defer selfFin()
	C.wrap_ImPlotTicker_SetLevels(selfArg, C.int(v))
}

// ImPlotTicker_GetLevels returns value of ImPlotTicker.Levels
func (self *Ticker) Levels() int32 {
	selfArg, selfFin := self.Handle()

	defer func() {
		selfFin()
	}()
	return int32(C.wrap_ImPlotTicker_GetLevels(internal.ReinterpretCast[*C.ImPlotTicker](selfArg)))
}

// ImPlotTime_GetS returns value of ImPlotTime.S
func (self *PlotTime) S() uint64 {
	selfArg, selfFin := internal.Wrap(self)

	defer func() {
		selfFin()
	}()
	return uint64(C.wrap_ImPlotTime_GetS(internal.ReinterpretCast[*C.ImPlotTime](selfArg)))
}

// ImPlotTime_GetUs returns value of ImPlotTime.Us
func (self *PlotTime) Us() int32 {
	selfArg, selfFin := internal.Wrap(self)

	defer func() {
		selfFin()
	}()
	return int32(C.wrap_ImPlotTime_GetUs(internal.ReinterpretCast[*C.ImPlotTime](selfArg)))
}
