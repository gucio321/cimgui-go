// Code generated by cmd/codegen from https://github.com/AllenDang/cimgui-go.
// DO NOT EDIT.

package imguiColorTextEdit

import (
	"github.com/AllenDang/cimgui-go/datautils"
)

// #include <stdlib.h>
// #include <memory.h>
// #include "../imgui/extra_types.h"
// #include "cimcte_wrapper.h"
// #include "cimcte_typedefs.h"
import "C"

type Coordinates struct {
	CData *C.Coordinates
}

// Handle returns C version of Coordinates and its finalizer func.
func (self *Coordinates) Handle() (result *C.Coordinates, fin func()) {
	return self.CData, func() {}
}

// C is like Handle but returns plain type instead of pointer.
func (self Coordinates) C() (C.Coordinates, func()) {
	result, fn := self.Handle()
	return *result, fn
}

// NewCoordinatesFromC creates Coordinates from its C pointer.
// SRC ~= *C.Coordinates
func NewCoordinatesFromC[SRC any](cvalue SRC) *Coordinates {
	return &Coordinates{CData: datautils.ConvertCTypes[*C.Coordinates](cvalue)}
}

type ErrorMarkers struct {
	CData *C.ErrorMarkers
}

// Handle returns C version of ErrorMarkers and its finalizer func.
func (self *ErrorMarkers) Handle() (result *C.ErrorMarkers, fin func()) {
	return self.CData, func() {}
}

// NewErrorMarkersFromC creates ErrorMarkers from its C pointer.
// SRC ~= *C.ErrorMarkers
func NewErrorMarkersFromC[SRC any](cvalue SRC) *ErrorMarkers {
	return &ErrorMarkers{CData: datautils.ConvertCTypes[*C.ErrorMarkers](cvalue)}
}

type LangDef struct {
	CData *C.LangDef
}

// Handle returns C version of LangDef and its finalizer func.
func (self *LangDef) Handle() (result *C.LangDef, fin func()) {
	return self.CData, func() {}
}

// NewLangDefFromC creates LangDef from its C pointer.
// SRC ~= *C.LangDef
func NewLangDefFromC[SRC any](cvalue SRC) *LangDef {
	return &LangDef{CData: datautils.ConvertCTypes[*C.LangDef](cvalue)}
}

type TextEditor struct {
	CData *C.TextEditor
}

// Handle returns C version of TextEditor and its finalizer func.
func (self *TextEditor) Handle() (result *C.TextEditor, fin func()) {
	return self.CData, func() {}
}

// NewTextEditorFromC creates TextEditor from its C pointer.
// SRC ~= *C.TextEditor
func NewTextEditorFromC[SRC any](cvalue SRC) *TextEditor {
	return &TextEditor{CData: datautils.ConvertCTypes[*C.TextEditor](cvalue)}
}
